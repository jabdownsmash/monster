(function (console, $hx_exports) { "use strict";
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = true;
ApplicationMain.create = function() {
	ApplicationMain.app = new Main();
	ApplicationMain.app.create(ApplicationMain.config);
	ApplicationMain.preloader = new lime_app_Preloader();
	ApplicationMain.preloader.onComplete = ApplicationMain.start;
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("assets/head.png");
	types.push("IMAGE");
	urls.push("assets/leftarm.png");
	types.push("IMAGE");
	urls.push("assets/soldier-stand.png");
	types.push("IMAGE");
	urls.push("assets/rightarm.png");
	types.push("IMAGE");
	urls.push("assets/soldier-runcycle.png");
	types.push("IMAGE");
	urls.push("assets/body.png");
	types.push("IMAGE");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
};
ApplicationMain.main = function() {
	ApplicationMain.config = { antialiasing : 0, background : 16777215, borderless : false, company : "Company Name", depthBuffer : false, file : "Monster", fps : 60, fullscreen : false, hardware : true, height : 0, orientation : "", packageName : "com.sample.monster", resizable : true, stencilBuffer : false, title : "Monster", version : "1.0.0", vsync : false, width : 0};
};
ApplicationMain.start = function() {
	var result = ApplicationMain.app.exec();
};
var lime_AssetLibrary = function() {
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = true;
lime_AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function(handler) {
		handler(this);
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	var id;
	id = "assets/head.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/leftarm.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/soldier-stand.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/rightarm.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/soldier-runcycle.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/body.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	var assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = true;
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	createThreadPool: function() {
		var _g = this;
		this.threadPool = new lime_system_ThreadPool(0,2);
		this.threadPool.doWork.add(function(id,data) {
			data.result = data.getMethod(id);
			_g.threadPool.sendComplete(data.handler,data);
		});
		this.threadPool.onComplete.add(function(id1,data1) {
			data1.handler(data1.result);
		});
	}
	,exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var data = loader.data;
		if(typeof(data) == "string") {
			bytes = new lime_utils_ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var data = loader.data;
		if(typeof(data) == "string") return data; else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		if(this.path.exists(id)) {
			var loader = new lime_net_URLLoader();
			loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
			loader.onComplete.add(function(_) {
				handler(loader.data);
			});
			loader.load(new lime_net_URLRequest(this.path.get(id)));
		} else handler(this.getBytes(id));
	}
	,loadImage: function(id,handler) {
		if(this.path.exists(id)) {
			var image = new Image();
			image.onload = function(_) {
				handler(lime_graphics_Image.fromImageElement(image));
			};
			image.src = this.path.get(id);
		} else handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		if(this.path.exists(id)) {
			var loader = new lime_net_URLLoader();
			loader.onComplete.add(function(_) {
				handler(loader.data);
			});
			loader.load(new lime_net_URLRequest(this.path.get(id)));
		} else handler(this.getText(id));
	}
	,__class__: DefaultAssetLibrary
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = true;
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = true;
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	init: function(context) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchEnd: function(x,y,id) {
	}
	,onTouchMove: function(x,y,id) {
	}
	,onTouchStart: function(x,y,id) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowEnter: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onUpdate.add($bind(this,this.update));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = true;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		this.modules.push(module);
		if(this.initialized && this.renderer != null) module.init(this.renderer.context);
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add($bind(this,this.render));
		renderer.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		renderer.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		this.renderers.push(renderer);
		this.renderer = renderer;
	}
	,addWindow: function(window) {
		this.windows.push(window);
		this.window = window;
		window.onGamepadAxisMove.add($bind(this,this.onGamepadAxisMove));
		window.onGamepadButtonDown.add($bind(this,this.onGamepadButtonDown));
		window.onGamepadButtonUp.add($bind(this,this.onGamepadButtonUp));
		window.onGamepadConnect.add($bind(this,this.onGamepadConnect));
		window.onGamepadDisconnect.add($bind(this,this.onGamepadDisconnect));
		window.onKeyDown.add($bind(this,this.onKeyDown));
		window.onKeyUp.add($bind(this,this.onKeyUp));
		window.onMouseDown.add($bind(this,this.onMouseDown));
		window.onMouseMove.add($bind(this,this.onMouseMove));
		window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
		window.onMouseUp.add($bind(this,this.onMouseUp));
		window.onMouseWheel.add($bind(this,this.onMouseWheel));
		window.onTextEdit.add($bind(this,this.onTextEdit));
		window.onTextInput.add($bind(this,this.onTextInput));
		window.onTouchStart.add($bind(this,this.onTouchStart));
		window.onTouchMove.add($bind(this,this.onTouchMove));
		window.onTouchEnd.add($bind(this,this.onTouchEnd));
		window.onWindowActivate.add($bind(this,this.onWindowActivate));
		window.onWindowClose.add($bind(this,this.onWindowClose));
		window.onWindowDeactivate.add($bind(this,this.onWindowDeactivate));
		window.onWindowEnter.add($bind(this,this.onWindowEnter));
		window.onWindowFocusIn.add($bind(this,this.onWindowFocusIn));
		window.onWindowFocusOut.add($bind(this,this.onWindowFocusOut));
		window.onWindowFullscreen.add($bind(this,this.onWindowFullscreen));
		window.onWindowLeave.add($bind(this,this.onWindowLeave));
		window.onWindowMinimize.add($bind(this,this.onWindowMinimize));
		window.onWindowMove.add($bind(this,this.onWindowMove));
		window.onWindowResize.add($bind(this,this.onWindowResize));
		window.onWindowRestore.add($bind(this,this.onWindowRestore));
		window.create(this);
	}
	,create: function(config) {
		this.backend.create(config);
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,init: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.init(context);
		}
		this.initialized = true;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(keyCode,modifier);
		}
	}
	,onKeyUp: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(keyCode,modifier);
		}
	}
	,onMouseDown: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(x,y,button);
		}
	}
	,onMouseMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(x,y);
		}
	}
	,onMouseMoveRelative: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(x,y);
		}
	}
	,onMouseUp: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(x,y,button);
		}
	}
	,onMouseWheel: function(deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(deltaX,deltaY);
		}
	}
	,onRenderContextLost: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost();
		}
	}
	,onRenderContextRestored: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(context);
		}
	}
	,onTextEdit: function(text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(text,start,length);
		}
	}
	,onTextInput: function(text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(text);
		}
	}
	,onTouchEnd: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(x,y,id);
		}
	}
	,onTouchMove: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(x,y,id);
		}
	}
	,onTouchStart: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(x,y,id);
		}
	}
	,onWindowActivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate();
		}
	}
	,onWindowClose: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose();
		}
	}
	,onWindowDeactivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate();
		}
	}
	,onWindowEnter: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter();
		}
	}
	,onWindowFocusIn: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn();
		}
	}
	,onWindowFocusOut: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut();
		}
	}
	,onWindowFullscreen: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen();
		}
	}
	,onWindowLeave: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave();
		}
	}
	,onWindowMinimize: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize();
		}
	}
	,onWindowMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(x,y);
		}
	}
	,onWindowResize: function(width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(width,height);
		}
	}
	,onWindowRestore: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore();
		}
	}
	,removeModule: function(module) {
		HxOverrides.remove(this.modules,module);
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && HxOverrides.indexOf(this.windows,window,0) > -1) {
			window.close();
			HxOverrides.remove(this.windows,window);
		}
	}
	,render: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(context);
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,__class__: lime_app_Application
});
var Main = function() {
	this.started = false;
	lime_app_Application.call(this);
};
$hxClasses["Main"] = Main;
Main.__name__ = true;
Main.__super__ = lime_app_Application;
Main.prototype = $extend(lime_app_Application.prototype,{
	render: function(context) {
		if(!this.started) {
			var customRenderer = new fluidity2_backends_CustomRenderer();
			customRenderer.fragmentSource = "precision mediump float;" + "varying vec2 vTexCoord;\n\t            uniform sampler2D uImage0;\n\t            uniform vec4 uColor;\n\n\t            \n\t            void main(void)\n\t            {\n\n\t                gl_FragColor = texture2D(uImage0, vTexCoord) * uColor;\n\t            }";
			var colorUniform;
			customRenderer.customInitFunc = function(program) {
				colorUniform = lime_graphics_opengl_GL.context.getUniformLocation(program,"uColor");
			};
			customRenderer.customRenderPreFunc = function(obj) {
				if(Main.randomColor) lime_graphics_opengl_GL.uniform4f(colorUniform,Math.random() / 2 + .5,Math.random() / 2 + .5,Math.random() / 2 + .5,1); else lime_graphics_opengl_GL.context.uniform4f(colorUniform,Main.drawColorR,Main.drawColorB,Main.drawColorG,Main.drawColorA);
			};
			this.started = true;
			var lgb = new fluidity2_backends_LimeGraphicsBackend(this.window);
			lgb.setCustom(customRenderer);
			fluidity2_Backend.graphics = lgb;
			fluidity2_Backend.physics = new fluidity2_backends_SimplePhysicsBackend();
			this.limeInput = new gtoolbox_LimeInput();
			fluidity2_Backend.input = this.limeInput;
			this.scene = new MonsterScene();
			this.scene.start();
		}
		this.scene.update();
		this.scene.render();
	}
	,onKeyDown: function(key,modifier) {
		this.limeInput.limeOnKeyDown(key);
	}
	,onKeyUp: function(key,modifier) {
		this.limeInput.limeOnKeyUp(key);
	}
	,__class__: Main
});
Math.__name__ = true;
var fluidity2_GameScene = function(gravity) {
	this.generatorMap = new haxe_ds_StringMap();
	this.objects = [];
	this.typeMap = new haxe_ds_StringMap();
	this.active = false;
	this.input = fluidity2_Backend.input;
	this.input.reset();
	fluidity2_Backend.physics.newScene(this);
	fluidity2_Backend.graphics.newScene(this);
};
$hxClasses["fluidity2.GameScene"] = fluidity2_GameScene;
fluidity2_GameScene.__name__ = true;
fluidity2_GameScene.prototype = {
	add: function(obj) {
		this.objects.push(obj);
		fluidity2_Backend.graphics.sceneAdd(this,obj);
		fluidity2_Backend.physics.sceneAdd(this,obj);
		return this;
	}
	,remove: function(obj) {
		if(HxOverrides.remove(this.objects,obj)) {
			fluidity2_Backend.graphics.sceneRemove(this,obj);
			fluidity2_Backend.physics.sceneRemove(this,obj);
		}
		return this;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			obj.update();
		}
		fluidity2_Backend.physics.sceneUpdate(this);
		fluidity2_Backend.graphics.sceneUpdate(this);
		return this;
	}
	,render: function() {
		fluidity2_Backend.graphics.sceneRender(this);
	}
	,start: function() {
		this.active = true;
		this.onStart();
		fluidity2_Backend.graphics.sceneStart(this);
		fluidity2_Backend.physics.sceneStart(this);
		return this;
	}
	,stop: function() {
		fluidity2_Backend.graphics.sceneStop(this);
		fluidity2_Backend.physics.sceneStop(this);
		this.onStop();
		this.active = false;
		return this;
	}
	,onStart: function() {
	}
	,onStop: function() {
	}
	,processEvent: function(event) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			obj.processEvent(event);
		}
		return this;
	}
	,addGenerator: function(name,generatorWithoutArgs,generatorWithArgs) {
		if(generatorWithoutArgs == null && generatorWithArgs == null) {
			haxe_Log.trace("No argument given to set generator " + name,{ fileName : "GameScene.hx", lineNumber : 107, className : "fluidity2.GameScene", methodName : "addGenerator"});
			return this;
		}
		if(generatorWithoutArgs != null && generatorWithArgs != null) {
			haxe_Log.trace("Too many arguments given to set generator " + name,{ fileName : "GameScene.hx", lineNumber : 112, className : "fluidity2.GameScene", methodName : "addGenerator"});
			return this;
		}
		if(generatorWithoutArgs != null) this.generatorMap.set(name,function(a) {
			return generatorWithoutArgs();
		});
		if(generatorWithArgs != null) this.generatorMap.set(name,generatorWithArgs);
		this.typeMap.set(name,new fluidity2_ObjectType());
		return this;
	}
	,addInteractionStartListener: function(name,type1,type2) {
		fluidity2_Backend.physics.typeAddInteractionStartEvent(type1,name,type2);
	}
	,addInteractionStopListener: function(name,type1,type2) {
		fluidity2_Backend.physics.typeAddInteractionStopEvent(type1,name,type2);
	}
	,generate: function(name,args) {
		if(args == null) args = [];
		if(this.active) {
			var obj = (this.generatorMap.get(name))(args);
			this.add(obj);
			this.typeMap.get(name).addObject(obj);
			return obj;
		} else {
			haxe_Log.trace("Cannot generate objects before this scene has started. Override onStart() and generate objects there. Obj name: " + name,{ fileName : "GameScene.hx", lineNumber : 153, className : "fluidity2.GameScene", methodName : "generate"});
			return null;
		}
	}
	,type: function(name) {
		if(this.typeMap.exists(name)) return this.typeMap.get(name);
		var t = new fluidity2_ObjectType();
		this.typeMap.set(name,t);
		return t;
	}
	,__class__: fluidity2_GameScene
};
var MonsterScene = function() {
	var _g = this;
	fluidity2_GameScene.call(this,new nape_geom_Vec2(0,0));
	var states = new fluidity2_StringBin(function(name) {
		return new evsm_FState(name);
	});
	var headOptions_image = "assets/head.png";
	var headOptions_startPosition = new nape_geom_Vec2(100,200);
	var rightArmOptions = { image : "assets/rightarm.png", restingPosition : new nape_geom_Vec2(-40,70), bobHeight : 10, bobSpeed : 2, followSpeed : 0.166666666666666657};
	var leftArmOptions = { image : "assets/leftarm.png", restingPosition : new nape_geom_Vec2(30,70), bobHeight : 10, bobSpeed : 3, followSpeed : 0.166666666666666657};
	var bodyOptions = { image : "assets/body.png", restingPosition : new nape_geom_Vec2(-10,60), bobHeight : 10, bobSpeed : 4, followSpeed : 0.5};
	this.input.registerAxis(gtoolbox_KeyboardKeys.LEFT,gtoolbox_KeyboardKeys.RIGHT,"x").registerAxis(gtoolbox_KeyboardKeys.UP,gtoolbox_KeyboardKeys.DOWN,"y");
	var playerType = new fluidity2_ObjectType();
	this.addGenerator("player",function() {
		var head = new fluidity2_GameObject().setGraphic(fluidity2_Graphic.Image(headOptions_image)).setScale(0.25).setState(states.get("playerNormal")).addType(playerType);
		_g.generate("part",[rightArmOptions,head]);
		_g.generate("part",[leftArmOptions,head]);
		_g.generate("part",[bodyOptions,head]);
		return head;
	});
	this.addGenerator("part",null,function(args) {
		return new fluidity2_GameObject().setGraphic(fluidity2_Graphic.Image(args[0].image)).setScale(0.25).setState(states.get("restingBob")).setAttribute("restingPosition",args[0].restingPosition).setAttribute("bobHeight",args[0].bobHeight).setAttribute("bobSpeed",args[0].bobSpeed).setAttribute("followSpeed",args[0].followSpeed).setAttribute("head",args[1]).addType(playerType);
	});
	this.addGenerator("soldier",function() {
		return new fluidity2_GameObject().setGraphic(fluidity2_Graphic.SpriteSheet("assets/soldier-runcycle.png",16,14,[0,1,2,3],5,true)).setState(states.get("soldierNormal")).addType(playerType);
	});
	var bobCounter = 0.0;
	states.get("playerNormal").setUpdate(function(obj) {
		bobCounter += .01;
		obj.velocity.setxy(_g.input.getAxis("x") * 5,_g.input.getAxis("y") * 5);
	});
	states.get("restingBob").setUpdate(function(obj1) {
		var targetPosition = obj1.getAttribute("head").position;
		var restingPosition = obj1.getAttribute("restingPosition");
		var bobSpeed = obj1.getAttribute("bobSpeed");
		var bobHeight = obj1.getAttribute("bobHeight");
		var followSpeed = obj1.getAttribute("followSpeed");
		if(targetPosition != null && targetPosition.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		targetPosition = nape_geom_Vec2.get((function($this) {
			var $r;
			if(targetPosition != null && targetPosition.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			targetPosition.zpp_inner.validate();
			$r = targetPosition.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(targetPosition != null && targetPosition.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			targetPosition.zpp_inner.validate();
			$r = targetPosition.zpp_inner.y;
			return $r;
		}(this)),false);
		var _g1 = targetPosition;
		_g1.set_x((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(restingPosition != null && restingPosition.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			restingPosition.zpp_inner.validate();
			$r = restingPosition.zpp_inner.x;
			return $r;
		}(this)));
		var _g2 = targetPosition;
		_g2.set_y((function($this) {
			var $r;
			if(_g2 != null && _g2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			_g2.zpp_inner.validate();
			$r = _g2.zpp_inner.y;
			return $r;
		}(this)) + ((function($this) {
			var $r;
			if(restingPosition != null && restingPosition.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			restingPosition.zpp_inner.validate();
			$r = restingPosition.zpp_inner.y;
			return $r;
		}(this)) + Math.sin(bobCounter * bobSpeed) * bobHeight));
		var velocity = targetPosition.sub(obj1.position);
		if((function($this) {
			var $r;
			if(velocity != null && velocity.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if(velocity != null && velocity.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				velocity.zpp_inner.validate();
				$r = velocity.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(velocity != null && velocity.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				velocity.zpp_inner.validate();
				$r = velocity.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if(velocity != null && velocity.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				velocity.zpp_inner.validate();
				$r = velocity.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(velocity != null && velocity.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				velocity.zpp_inner.validate();
				$r = velocity.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) != 0) {
			var _g3 = velocity;
			_g3.set_length((function($this) {
				var $r;
				if(_g3 != null && _g3.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$r = Math.sqrt((function($this) {
					var $r;
					if(_g3 != null && _g3.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					_g3.zpp_inner.validate();
					$r = _g3.zpp_inner.x;
					return $r;
				}($this)) * (function($this) {
					var $r;
					if(_g3 != null && _g3.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					_g3.zpp_inner.validate();
					$r = _g3.zpp_inner.x;
					return $r;
				}($this)) + (function($this) {
					var $r;
					if(_g3 != null && _g3.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					_g3.zpp_inner.validate();
					$r = _g3.zpp_inner.y;
					return $r;
				}($this)) * (function($this) {
					var $r;
					if(_g3 != null && _g3.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					_g3.zpp_inner.validate();
					$r = _g3.zpp_inner.y;
					return $r;
				}($this)));
				return $r;
			}(this)) * followSpeed);
		}
		obj1.setVelocity(velocity);
	});
	states.get("soldierNormal");
};
$hxClasses["MonsterScene"] = MonsterScene;
MonsterScene.__name__ = true;
MonsterScene.__super__ = fluidity2_GameScene;
MonsterScene.prototype = $extend(fluidity2_GameScene.prototype,{
	onStart: function() {
		this.generate("player");
		this.generate("soldier");
	}
	,__class__: MonsterScene
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var evsm_FState = function(n) {
	if(n == null) n = "Unnamed";
	this.eventActions = new haxe_ds_StringMap();
	this.parameters = new haxe_ds_ObjectMap();
	this.parents = [];
	this.callbacks = [function(f,u) {
	},function(f1,u1) {
	},function(f2,u2) {
	}];
	this.CB_END = 2;
	this.CB_START = 1;
	this.CB_UPDATE = 0;
	this.name = n;
};
$hxClasses["evsm.FState"] = evsm_FState;
evsm_FState.__name__ = true;
evsm_FState.prototype = {
	addTransition: function(toState,eventID) {
		this.eventActions.set(eventID,toState);
		return this;
	}
	,setUpdate: function(func1) {
		this.setCallback(this.CB_UPDATE,func1);
		return this;
	}
	,setStart: function(func1,func2) {
		this.setCallback(this.CB_START,func1,func2);
		return this;
	}
	,setEnd: function(func1,func2) {
		this.setCallback(this.CB_END,func1,func2);
		return this;
	}
	,addParent: function(parent,params) {
		this.parents.push(parent);
		if(params != null) this.parameters.set(parent,params);
		return this;
	}
	,getParameter: function(i) {
		return this.currentParameterRef.h[this.__id__][i];
	}
	,switchTo: function(obj,toState,event) {
		this.end(obj,event);
		obj.state = toState;
		toState.start(obj,event);
	}
	,processEvent: function(obj,event) {
		if(this.eventActions.exists(event.id)) {
			this.switchTo(obj,this.eventActions.get(event.id),event);
			return true;
		}
		var _g = 0;
		var _g1 = this.parents;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent.processEvent(obj,event)) return true;
		}
		return false;
	}
	,update: function(obj) {
		if(this.processCallback(obj,this.CB_UPDATE,this)) return true;
		return false;
	}
	,setCallback: function(i,func1,func2) {
		if(func1 == null && func2 == null) {
			haxe_Log.trace("No argument given to set callback on state " + this.name,{ fileName : "FState.hx", lineNumber : 105, className : "evsm.FState", methodName : "setCallback"});
			return this;
		}
		if(func1 != null && func2 != null) {
			haxe_Log.trace("Too many arguments given to set callback on state " + this.name,{ fileName : "FState.hx", lineNumber : 110, className : "evsm.FState", methodName : "setCallback"});
			return this;
		}
		if(func1 != null) this.callbacks[i] = function(t,u) {
			func1(t);
		};
		if(func2 != null) this.callbacks[i] = func2;
		return this;
	}
	,processCallback: function(obj,i,parameterRef,event) {
		this.currentParameterRef = parameterRef.parameters;
		var currentState = obj.state;
		if(this.callbacks[i] != null) {
			this.callbacks[i](obj,event);
			if(obj.state != currentState) return true;
		}
		var _g = 0;
		var _g1 = this.parents;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent.processCallback(obj,i,this,event)) return true;
		}
		return false;
	}
	,start: function(obj,event) {
		return this.processCallback(obj,this.CB_START,this,event);
	}
	,end: function(obj,event) {
		return this.processCallback(obj,this.CB_END,this,event);
	}
	,__class__: evsm_FState
};
var fluidity2_Backend = function() { };
$hxClasses["fluidity2.Backend"] = fluidity2_Backend;
fluidity2_Backend.__name__ = true;
var fluidity2_Collider = $hxClasses["fluidity2.Collider"] = { __ename__ : true, __constructs__ : ["None","Circle","Rectangle"] };
fluidity2_Collider.None = ["None",0];
fluidity2_Collider.None.toString = $estr;
fluidity2_Collider.None.__enum__ = fluidity2_Collider;
fluidity2_Collider.Circle = function(x,y,r) { var $x = ["Circle",1,x,y,r]; $x.__enum__ = fluidity2_Collider; $x.toString = $estr; return $x; };
fluidity2_Collider.Rectangle = function(x,y,w,h) { var $x = ["Rectangle",2,x,y,w,h]; $x.__enum__ = fluidity2_Collider; $x.toString = $estr; return $x; };
var fluidity2_Collision = function(o1,o2,n) {
	this.obj1 = o1;
	this.obj2 = o2;
	this.normal = n;
};
$hxClasses["fluidity2.Collision"] = fluidity2_Collision;
fluidity2_Collision.__name__ = true;
fluidity2_Collision.prototype = {
	__class__: fluidity2_Collision
};
var fluidity2_EnumBin = function(f) {
	this.binMap = new haxe_ds_EnumValueMap();
	this.instantiator = f;
};
$hxClasses["fluidity2.EnumBin"] = fluidity2_EnumBin;
fluidity2_EnumBin.__name__ = true;
fluidity2_EnumBin.prototype = {
	get: function(name) {
		if(this.binMap.exists(name)) return this.binMap.get(name); else {
			var obj = this.instantiator(name);
			this.binMap.set(name,obj);
			return obj;
		}
	}
	,__class__: fluidity2_EnumBin
};
var fluidity2_GameEvent = function(id,col) {
	this.id = id;
	this.collision = col;
};
$hxClasses["fluidity2.GameEvent"] = fluidity2_GameEvent;
fluidity2_GameEvent.__name__ = true;
fluidity2_GameEvent.prototype = {
	__class__: fluidity2_GameEvent
};
var fluidity2_GameObject = function() {
	this.eventTriggers = [];
	this.attributes = new haxe_ds_StringMap();
	this.currentAnimationTime = 0;
	this.physicsManaged = false;
	this.scale = 1;
	this.z = 1;
	this.hasParent = false;
	this.angularVelocity = 0;
	this.angle = 0;
	this.velocity = new nape_geom_Vec2(0,0);
	this.position = new nape_geom_Vec2(0,0);
	fluidity2_Backend.physics.newObject(this);
};
$hxClasses["fluidity2.GameObject"] = fluidity2_GameObject;
fluidity2_GameObject.__name__ = true;
fluidity2_GameObject.prototype = {
	processEvent: function(e) {
		this.state.processEvent(this,e);
		return this;
	}
	,setX: function(x) {
		this.position.set_x(x);
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,setY: function(y) {
		this.position.set_y(y);
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,setAngle: function(r) {
		this.angle = r;
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,translateX: function(x) {
		var _g = this.position;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) + x);
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,translateY: function(y) {
		var _g = this.position;
		_g.set_y((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.y;
			return $r;
		}(this)) + y);
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,translate: function(v) {
		this.position.add(v);
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,rotate: function(r) {
		this.angle += r;
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,setVelocityX: function(x) {
		this.velocity.set_x(x);
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,setVelocityY: function(y) {
		this.velocity.set_y(y);
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,setAngularVel: function(r) {
		this.angularVelocity = r;
		return this;
	}
	,setPosition: function(v) {
		this.position.set(v);
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,setVelocity: function(v) {
		this.velocity.set(v);
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,setZ: function(z) {
		this.z = z;
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,setScale: function(s) {
		this.scale = s;
		fluidity2_Backend.physics.objectChanged(this);
		return this;
	}
	,setAttribute: function(attrib,value) {
		this.attributes.set(attrib,value);
		return this;
	}
	,getAttribute: function(attrib) {
		return this.attributes.get(attrib);
	}
	,setGraphic: function(g) {
		fluidity2_Backend.graphics.objectSet(this,g);
		return this;
	}
	,setCollider: function(collider) {
		fluidity2_Backend.physics.objectSet(this,collider);
		return this;
	}
	,addType: function(type) {
		type.addObject(this);
		fluidity2_Backend.physics.objectAddType(this,type);
		return this;
	}
	,isType: function(t) {
		return this.type == t;
	}
	,setState: function(s) {
		if(this.state == null) this.state = new evsm_FState();
		this.state.switchTo(this,s,new fluidity2_GameEvent(""));
		return this;
	}
	,update: function() {
		this.state.update(this);
		fluidity2_Backend.physics.objectUpdate(this);
		fluidity2_Backend.graphics.objectUpdate(this);
		this.currentAnimationTime += 1;
	}
	,addEventTrigger: function(eventName,func) {
		this.eventTriggers.push({ eventName : eventName, func : func});
	}
	,__class__: fluidity2_GameObject
};
var fluidity2_Graphic = $hxClasses["fluidity2.Graphic"] = { __ename__ : true, __constructs__ : ["Image","SpriteSheet"] };
fluidity2_Graphic.Image = function(filename) { var $x = ["Image",0,filename]; $x.__enum__ = fluidity2_Graphic; $x.toString = $estr; return $x; };
fluidity2_Graphic.SpriteSheet = function(filename,width,height,frames,frameLength,loop) { var $x = ["SpriteSheet",1,filename,width,height,frames,frameLength,loop]; $x.__enum__ = fluidity2_Graphic; $x.toString = $estr; return $x; };
var fluidity2_IGraphicsBackend = function() { };
$hxClasses["fluidity2.IGraphicsBackend"] = fluidity2_IGraphicsBackend;
fluidity2_IGraphicsBackend.__name__ = true;
fluidity2_IGraphicsBackend.prototype = {
	__class__: fluidity2_IGraphicsBackend
};
var fluidity2_IPhysicsBackend = function() { };
$hxClasses["fluidity2.IPhysicsBackend"] = fluidity2_IPhysicsBackend;
fluidity2_IPhysicsBackend.__name__ = true;
fluidity2_IPhysicsBackend.prototype = {
	__class__: fluidity2_IPhysicsBackend
};
var fluidity2_ObjectType = function() {
	this.objects = [];
};
$hxClasses["fluidity2.ObjectType"] = fluidity2_ObjectType;
fluidity2_ObjectType.__name__ = true;
fluidity2_ObjectType.prototype = {
	addObject: function(obj) {
		this.objects.push(obj);
		obj.type = this;
	}
	,removeObject: function(obj) {
		if(obj.type == this) {
			HxOverrides.remove(this.objects,obj);
			obj.type = null;
		}
	}
	,__class__: fluidity2_ObjectType
};
var fluidity2_StringBin = function(f) {
	this.binMap = new haxe_ds_StringMap();
	this.instantiator = f;
};
$hxClasses["fluidity2.StringBin"] = fluidity2_StringBin;
fluidity2_StringBin.__name__ = true;
fluidity2_StringBin.prototype = {
	get: function(name) {
		if(this.binMap.exists(name)) return this.binMap.get(name); else {
			var obj = this.instantiator(name);
			this.binMap.set(name,obj);
			return obj;
		}
	}
	,__class__: fluidity2_StringBin
};
var fluidity2_TypeBin = function(f) {
	this.binMap = new haxe_ds_ObjectMap();
	this.instantiator = f;
};
$hxClasses["fluidity2.TypeBin"] = fluidity2_TypeBin;
fluidity2_TypeBin.__name__ = true;
fluidity2_TypeBin.prototype = {
	get: function(name) {
		if(this.binMap.h.__keys__[name.__id__] != null) return this.binMap.h[name.__id__]; else {
			var obj = this.instantiator(name);
			this.binMap.set(name,obj);
			return obj;
		}
	}
	,__class__: fluidity2_TypeBin
};
var fluidity2_backends_CustomRenderer = function() {
};
$hxClasses["fluidity2.backends.CustomRenderer"] = fluidity2_backends_CustomRenderer;
fluidity2_backends_CustomRenderer.__name__ = true;
fluidity2_backends_CustomRenderer.prototype = {
	__class__: fluidity2_backends_CustomRenderer
};
var fluidity2_backends_LimeGraphicsBackend = function(w) {
	this.window = w;
	this.initBins();
	this.initGL();
};
$hxClasses["fluidity2.backends.LimeGraphicsBackend"] = fluidity2_backends_LimeGraphicsBackend;
fluidity2_backends_LimeGraphicsBackend.__name__ = true;
fluidity2_backends_LimeGraphicsBackend.__interfaces__ = [fluidity2_IGraphicsBackend];
fluidity2_backends_LimeGraphicsBackend.prototype = {
	setCustom: function(custom) {
		this.customRenderer = custom;
		this.initGL();
	}
	,initBins: function() {
		var _g = this;
		this.objectLists = new fluidity2_TypeBin(function(g) {
			return [];
		});
		this.objects = new fluidity2_EnumBin(function(g1) {
			var obj = new fluidity2_backends_LimeGraphicsObject(g1);
			if(_g.customRenderer != null && _g.customRenderer.customRenderPreFunc != null) obj.customRenderPreFunc = _g.customRenderer.customRenderPreFunc;
			if(_g.customRenderer != null && _g.customRenderer.customRenderPostFunc != null) obj.customRenderPostFunc = _g.customRenderer.customRenderPostFunc;
			return obj;
		});
	}
	,initGL: function() {
		var vertexSource = "";
		if(this.customRenderer != null && this.customRenderer.vertexSource != null) vertexSource = this.customRenderer.vertexSource; else vertexSource = "attribute vec4 aPosition;\n            attribute vec2 aTexCoord;\n            varying vec2 vTexCoord;\n            \n            uniform mat4 uProjectionMatrix;\n            uniform mat4 uModelViewMatrix;\n            uniform vec2 uTexSize;\n            uniform vec2 uTexOffset;\n            \n            void main(void) {\n                \n                vTexCoord = uTexOffset + aTexCoord * uTexSize;\n                gl_Position = uProjectionMatrix * uModelViewMatrix * aPosition;\n                \n            }";
		var fragmentSource = "";
		if(this.customRenderer != null && this.customRenderer.fragmentSource != null) fragmentSource = this.customRenderer.fragmentSource; else fragmentSource = "precision mediump float;" + "varying vec2 vTexCoord;\n            uniform sampler2D uImage0;\n            \n            void main(void)\n            {\n                gl_FragColor = texture2D (uImage0, vTexCoord);\n            }";
		this.program = lime_utils_GLUtils.createProgram(vertexSource,fragmentSource);
		lime_graphics_opengl_GL.context.useProgram(this.program);
		var vertexAttribute = lime_graphics_opengl_GL.context.getAttribLocation(this.program,"aPosition");
		lime_graphics_opengl_GL.context.enableVertexAttribArray(vertexAttribute);
		var textureAttribute = lime_graphics_opengl_GL.context.getAttribLocation(this.program,"aTexCoord");
		lime_graphics_opengl_GL.context.enableVertexAttribArray(textureAttribute);
		var imageUniform = lime_graphics_opengl_GL.context.getUniformLocation(this.program,"uImage0");
		lime_graphics_opengl_GL.context.uniform1i(imageUniform,0);
		if(this.customRenderer != null && this.customRenderer.customInitFunc != null) this.customRenderer.customInitFunc(this.program);
		lime_graphics_opengl_GL.context.blendFunc(770,771);
		lime_graphics_opengl_GL.context.enable(3042);
		fluidity2_backends_LimeGraphicsObject.init(this.program);
	}
	,newScene: function(scene) {
	}
	,sceneAdd: function(scene,obj) {
	}
	,sceneRemove: function(scene,obj) {
	}
	,sceneUpdate: function(scene) {
	}
	,sceneStart: function(scene) {
	}
	,sceneStop: function(scene) {
	}
	,sceneRender: function(scene) {
		lime_graphics_opengl_GL.context.viewport(0,0,this.window.__width,this.window.__height);
		lime_graphics_opengl_GL.context.clearColor(0,0,0,1);
		lime_graphics_opengl_GL.context.clear(16384);
		var projectionMatrixUniform = lime_graphics_opengl_GL.context.getUniformLocation(this.program,"uProjectionMatrix");
		var matrix = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(-400.,400.,300.,-300.,-1000,1000);
		lime_graphics_opengl_GL.context.uniformMatrix4fv(projectionMatrixUniform,false,matrix);
		var $it0 = this.objects.binMap.iterator();
		while( $it0.hasNext() ) {
			var object = $it0.next();
			object.renderList(this.objectLists.get(object));
		}
	}
	,newObject: function(obj) {
	}
	,objectSet: function(obj,graphic) {
		this.objectLists.get(this.objects.get(graphic)).push(obj);
	}
	,objectUpdate: function(obj) {
	}
	,__class__: fluidity2_backends_LimeGraphicsBackend
};
var fluidity2_backends_LimeGraphicsObject = function(g) {
	this.customRenderPostFunc = function(g) {
	};
	this.customRenderPreFunc = function(g) {
	};
	this.height = 0;
	this.width = 0;
	this.graphic = g;
	var filename;
	{
		var _g = this.graphic;
		switch(_g[1]) {
		case 0:
			var f = _g[2];
			filename = f;
			break;
		case 1:
			var f1 = _g[2];
			filename = f1;
			break;
		}
	}
	var image = lime_Assets.getImage(filename);
	{
		var _g1 = this.graphic;
		switch(_g1[1]) {
		case 0:
			this.width = image.width;
			this.height = image.height;
			break;
		case 1:
			var h = _g1[4];
			var w = _g1[3];
			this.width = w;
			this.height = h;
			this.imageWidth = image.width;
			this.imageFrames = Math.floor(image.width / w);
			break;
		}
	}
	this.texture = lime_graphics_opengl_GL.context.createTexture();
	lime_graphics_opengl_GL.context.bindTexture(3553,this.texture);
	lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
	lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
	lime_graphics_opengl_GL.texImage2D(3553,0,6408,image.buffer.width,image.buffer.height,0,6408,5121,image.get_data());
	lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
	lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
	lime_graphics_opengl_GL.context.bindTexture(3553,null);
};
$hxClasses["fluidity2.backends.LimeGraphicsObject"] = fluidity2_backends_LimeGraphicsObject;
fluidity2_backends_LimeGraphicsObject.__name__ = true;
fluidity2_backends_LimeGraphicsObject.init = function(program) {
	fluidity2_backends_LimeGraphicsObject.vertexAttribute = lime_graphics_opengl_GL.context.getAttribLocation(program,"aPosition");
	fluidity2_backends_LimeGraphicsObject.textureAttribute = lime_graphics_opengl_GL.context.getAttribLocation(program,"aTexCoord");
	fluidity2_backends_LimeGraphicsObject.mvMatrixUniformLocation = lime_graphics_opengl_GL.context.getUniformLocation(program,"uModelViewMatrix");
	fluidity2_backends_LimeGraphicsObject.texSizeUniformLocation = lime_graphics_opengl_GL.context.getUniformLocation(program,"uTexSize");
	fluidity2_backends_LimeGraphicsObject.texOffsetUniformLocation = lime_graphics_opengl_GL.context.getUniformLocation(program,"uTexOffset");
	var data = [.5,.5,0,1,1,.5,-.5,0,1,0,-.5,.5,0,0,1,-.5,-.5,0,0,0];
	fluidity2_backends_LimeGraphicsObject.quadBuffer = lime_graphics_opengl_GL.context.createBuffer();
	lime_graphics_opengl_GL.context.bindBuffer(34962,fluidity2_backends_LimeGraphicsObject.quadBuffer);
	lime_graphics_opengl_GL.bufferData(34962,(function($this) {
		var $r;
		var this1;
		if(data != null) this1 = new Float32Array(data); else this1 = null;
		$r = this1;
		return $r;
	}(this)),35044);
	lime_graphics_opengl_GL.context.bindBuffer(34962,null);
	fluidity2_backends_LimeGraphicsObject.initialized = true;
};
fluidity2_backends_LimeGraphicsObject.prototype = {
	renderList: function(objects) {
		lime_graphics_opengl_GL.context.activeTexture(33984);
		lime_graphics_opengl_GL.context.bindTexture(3553,this.texture);
		lime_graphics_opengl_GL.context.enable(3553);
		lime_graphics_opengl_GL.context.bindBuffer(34962,fluidity2_backends_LimeGraphicsObject.quadBuffer);
		lime_graphics_opengl_GL.context.vertexAttribPointer(fluidity2_backends_LimeGraphicsObject.vertexAttribute,3,5126,false,20,0);
		lime_graphics_opengl_GL.context.vertexAttribPointer(fluidity2_backends_LimeGraphicsObject.textureAttribute,2,5126,false,20,12);
		var _g = 0;
		while(_g < objects.length) {
			var obj = objects[_g];
			++_g;
			this.render(obj);
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
	}
	,render: function(obj) {
		var offsetX = 0;
		var drawWidth = 1;
		{
			var _g = this.graphic;
			switch(_g[1]) {
			case 1:
				var loop = _g[7];
				var frameLength = _g[6];
				var frames = _g[5];
				if(Math.floor(obj.currentAnimationTime / frameLength) == frames.length) {
				}
				if(loop && Math.floor(obj.currentAnimationTime / frameLength) >= frames.length) obj.currentAnimationTime = 0;
				var frame = Math.floor(Math.min(frames.length,Math.floor(obj.currentAnimationTime / frameLength)));
				offsetX = frames[frame] / this.imageFrames;
				drawWidth = this.width / this.imageWidth;
				break;
			default:
				lime_graphics_opengl_GL.context.uniform2f(fluidity2_backends_LimeGraphicsObject.texOffsetUniformLocation,0,0);
				lime_graphics_opengl_GL.context.uniform2f(fluidity2_backends_LimeGraphicsObject.texSizeUniformLocation,1,1);
			}
		}
		lime_graphics_opengl_GL.context.uniform2f(fluidity2_backends_LimeGraphicsObject.texOffsetUniformLocation,offsetX,0);
		lime_graphics_opengl_GL.context.uniform2f(fluidity2_backends_LimeGraphicsObject.texSizeUniformLocation,drawWidth,1);
		this.customRenderPreFunc(obj);
		var mvMatrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
		lime_math__$Matrix4_Matrix4_$Impl_$.appendScale(mvMatrix,this.width * obj.scale,this.height * obj.scale,1);
		lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation(mvMatrix,obj.angle,new lime_math_Vector4(0,0,1));
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(mvMatrix,obj.position.get_x(),obj.position.get_y(),0);
		lime_graphics_opengl_GL.context.uniformMatrix4fv(fluidity2_backends_LimeGraphicsObject.mvMatrixUniformLocation,false,mvMatrix);
		lime_graphics_opengl_GL.context.drawArrays(5,0,4);
		this.customRenderPostFunc(obj);
	}
	,__class__: fluidity2_backends_LimeGraphicsObject
};
var fluidity2_backends_SimplePhysicsBackend = function() {
	this.clear();
};
$hxClasses["fluidity2.backends.SimplePhysicsBackend"] = fluidity2_backends_SimplePhysicsBackend;
fluidity2_backends_SimplePhysicsBackend.__name__ = true;
fluidity2_backends_SimplePhysicsBackend.__interfaces__ = [fluidity2_IPhysicsBackend];
fluidity2_backends_SimplePhysicsBackend.prototype = {
	clear: function() {
		this.scenes = new haxe_ds_ObjectMap();
		this.objects = new haxe_ds_ObjectMap();
		this.simplePhysicsTypes = new haxe_ds_ObjectMap();
	}
	,newScene: function(scene) {
		var value = new fluidity2_backends_SimplePhysicsScene();
		this.scenes.set(scene,value);
	}
	,sceneAdd: function(scene,obj) {
		this.scenes.h[scene.__id__].add(this.objects.h[obj.__id__]);
	}
	,sceneRemove: function(scene,obj) {
		this.scenes.h[scene.__id__].remove(this.objects.h[obj.__id__]);
	}
	,sceneUpdate: function(scene) {
		this.scenes.h[scene.__id__].update();
	}
	,sceneStart: function(scene) {
	}
	,sceneStop: function(scene) {
	}
	,typeAddInteractionStartEvent: function(type,eventName,otherType) {
		var this1 = this.getSimplePhysicsType(type).sensorTypes;
		var key = this.getSimplePhysicsType(otherType);
		this1.set(key,eventName);
	}
	,typeAddInteractionStopEvent: function(type,eventName,otherType) {
	}
	,newObject: function(obj) {
		this.objects.set(obj,{ gameObject : obj, collider : fluidity2_Collider.None, type : null});
	}
	,objectSet: function(obj,collider) {
		this.objects.h[obj.__id__].collider = collider;
	}
	,objectAddType: function(obj,type) {
		var spType = this.getSimplePhysicsType(type);
		this.objects.h[obj.__id__].type = spType;
		spType.objects.push(this.objects.h[obj.__id__]);
	}
	,objectChanged: function(obj) {
	}
	,objectUpdate: function(obj) {
		obj.position.addeq(obj.velocity);
	}
	,getSimplePhysicsType: function(type) {
		if(!(this.simplePhysicsTypes.h.__keys__[type.__id__] != null)) {
			var value = { objects : [], sensorTypes : new haxe_ds_ObjectMap(), collisionTypes : []};
			this.simplePhysicsTypes.set(type,value);
		}
		return this.simplePhysicsTypes.h[type.__id__];
	}
	,__class__: fluidity2_backends_SimplePhysicsBackend
};
var fluidity2_backends_SimplePhysicsScene = function() {
	this.objectsToRemove = [];
	this.objects = [];
};
$hxClasses["fluidity2.backends.SimplePhysicsScene"] = fluidity2_backends_SimplePhysicsScene;
fluidity2_backends_SimplePhysicsScene.__name__ = true;
fluidity2_backends_SimplePhysicsScene.prototype = {
	add: function(obj) {
		this.objects.push(obj);
	}
	,remove: function(obj) {
		this.objectsToRemove.push(obj);
	}
	,removeObjects: function() {
		var _g = 0;
		var _g1 = this.objectsToRemove;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			HxOverrides.remove(this.objects,obj);
		}
		this.objectsToRemove = [];
	}
	,update: function() {
		this.removeObjects();
		var len = this.objects.length;
		var _g1 = 0;
		var _g = len - 1;
		while(_g1 < _g) {
			var i = _g1++;
			var obj1 = this.objects[i];
			var _g2 = i + 1;
			while(_g2 < len) {
				var j = _g2++;
				var obj2 = this.objects[j];
				if(this.checkInteracts(obj1,obj2)) {
					var msv = this.minimumSeparationVector(obj1,obj2);
					this.handleInteracts(obj1,obj2,msv);
				}
			}
		}
		this.removeObjects();
	}
	,handleInteracts: function(obj1,obj2,msv) {
		if((function($this) {
			var $r;
			if(msv != null && msv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if(msv != null && msv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				msv.zpp_inner.validate();
				$r = msv.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(msv != null && msv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				msv.zpp_inner.validate();
				$r = msv.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if(msv != null && msv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				msv.zpp_inner.validate();
				$r = msv.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(msv != null && msv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				msv.zpp_inner.validate();
				$r = msv.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) > 0) {
			this.handleInteractionCollision(obj1,obj2);
			this.handleInteractionCollision(obj2,obj1);
			var collides1 = this.hasCollisions(obj1,obj2);
			var collides2 = this.hasCollisions(obj2,obj1);
			if(collides1 && collides2) {
				var hmsv;
				if(msv != null && msv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				hmsv = nape_geom_Vec2.get((function($this) {
					var $r;
					if(msv != null && msv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					msv.zpp_inner.validate();
					$r = msv.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(msv != null && msv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					msv.zpp_inner.validate();
					$r = msv.zpp_inner.y;
					return $r;
				}(this)),false);
				var _g = hmsv;
				_g.set_length((function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					$r = Math.sqrt((function($this) {
						var $r;
						if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						_g.zpp_inner.validate();
						$r = _g.zpp_inner.x;
						return $r;
					}($this)) * (function($this) {
						var $r;
						if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						_g.zpp_inner.validate();
						$r = _g.zpp_inner.x;
						return $r;
					}($this)) + (function($this) {
						var $r;
						if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						_g.zpp_inner.validate();
						$r = _g.zpp_inner.y;
						return $r;
					}($this)) * (function($this) {
						var $r;
						if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						_g.zpp_inner.validate();
						$r = _g.zpp_inner.y;
						return $r;
					}($this)));
					return $r;
				}(this)) / 2);
				obj1.gameObject.translate(hmsv);
				obj2.gameObject.translate(new nape_geom_Vec2(-(function($this) {
					var $r;
					if(hmsv != null && hmsv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					hmsv.zpp_inner.validate();
					$r = hmsv.zpp_inner.x;
					return $r;
				}(this)),-(function($this) {
					var $r;
					if(hmsv != null && hmsv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					hmsv.zpp_inner.validate();
					$r = hmsv.zpp_inner.y;
					return $r;
				}(this))));
			}
		}
	}
	,handleInteractionCollision: function(obj1,obj2) {
		var interaction = obj1.type.sensorTypes.h[obj2.type.__id__];
		if(interaction != null) obj1.gameObject.processEvent(new fluidity2_GameEvent(interaction,new fluidity2_Collision(obj1.gameObject,obj2.gameObject)));
	}
	,checkInteracts: function(obj1,obj2) {
		return obj1.type.sensorTypes.h.__keys__[obj2.type.__id__] != null || this.hasCollisions(obj1,obj2);
	}
	,hasCollisions: function(obj1,obj2) {
		return HxOverrides.indexOf(obj1.type.collisionTypes,obj2.type,0) >= 0;
	}
	,minimumSeparationVector: function(obj1,obj2) {
		{
			var _g = obj1.collider;
			switch(_g[1]) {
			case 1:
				var r1 = _g[4];
				var y1 = _g[3];
				var x1 = _g[2];
				var p1 = new nape_geom_Vec2(obj1.gameObject.position.get_x() + x1,obj1.gameObject.position.get_y() + y1);
				r1 = r1 * obj1.gameObject.scale;
				{
					var _g1 = obj2.collider;
					switch(_g1[1]) {
					case 1:
						var r2 = _g1[4];
						var y2 = _g1[3];
						var x2 = _g1[2];
						var p2 = new nape_geom_Vec2(obj2.gameObject.position.get_x() + x2,obj2.gameObject.position.get_y() + y2);
						r2 = r2 * obj2.gameObject.scale;
						var difference = p1.sub(p2);
						if((function($this) {
							var $r;
							if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							$r = Math.sqrt((function($this) {
								var $r;
								if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
								difference.zpp_inner.validate();
								$r = difference.zpp_inner.x;
								return $r;
							}($this)) * (function($this) {
								var $r;
								if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
								difference.zpp_inner.validate();
								$r = difference.zpp_inner.x;
								return $r;
							}($this)) + (function($this) {
								var $r;
								if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
								difference.zpp_inner.validate();
								$r = difference.zpp_inner.y;
								return $r;
							}($this)) * (function($this) {
								var $r;
								if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
								difference.zpp_inner.validate();
								$r = difference.zpp_inner.y;
								return $r;
							}($this)));
							return $r;
						}(this)) == 0) return nape_geom_Vec2.fromPolar(Math.min(r1,r2),Math.random() * Math.PI * 2);
						if((function($this) {
							var $r;
							if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							$r = Math.sqrt((function($this) {
								var $r;
								if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
								difference.zpp_inner.validate();
								$r = difference.zpp_inner.x;
								return $r;
							}($this)) * (function($this) {
								var $r;
								if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
								difference.zpp_inner.validate();
								$r = difference.zpp_inner.x;
								return $r;
							}($this)) + (function($this) {
								var $r;
								if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
								difference.zpp_inner.validate();
								$r = difference.zpp_inner.y;
								return $r;
							}($this)) * (function($this) {
								var $r;
								if(difference != null && difference.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
								difference.zpp_inner.validate();
								$r = difference.zpp_inner.y;
								return $r;
							}($this)));
							return $r;
						}(this)) < r1 + r2) {
							var _g2 = difference;
							_g2.set_length((function($this) {
								var $r;
								if(_g2 != null && _g2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
								$r = Math.sqrt((function($this) {
									var $r;
									if(_g2 != null && _g2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
									_g2.zpp_inner.validate();
									$r = _g2.zpp_inner.x;
									return $r;
								}($this)) * (function($this) {
									var $r;
									if(_g2 != null && _g2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
									_g2.zpp_inner.validate();
									$r = _g2.zpp_inner.x;
									return $r;
								}($this)) + (function($this) {
									var $r;
									if(_g2 != null && _g2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
									_g2.zpp_inner.validate();
									$r = _g2.zpp_inner.y;
									return $r;
								}($this)) * (function($this) {
									var $r;
									if(_g2 != null && _g2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
									_g2.zpp_inner.validate();
									$r = _g2.zpp_inner.y;
									return $r;
								}($this)));
								return $r;
							}(this)) - (r1 + r2));
							return difference;
						}
						return new nape_geom_Vec2(0,0);
					case 2:
						var h = _g1[5];
						var w = _g1[4];
						var y21 = _g1[3];
						var x21 = _g1[2];
						w = w * obj2.gameObject.scale;
						h = h * obj2.gameObject.scale;
						var p21 = new nape_geom_Vec2(obj2.gameObject.position.get_x() + x21,obj2.gameObject.position.get_y() + y21);
						var result = this.rectangleCircleCollision(p21,w,h,p1,r1);
						result.set(new nape_geom_Vec2(-(function($this) {
							var $r;
							if(result != null && result.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							result.zpp_inner.validate();
							$r = result.zpp_inner.x;
							return $r;
						}(this)),-(function($this) {
							var $r;
							if(result != null && result.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							result.zpp_inner.validate();
							$r = result.zpp_inner.y;
							return $r;
						}(this))));
						return result;
					default:
						return new nape_geom_Vec2(0,0);
					}
				}
				break;
			case 2:
				var h1 = _g[5];
				var w1 = _g[4];
				var y11 = _g[3];
				var x11 = _g[2];
				w1 = w1 * obj1.gameObject.scale;
				h1 = h1 * obj1.gameObject.scale;
				{
					var _g11 = obj2.collider;
					switch(_g11[1]) {
					case 1:
						var r = _g11[4];
						var y22 = _g11[3];
						var x22 = _g11[2];
						r = r * obj2.gameObject.scale;
						var p11 = new nape_geom_Vec2(obj1.gameObject.position.get_x() + x11,obj1.gameObject.position.get_y() + y11);
						var p22 = new nape_geom_Vec2(obj2.gameObject.position.get_x() + x22,obj2.gameObject.position.get_y() + y22);
						return this.rectangleCircleCollision(p11,w1,h1,p22,r);
					case 2:
						var h2 = _g11[5];
						var w2 = _g11[4];
						var y23 = _g11[3];
						var x23 = _g11[2];
						w2 = w2 * obj2.gameObject.scale;
						h2 = h2 * obj2.gameObject.scale;
						var msv = new nape_geom_Vec2(w1 + w2,0);
						var l1 = obj1.gameObject.position.get_x() + x11 - w1 / 2;
						var l2 = obj2.gameObject.position.get_x() + x23 - w2 / 2;
						var r11 = obj1.gameObject.position.get_x() + x11 + w1 / 2;
						var r21 = obj2.gameObject.position.get_x() + x23 + w2 / 2;
						var b1 = obj1.gameObject.position.get_y() + y11 - h1 / 2;
						var b2 = obj2.gameObject.position.get_y() + y23 - h2 / 2;
						var t1 = obj1.gameObject.position.get_y() + y11 + h1 / 2;
						var t2 = obj2.gameObject.position.get_y() + y23 + h2 / 2;
						if(l1 >= r21) return new nape_geom_Vec2(0,0); else msv = this.compareMSV(msv,new nape_geom_Vec2(r21 - l1,0));
						if(r11 <= l2) return new nape_geom_Vec2(0,0); else msv = this.compareMSV(msv,new nape_geom_Vec2(r11 - l2,0));
						if(t1 <= b2) return new nape_geom_Vec2(0,0); else msv = this.compareMSV(msv,new nape_geom_Vec2(0,t1 - b2));
						if(b1 >= t2) return new nape_geom_Vec2(0,0); else msv = this.compareMSV(msv,new nape_geom_Vec2(0,b1 - t2));
						return msv;
					default:
						return new nape_geom_Vec2(0,0);
					}
				}
				break;
			default:
				return new nape_geom_Vec2(0,0);
			}
		}
	}
	,compareMSV: function(v1,v2) {
		if((function($this) {
			var $r;
			if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				v1.zpp_inner.validate();
				$r = v1.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				v1.zpp_inner.validate();
				$r = v1.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				v1.zpp_inner.validate();
				$r = v1.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				v1.zpp_inner.validate();
				$r = v1.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) < (function($this) {
			var $r;
			if(v2 != null && v2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if(v2 != null && v2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				v2.zpp_inner.validate();
				$r = v2.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(v2 != null && v2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				v2.zpp_inner.validate();
				$r = v2.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if(v2 != null && v2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				v2.zpp_inner.validate();
				$r = v2.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(v2 != null && v2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				v2.zpp_inner.validate();
				$r = v2.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this))) return v1;
		return v2;
	}
	,rectangleCircleCollision: function(p1,w,h,p2,r) {
		var rp;
		if(p2 != null && p2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		rp = nape_geom_Vec2.get((function($this) {
			var $r;
			if(p2 != null && p2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p2.zpp_inner.validate();
			$r = p2.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(p2 != null && p2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p2.zpp_inner.validate();
			$r = p2.zpp_inner.y;
			return $r;
		}(this)),false);
		var l;
		l = (function($this) {
			var $r;
			if(p1 != null && p1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p1.zpp_inner.validate();
			$r = p1.zpp_inner.x;
			return $r;
		}(this)) - w / 2;
		var r1;
		r1 = (function($this) {
			var $r;
			if(p1 != null && p1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p1.zpp_inner.validate();
			$r = p1.zpp_inner.x;
			return $r;
		}(this)) + w / 2;
		var b;
		b = (function($this) {
			var $r;
			if(p1 != null && p1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p1.zpp_inner.validate();
			$r = p1.zpp_inner.y;
			return $r;
		}(this)) - h / 2;
		var t;
		t = (function($this) {
			var $r;
			if(p1 != null && p1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p1.zpp_inner.validate();
			$r = p1.zpp_inner.y;
			return $r;
		}(this)) + h / 2;
		if((function($this) {
			var $r;
			if(p2 != null && p2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p2.zpp_inner.validate();
			$r = p2.zpp_inner.x;
			return $r;
		}(this)) < l) {
			if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			rp.zpp_inner.immutable();
			if((function($this) {
				var $r;
				if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				rp.zpp_inner.validate();
				$r = rp.zpp_inner.x;
				return $r;
			}(this)) != l) {
				if(l != l) throw new js__$Boot_HaxeError("Error: Vec2::" + "x" + " cannot be NaN");
				rp.zpp_inner.x = l;
				rp.zpp_inner.invalidate();
			}
			if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			rp.zpp_inner.validate();
			rp.zpp_inner.x;
		} else if((function($this) {
			var $r;
			if(p2 != null && p2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p2.zpp_inner.validate();
			$r = p2.zpp_inner.x;
			return $r;
		}(this)) > r1) {
			if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			rp.zpp_inner.immutable();
			if((function($this) {
				var $r;
				if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				rp.zpp_inner.validate();
				$r = rp.zpp_inner.x;
				return $r;
			}(this)) != r1) {
				if(r1 != r1) throw new js__$Boot_HaxeError("Error: Vec2::" + "x" + " cannot be NaN");
				rp.zpp_inner.x = r1;
				rp.zpp_inner.invalidate();
			}
			if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			rp.zpp_inner.validate();
			rp.zpp_inner.x;
		}
		if((function($this) {
			var $r;
			if(p2 != null && p2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p2.zpp_inner.validate();
			$r = p2.zpp_inner.y;
			return $r;
		}(this)) < b) {
			if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			rp.zpp_inner.immutable();
			if((function($this) {
				var $r;
				if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				rp.zpp_inner.validate();
				$r = rp.zpp_inner.y;
				return $r;
			}(this)) != b) {
				if(b != b) throw new js__$Boot_HaxeError("Error: Vec2::" + "y" + " cannot be NaN");
				rp.zpp_inner.y = b;
				rp.zpp_inner.invalidate();
			}
			if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			rp.zpp_inner.validate();
			rp.zpp_inner.y;
		} else if((function($this) {
			var $r;
			if(p2 != null && p2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			p2.zpp_inner.validate();
			$r = p2.zpp_inner.y;
			return $r;
		}(this)) > t) {
			if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			rp.zpp_inner.immutable();
			if((function($this) {
				var $r;
				if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				rp.zpp_inner.validate();
				$r = rp.zpp_inner.y;
				return $r;
			}(this)) != t) {
				if(t != t) throw new js__$Boot_HaxeError("Error: Vec2::" + "y" + " cannot be NaN");
				rp.zpp_inner.y = t;
				rp.zpp_inner.invalidate();
			}
			if(rp != null && rp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			rp.zpp_inner.validate();
			rp.zpp_inner.y;
		}
		var sv = p2.sub(rp);
		if((function($this) {
			var $r;
			if(sv != null && sv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if(sv != null && sv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				sv.zpp_inner.validate();
				$r = sv.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(sv != null && sv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				sv.zpp_inner.validate();
				$r = sv.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if(sv != null && sv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				sv.zpp_inner.validate();
				$r = sv.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(sv != null && sv.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				sv.zpp_inner.validate();
				$r = sv.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) < r1) return sv;
		return new nape_geom_Vec2(0,0);
	}
	,__class__: fluidity2_backends_SimplePhysicsScene
};
var gtoolbox_Input = function() {
	this.negativeAxisKeys = [];
	this.positiveAxisKeys = [];
	this.axes = [];
	this.registeredFunctions = new haxe_ds_StringMap();
	this.axisState = new haxe_ds_StringMap();
	this.axisKeyStatePositive = new haxe_ds_ObjectMap();
	this.axisKeyStateNegative = new haxe_ds_ObjectMap();
	this.axisStatePositive = new haxe_ds_StringMap();
	this.axisStateNegative = new haxe_ds_StringMap();
	this.keyAxisMap = new haxe_ds_ObjectMap();
	this.keyNames = new haxe_ds_StringMap();
	this.nameKeys = new haxe_ds_ObjectMap();
	this.keyStates = new haxe_ds_ObjectMap();
};
$hxClasses["gtoolbox.Input"] = gtoolbox_Input;
gtoolbox_Input.__name__ = true;
gtoolbox_Input.prototype = {
	reset: function() {
		var $it0 = this.keyNames.iterator();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this.keyStates.set(key,false);
		}
		var _g = 0;
		var _g1 = this.axes;
		while(_g < _g1.length) {
			var axis = _g1[_g];
			++_g;
			this.axisState.set(axis,0);
			this.axisStateNegative.set(axis,false);
			this.axisStatePositive.set(axis,false);
		}
		var _g2 = 0;
		var _g11 = this.negativeAxisKeys;
		while(_g2 < _g11.length) {
			var key1 = _g11[_g2];
			++_g2;
			this.axisKeyStateNegative.set(key1,false);
		}
		var _g3 = 0;
		var _g12 = this.positiveAxisKeys;
		while(_g3 < _g12.length) {
			var key2 = _g12[_g3];
			++_g3;
			this.axisKeyStatePositive.set(key2,false);
		}
	}
	,registerFunction: function(event,inputName,func) {
		this.registeredFunctions.set(inputName + event,func);
		return this;
	}
	,registerInput: function(key,inputName) {
		this.keyStates.set(key,false);
		this.keyNames.set(inputName,key);
		this.nameKeys.set(key,inputName);
		return this;
	}
	,registerAxis: function(negative,positive,axisName) {
		this.registerInput(negative,axisName + "-");
		this.registerInput(positive,axisName + "+");
		this.keyAxisMap.set(negative,axisName);
		this.keyAxisMap.set(positive,axisName);
		this.axisKeyStateNegative.set(negative,false);
		this.axisKeyStatePositive.set(positive,false);
		this.axisStateNegative.set(axisName,false);
		this.axisStatePositive.set(axisName,false);
		this.axes.push(axisName);
		this.positiveAxisKeys.push(positive);
		this.negativeAxisKeys.push(negative);
		this.axisState.set(axisName,0);
		return this;
	}
	,get: function(inputName) {
		var key = this.keyNames.get(inputName);
		if(key != null) {
			var keyState = this.keyStates.h[key.__id__];
			if(keyState != null) return keyState;
			haxe_Log.trace("key " + key.output + " for input " + inputName + " is not registered",{ fileName : "Input.hx", lineNumber : 106, className : "gtoolbox.Input", methodName : "get"});
			return false;
		}
		haxe_Log.trace("input name " + inputName + " has no associated key",{ fileName : "Input.hx", lineNumber : 109, className : "gtoolbox.Input", methodName : "get"});
		return false;
	}
	,getAxis: function(axisName) {
		var axisState = this.axisState.get(axisName);
		if(axisState != null) return axisState;
		haxe_Log.trace("axis name " + axisName + " is not registered",{ fileName : "Input.hx", lineNumber : 121, className : "gtoolbox.Input", methodName : "getAxis"});
		return 0;
	}
	,runFunction: function(key,type) {
		var input = this.nameKeys.h[key.__id__];
		if(input != null) {
			var func = this.registeredFunctions.get(input + type);
			if(func != null) func();
		}
	}
	,onKeyDown: function(key) {
		var negativeState = this.axisKeyStateNegative.h[key.__id__];
		if(negativeState != null) {
			var axis = this.keyAxisMap.h[key.__id__];
			if(!negativeState) {
				this.axisKeyStateNegative.set(key,true);
				this.axisStateNegative.set(axis,true);
				this.axisState.set(axis,-1);
			}
		}
		var positiveState = this.axisKeyStatePositive.h[key.__id__];
		if(positiveState != null) {
			var axis1 = this.keyAxisMap.h[key.__id__];
			if(!positiveState) {
				this.axisKeyStatePositive.set(key,true);
				this.axisStatePositive.set(axis1,true);
				this.axisState.set(axis1,1);
			}
		}
		var keyState = this.keyStates.h[key.__id__];
		if(keyState != null) {
			if(!keyState) {
				this.keyStates.set(key,true);
				this.runFunction(key,gtoolbox_Input.ONKEYDOWN);
			}
		}
	}
	,onKeyUp: function(key) {
		var negativeState = this.axisKeyStateNegative.h[key.__id__];
		if(negativeState != null) {
			var axis = this.keyAxisMap.h[key.__id__];
			if(negativeState) {
				this.axisKeyStateNegative.set(key,false);
				this.axisStateNegative.set(axis,false);
				if(this.axisStatePositive.get(axis)) this.axisState.set(axis,1); else this.axisState.set(axis,0);
			}
		}
		var positiveState = this.axisKeyStatePositive.h[key.__id__];
		if(positiveState != null) {
			var axis1 = this.keyAxisMap.h[key.__id__];
			if(positiveState) {
				this.axisKeyStatePositive.set(key,false);
				this.axisStatePositive.set(axis1,false);
				if(this.axisStateNegative.get(axis1)) this.axisState.set(axis1,-1); else this.axisState.set(axis1,0);
			}
		}
		var keyState = this.keyStates.h[key.__id__];
		if(keyState != null) {
			if(keyState) {
				this.keyStates.set(key,false);
				this.runFunction(key,gtoolbox_Input.ONKEYUP);
			}
		}
	}
	,__class__: gtoolbox_Input
};
var gtoolbox_Key = function(code,$char,output,shiftOutput) {
	this.code = code;
	this["char"] = $char;
	this.output = output;
	this.shiftOutput = shiftOutput;
};
$hxClasses["gtoolbox.Key"] = gtoolbox_Key;
gtoolbox_Key.__name__ = true;
gtoolbox_Key.prototype = {
	__class__: gtoolbox_Key
};
var gtoolbox_KeyboardKeys = function() { };
$hxClasses["gtoolbox.KeyboardKeys"] = gtoolbox_KeyboardKeys;
gtoolbox_KeyboardKeys.__name__ = true;
gtoolbox_KeyboardKeys.getKeyFromCode = function(code) {
	var _g = 0;
	var _g1 = gtoolbox_KeyboardKeys.keys;
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		if(key.code == code) return key;
	}
	return null;
};
var gtoolbox_LimeInput = function() {
	gtoolbox_Input.call(this);
};
$hxClasses["gtoolbox.LimeInput"] = gtoolbox_LimeInput;
gtoolbox_LimeInput.__name__ = true;
gtoolbox_LimeInput.__super__ = gtoolbox_Input;
gtoolbox_LimeInput.prototype = $extend(gtoolbox_Input.prototype,{
	limeOnKeyDown: function(keyCode) {
		this.onKeyDown(this.getKeyFromCode(keyCode));
	}
	,limeOnKeyUp: function(keyCode) {
		this.onKeyUp(this.getKeyFromCode(keyCode));
	}
	,getKeyFromCode: function(keyCode) {
		switch(keyCode) {
		case 8:
			return gtoolbox_KeyboardKeys.BACKSPACE;
		case 9:
			return gtoolbox_KeyboardKeys.TAB;
		case 13:
			return gtoolbox_KeyboardKeys.ENTER;
		case 27:
			return gtoolbox_KeyboardKeys.ESCAPE;
		case 32:
			return gtoolbox_KeyboardKeys.SPACE;
		case 33:
			return gtoolbox_KeyboardKeys.NUMBER_0;
		case 34:
			return gtoolbox_KeyboardKeys.QUOTE;
		case 35:
			return gtoolbox_KeyboardKeys.NUMBER_3;
		case 36:
			return gtoolbox_KeyboardKeys.NUMBER_4;
		case 37:
			return gtoolbox_KeyboardKeys.NUMBER_5;
		case 38:
			return gtoolbox_KeyboardKeys.NUMBER_7;
		case 39:
			return gtoolbox_KeyboardKeys.QUOTE;
		case 40:
			return gtoolbox_KeyboardKeys.NUMBER_9;
		case 41:
			return gtoolbox_KeyboardKeys.NUMBER_0;
		case 42:
			return gtoolbox_KeyboardKeys.NUMBER_8;
		case 43:
			return gtoolbox_KeyboardKeys.EQUAL;
		case 44:
			return gtoolbox_KeyboardKeys.COMMA;
		case 45:
			return gtoolbox_KeyboardKeys.MINUS;
		case 46:
			return gtoolbox_KeyboardKeys.PERIOD;
		case 47:
			return gtoolbox_KeyboardKeys.SLASH;
		case 48:
			return gtoolbox_KeyboardKeys.NUMBER_0;
		case 49:
			return gtoolbox_KeyboardKeys.NUMBER_1;
		case 50:
			return gtoolbox_KeyboardKeys.NUMBER_2;
		case 51:
			return gtoolbox_KeyboardKeys.NUMBER_3;
		case 52:
			return gtoolbox_KeyboardKeys.NUMBER_4;
		case 53:
			return gtoolbox_KeyboardKeys.NUMBER_5;
		case 54:
			return gtoolbox_KeyboardKeys.NUMBER_6;
		case 55:
			return gtoolbox_KeyboardKeys.NUMBER_7;
		case 56:
			return gtoolbox_KeyboardKeys.NUMBER_8;
		case 57:
			return gtoolbox_KeyboardKeys.NUMBER_9;
		case 58:
			return gtoolbox_KeyboardKeys.SEMICOLON;
		case 59:
			return gtoolbox_KeyboardKeys.SEMICOLON;
		case 60:
			return gtoolbox_KeyboardKeys.COMMA;
		case 61:
			return gtoolbox_KeyboardKeys.EQUAL;
		case 62:
			return gtoolbox_KeyboardKeys.PERIOD;
		case 63:
			return gtoolbox_KeyboardKeys.SLASH;
		case 64:
			return gtoolbox_KeyboardKeys.NUMBER_2;
		case 91:
			return gtoolbox_KeyboardKeys.LEFTBRACKET;
		case 92:
			return gtoolbox_KeyboardKeys.BACKSLASH;
		case 93:
			return gtoolbox_KeyboardKeys.RIGHTBRACKET;
		case 94:
			return gtoolbox_KeyboardKeys.BACKSLASH;
		case 95:
			return gtoolbox_KeyboardKeys.MINUS;
		case 96:
			return gtoolbox_KeyboardKeys.BACKQUOTE;
		case 97:
			return gtoolbox_KeyboardKeys.A;
		case 98:
			return gtoolbox_KeyboardKeys.B;
		case 99:
			return gtoolbox_KeyboardKeys.C;
		case 100:
			return gtoolbox_KeyboardKeys.D;
		case 101:
			return gtoolbox_KeyboardKeys.E;
		case 102:
			return gtoolbox_KeyboardKeys.F;
		case 103:
			return gtoolbox_KeyboardKeys.G;
		case 104:
			return gtoolbox_KeyboardKeys.H;
		case 105:
			return gtoolbox_KeyboardKeys.I;
		case 106:
			return gtoolbox_KeyboardKeys.J;
		case 107:
			return gtoolbox_KeyboardKeys.K;
		case 108:
			return gtoolbox_KeyboardKeys.L;
		case 109:
			return gtoolbox_KeyboardKeys.M;
		case 110:
			return gtoolbox_KeyboardKeys.N;
		case 111:
			return gtoolbox_KeyboardKeys.O;
		case 112:
			return gtoolbox_KeyboardKeys.P;
		case 113:
			return gtoolbox_KeyboardKeys.Q;
		case 114:
			return gtoolbox_KeyboardKeys.R;
		case 115:
			return gtoolbox_KeyboardKeys.S;
		case 116:
			return gtoolbox_KeyboardKeys.T;
		case 117:
			return gtoolbox_KeyboardKeys.U;
		case 118:
			return gtoolbox_KeyboardKeys.V;
		case 119:
			return gtoolbox_KeyboardKeys.W;
		case 120:
			return gtoolbox_KeyboardKeys.X;
		case 121:
			return gtoolbox_KeyboardKeys.Y;
		case 122:
			return gtoolbox_KeyboardKeys.Z;
		case 127:
			return gtoolbox_KeyboardKeys.DELETE;
		case 1073741881:
			return gtoolbox_KeyboardKeys.CAPS_LOCK;
		case 1073741882:
			return gtoolbox_KeyboardKeys.F1;
		case 1073741883:
			return gtoolbox_KeyboardKeys.F2;
		case 1073741884:
			return gtoolbox_KeyboardKeys.F3;
		case 1073741885:
			return gtoolbox_KeyboardKeys.F4;
		case 1073741886:
			return gtoolbox_KeyboardKeys.F5;
		case 1073741887:
			return gtoolbox_KeyboardKeys.F6;
		case 1073741888:
			return gtoolbox_KeyboardKeys.F7;
		case 1073741889:
			return gtoolbox_KeyboardKeys.F8;
		case 1073741890:
			return gtoolbox_KeyboardKeys.F9;
		case 1073741891:
			return gtoolbox_KeyboardKeys.F10;
		case 1073741892:
			return gtoolbox_KeyboardKeys.F11;
		case 1073741893:
			return gtoolbox_KeyboardKeys.F12;
		case 1073741897:
			return gtoolbox_KeyboardKeys.INSERT;
		case 1073741898:
			return gtoolbox_KeyboardKeys.HOME;
		case 1073741899:
			return gtoolbox_KeyboardKeys.PAGE_UP;
		case 1073741901:
			return gtoolbox_KeyboardKeys.END;
		case 1073741902:
			return gtoolbox_KeyboardKeys.PAGE_DOWN;
		case 1073741903:
			return gtoolbox_KeyboardKeys.RIGHT;
		case 1073741904:
			return gtoolbox_KeyboardKeys.LEFT;
		case 1073741905:
			return gtoolbox_KeyboardKeys.DOWN;
		case 1073741906:
			return gtoolbox_KeyboardKeys.UP;
		case 1073741907:
			return gtoolbox_KeyboardKeys.NUMLOCK;
		case 1073741908:
			return gtoolbox_KeyboardKeys.NUMPAD_DIVIDE;
		case 1073741909:
			return gtoolbox_KeyboardKeys.NUMPAD_MULTIPLY;
		case 1073741910:
			return gtoolbox_KeyboardKeys.NUMPAD_SUBTRACT;
		case 1073741911:
			return gtoolbox_KeyboardKeys.NUMPAD_ADD;
		case 1073741912:
			return gtoolbox_KeyboardKeys.NUMPAD_ENTER;
		case 1073741913:
			return gtoolbox_KeyboardKeys.NUMPAD_1;
		case 1073741914:
			return gtoolbox_KeyboardKeys.NUMPAD_2;
		case 1073741915:
			return gtoolbox_KeyboardKeys.NUMPAD_3;
		case 1073741916:
			return gtoolbox_KeyboardKeys.NUMPAD_4;
		case 1073741917:
			return gtoolbox_KeyboardKeys.NUMPAD_5;
		case 1073741918:
			return gtoolbox_KeyboardKeys.NUMPAD_6;
		case 1073741919:
			return gtoolbox_KeyboardKeys.NUMPAD_7;
		case 1073741920:
			return gtoolbox_KeyboardKeys.NUMPAD_8;
		case 1073741921:
			return gtoolbox_KeyboardKeys.NUMPAD_9;
		case 1073741922:
			return gtoolbox_KeyboardKeys.NUMPAD_0;
		case 1073741923:
			return gtoolbox_KeyboardKeys.NUMPAD_DECIMAL;
		case 1073742048:
			return gtoolbox_KeyboardKeys.CONTROL;
		case 1073742049:
			return gtoolbox_KeyboardKeys.SHIFT;
		case 1073742050:
			return gtoolbox_KeyboardKeys.ALTERNATE;
		case 1073742052:
			return gtoolbox_KeyboardKeys.CONTROL;
		case 1073742053:
			return gtoolbox_KeyboardKeys.SHIFT;
		case 1073742054:
			return gtoolbox_KeyboardKeys.ALTERNATE;
		default:
			return gtoolbox_KeyboardKeys.F15;
		}
	}
	,__class__: gtoolbox_LimeInput
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return true; else if(c < 0) node = node.left; else node = node.right;
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe_ds_TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r)); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Object.prototype.hasOwnProperty.call(val,"name")) this.name = Reflect.field(val,"name"); else this.name = "Error";
	if(Object.prototype.hasOwnProperty.call(val,"message")) this.message = Reflect.field(val,"message"); else this.message = Std.string(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) return ctx;
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = true;
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = true;
lime_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = true;
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 115, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 121, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 127, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime_Assets.getBytes = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe_Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 164, className : "lime.Assets", methodName : "getBytes"});
		} else haxe_Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 170, className : "lime.Assets", methodName : "getBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 176, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 227, className : "lime.Assets", methodName : "getFont"});
		} else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "lime.Assets", methodName : "getFont"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 239, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 297, className : "lime.Assets", methodName : "getImage"});
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 303, className : "lime.Assets", methodName : "getImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 309, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 426, className : "lime.Assets", methodName : "getPath"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 432, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 469, className : "lime.Assets", methodName : "getText"});
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 475, className : "lime.Assets", methodName : "getText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 481, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime_Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime_Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime_Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
	return true;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var $it0 = lime_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) {
			handler(audio);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(useCache && lime_Assets.cache.enabled) library.loadAudioBuffer(symbolName,function(audio1) {
				var value = audio1;
				lime_Assets.cache.audio.set(id,value);
				handler(audio1);
			}); else library.loadAudioBuffer(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 666, className : "lime.Assets", methodName : "loadAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 672, className : "lime.Assets", methodName : "loadAudioBuffer"});
	handler(null);
};
lime_Assets.loadBytes = function(id,handler) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 702, className : "lime.Assets", methodName : "loadBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 708, className : "lime.Assets", methodName : "loadBytes"});
	handler(null);
};
lime_Assets.loadImage = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) {
			handler(image);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(useCache && lime_Assets.cache.enabled) library.loadImage(symbolName,function(image1) {
				lime_Assets.cache.image.set(id,image1);
				handler(image1);
			}); else library.loadImage(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 765, className : "lime.Assets", methodName : "loadImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 771, className : "lime.Assets", methodName : "loadImage"});
	handler(null);
};
lime_Assets.loadLibrary = function(name,handler) {
	lime_Assets.initialize();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime_Assets.libraries.set(name,library);
		library.eventCallback = lime_Assets.library_onEvent;
		library.load(handler);
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + name + "\"",{ fileName : "Assets.hx", lineNumber : 800, className : "lime.Assets", methodName : "loadLibrary"});
};
lime_Assets.loadText = function(id,handler) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			library.loadText(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 891, className : "lime.Assets", methodName : "loadText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 897, className : "lime.Assets", methodName : "loadText"});
	handler(null);
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) lime_Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = lime_Assets.library_onEvent;
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.unload();
		library.eventCallback = null;
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onEvent = function(library,type) {
	if(type == "change") lime_Assets.cache.clear();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = true;
lime__$backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		}
		return keyCode;
	}
	,create: function(config) {
		this.parent.config = config;
		if(config != null) {
			this.setFrameRate(config.fps);
			var $window = new lime_ui_Window(config);
			var renderer = new lime_graphics_Renderer($window);
			this.parent.addWindow($window);
			this.parent.addRenderer(renderer);
			this.parent.init(renderer.context);
		}
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleUpdateEvent();
		return 0;
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleKeyEvent: function(event) {
		if(this.parent.window != null) {
			var _g = event.keyCode;
			switch(_g) {
			case 32:case 37:case 38:case 39:case 40:
				event.preventDefault();
				break;
			}
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				var listeners = this.parent.window.onKeyDown.listeners;
				var repeat = this.parent.window.onKeyDown.repeat;
				var i = 0;
				while(i < listeners.length) {
					listeners[i](keyCode,modifier);
					if(!repeat[i]) this.parent.window.onKeyDown.remove(listeners[i]); else i++;
				}
			} else {
				var listeners1 = this.parent.window.onKeyUp.listeners;
				var repeat1 = this.parent.window.onKeyUp.repeat;
				var i1 = 0;
				while(i1 < listeners1.length) {
					listeners1[i1](keyCode,modifier);
					if(!repeat1[i1]) this.parent.window.onKeyUp.remove(listeners1[i1]); else i1++;
				}
			}
		}
	}
	,handleUpdateEvent: function(__) {
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var listeners = this.parent.onUpdate.listeners;
			var repeat = this.parent.onUpdate.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](this.deltaTime | 0);
				if(!repeat[i]) this.parent.onUpdate.remove(listeners[i]); else i++;
			}
			if(this.parent.renderer != null) {
				var listeners1 = this.parent.renderer.onRender.listeners;
				var repeat1 = this.parent.renderer.onRender.repeat;
				var i1 = 0;
				while(i1 < listeners1.length) {
					listeners1[i1](this.parent.renderer.context);
					if(!repeat1[i1]) this.parent.renderer.onRender.remove(listeners1[i1]); else i1++;
				}
				this.parent.renderer.flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleUpdateEvent));
	}
	,handleWindowEvent: function(event) {
		if(this.parent.window != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				var listeners = this.parent.window.onWindowFocusIn.listeners;
				var repeat = this.parent.window.onWindowFocusIn.repeat;
				var i = 0;
				while(i < listeners.length) {
					listeners[i]();
					if(!repeat[i]) this.parent.window.onWindowFocusIn.remove(listeners[i]); else i++;
				}
				var listeners1 = this.parent.window.onWindowActivate.listeners;
				var repeat1 = this.parent.window.onWindowActivate.repeat;
				var i1 = 0;
				while(i1 < listeners1.length) {
					listeners1[i1]();
					if(!repeat1[i1]) this.parent.window.onWindowActivate.remove(listeners1[i1]); else i1++;
				}
				break;
			case "blur":
				var listeners2 = this.parent.window.onWindowFocusOut.listeners;
				var repeat2 = this.parent.window.onWindowFocusOut.repeat;
				var i2 = 0;
				while(i2 < listeners2.length) {
					listeners2[i2]();
					if(!repeat2[i2]) this.parent.window.onWindowFocusOut.remove(listeners2[i2]); else i2++;
				}
				var listeners3 = this.parent.window.onWindowDeactivate.listeners;
				var repeat3 = this.parent.window.onWindowDeactivate.repeat;
				var i3 = 0;
				while(i3 < listeners3.length) {
					listeners3[i3]();
					if(!repeat3[i3]) this.parent.window.onWindowDeactivate.remove(listeners3[i3]); else i3++;
				}
				break;
			case "resize":
				var cacheWidth = this.parent.window.__width;
				var cacheHeight = this.parent.window.__height;
				this.parent.window.backend.handleResize();
				if(this.parent.window.__width != cacheWidth || this.parent.window.__height != cacheHeight) {
					var listeners4 = this.parent.window.onWindowResize.listeners;
					var repeat4 = this.parent.window.onWindowResize.repeat;
					var i4 = 0;
					while(i4 < listeners4.length) {
						listeners4[i4](this.parent.window.__width,this.parent.window.__height);
						if(!repeat4[i4]) this.parent.window.onWindowResize.remove(listeners4[i4]); else i4++;
					}
				}
				break;
			case "beforeunload":
				var listeners5 = this.parent.window.onWindowClose.listeners;
				var repeat5 = this.parent.window.onWindowClose.repeat;
				var i5 = 0;
				while(i5 < listeners5.length) {
					listeners5[i5]();
					if(!repeat5[i5]) this.parent.window.onWindowClose.remove(listeners5[i5]); else i5++;
				}
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = true;
lime__$backend_html5_HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div); else if(this.parent.window.backend.canvas != null) {
			var options = { alpha : true, antialias : Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing")?this.parent.window.config.antialiasing > 0:false, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer")?this.parent.window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer")?this.parent.window.config.stencilBuffer:true, preserveDrawingBuffer : false};
			var webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.parent.window.backend.canvas,options);
			if(webgl == null) this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d")); else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			var listeners = this.parent.onRenderContextLost.listeners;
			var repeat = this.parent.onRenderContextLost.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i]();
				if(!repeat[i]) this.parent.onRenderContextLost.remove(listeners[i]); else i++;
			}
			break;
		case "webglcontextrestored":
			this.createContext();
			var listeners1 = this.parent.onRenderContextRestored.listeners;
			var repeat1 = this.parent.onRenderContextRestored.repeat;
			var i1 = 0;
			while(i1 < listeners1.length) {
				listeners1[i1](this.parent.context);
				if(!repeat1[i1]) this.parent.onRenderContextRestored.remove(listeners1[i1]); else i1++;
			}
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = true;
lime__$backend_html5_HTML5Window.prototype = {
	close: function() {
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) haxe_Timer.delay(function() {
			lime__$backend_html5_HTML5Window.textInput.focus();
		},20);
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			var listeners = this.parent.onTextInput.listeners;
			var repeat = this.parent.onTextInput.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](lime__$backend_html5_HTML5Window.textInput.value);
				if(!repeat[i]) this.parent.onTextInput.remove(listeners[i]); else i++;
			}
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				var listeners = this.parent.onMouseDown.listeners;
				var repeat = this.parent.onMouseDown.repeat;
				var i = 0;
				while(i < listeners.length) {
					listeners[i](x,y,event.button);
					if(!repeat[i]) this.parent.onMouseDown.remove(listeners[i]); else i++;
				}
				break;
			case "mouseenter":
				var listeners1 = this.parent.onWindowEnter.listeners;
				var repeat1 = this.parent.onWindowEnter.repeat;
				var i1 = 0;
				while(i1 < listeners1.length) {
					listeners1[i1]();
					if(!repeat1[i1]) this.parent.onWindowEnter.remove(listeners1[i1]); else i1++;
				}
				break;
			case "mouseleave":
				var listeners2 = this.parent.onWindowLeave.listeners;
				var repeat2 = this.parent.onWindowLeave.repeat;
				var i2 = 0;
				while(i2 < listeners2.length) {
					listeners2[i2]();
					if(!repeat2[i2]) this.parent.onWindowLeave.remove(listeners2[i2]); else i2++;
				}
				break;
			case "mouseup":
				var listeners3 = this.parent.onMouseUp.listeners;
				var repeat3 = this.parent.onMouseUp.repeat;
				var i3 = 0;
				while(i3 < listeners3.length) {
					listeners3[i3](x,y,event.button);
					if(!repeat3[i3]) this.parent.onMouseUp.remove(listeners3[i3]); else i3++;
				}
				break;
			case "mousemove":
				var listeners4 = this.parent.onMouseMove.listeners;
				var repeat4 = this.parent.onMouseMove.repeat;
				var i4 = 0;
				while(i4 < listeners4.length) {
					listeners4[i4](x,y);
					if(!repeat4[i4]) this.parent.onMouseMove.remove(listeners4[i4]); else i4++;
				}
				break;
			default:
			}
		} else {
			var listeners5 = this.parent.onMouseWheel.listeners;
			var repeat5 = this.parent.onMouseWheel.repeat;
			var i5 = 0;
			while(i5 < listeners5.length) {
				listeners5[i5](event.deltaX,-event.deltaY);
				if(!repeat5[i5]) this.parent.onMouseWheel.remove(listeners5[i5]); else i5++;
			}
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var touch = event.changedTouches[0];
		var id = touch.identifier;
		var x = 0.0;
		var y = 0.0;
		if(this.element != null) {
			if(this.canvas != null) {
				var rect = this.canvas.getBoundingClientRect();
				x = (touch.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (touch.clientY - rect.top) * (this.parent.__height / rect.height);
			} else if(this.div != null) {
				var rect1 = this.div.getBoundingClientRect();
				x = touch.clientX - rect1.left;
				y = touch.clientY - rect1.top;
			} else {
				var rect2 = this.element.getBoundingClientRect();
				x = (touch.clientX - rect2.left) * (this.parent.__width / rect2.width);
				y = (touch.clientY - rect2.top) * (this.parent.__height / rect2.height);
			}
		} else {
			x = touch.clientX;
			y = touch.clientY;
		}
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			var listeners = this.parent.onTouchStart.listeners;
			var repeat = this.parent.onTouchStart.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](x / this.setWidth,y / this.setHeight,id);
				if(!repeat[i]) this.parent.onTouchStart.remove(listeners[i]); else i++;
			}
			var listeners1 = this.parent.onMouseDown.listeners;
			var repeat1 = this.parent.onMouseDown.repeat;
			var i1 = 0;
			while(i1 < listeners1.length) {
				listeners1[i1](x,y,0);
				if(!repeat1[i1]) this.parent.onMouseDown.remove(listeners1[i1]); else i1++;
			}
			break;
		case "touchmove":
			var listeners2 = this.parent.onTouchMove.listeners;
			var repeat2 = this.parent.onTouchMove.repeat;
			var i2 = 0;
			while(i2 < listeners2.length) {
				listeners2[i2](x / this.setWidth,y / this.setHeight,id);
				if(!repeat2[i2]) this.parent.onTouchMove.remove(listeners2[i2]); else i2++;
			}
			var listeners3 = this.parent.onMouseMove.listeners;
			var repeat3 = this.parent.onMouseMove.repeat;
			var i3 = 0;
			while(i3 < listeners3.length) {
				listeners3[i3](x,y);
				if(!repeat3[i3]) this.parent.onMouseMove.remove(listeners3[i3]); else i3++;
			}
			break;
		case "touchend":
			var listeners4 = this.parent.onTouchEnd.listeners;
			var repeat4 = this.parent.onTouchEnd.repeat;
			var i4 = 0;
			while(i4 < listeners4.length) {
				listeners4[i4](x / this.setWidth,y / this.setHeight,id);
				if(!repeat4[i4]) this.parent.onTouchEnd.remove(listeners4[i4]); else i4++;
			}
			var listeners5 = this.parent.onMouseUp.listeners;
			var repeat5 = this.parent.onMouseUp.repeat;
			var i5 = 0;
			while(i5 < listeners5.length) {
				listeners5[i5](x,y,0);
				if(!repeat5[i5]) this.parent.onMouseUp.remove(listeners5[i5]); else i5++;
			}
			break;
		default:
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_Event = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = true;
lime_app_Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		if(index > -1) {
			this.listeners.splice(index,1);
			this.priorities.splice(index,1);
			this.repeat.splice(index,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = true;
lime_app_Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				var image = new Image();
				lime_app_Preloader.images.set(url,image);
				image.onload = $bind(this,this.image_onLoad);
				image.src = url;
				this.total++;
				break;
			case "BINARY":
				var loader = new lime_net_URLLoader();
				loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
				lime_app_Preloader.loaders.set(url,loader);
				this.total++;
				break;
			case "TEXT":
				var loader1 = new lime_net_URLLoader();
				lime_app_Preloader.loaders.set(url,loader1);
				this.total++;
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime_net_URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.update(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.update(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		if(this.onComplete != null) this.onComplete();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = true;
lime_audio_ALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param) {
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = true;
lime_audio_ALCAudioContext.prototype = {
	closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = true;
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
};
lime_audio_AudioBuffer.prototype = {
	dispose: function() {
	}
	,__class__: lime_audio_AudioBuffer
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : true, __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = true;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app_Event();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.__loops = loops;
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = true;
lime_audio_AudioSource.prototype = {
	dispose: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.id != 0) al.deleteSource(this.id);
				break;
			default:
			}
		}
	}
	,init: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.buffer.id == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_loops: function() {
		return this.__loops;
	}
	,set_loops: function(loops) {
		return this.__loops = loops;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,__class__: lime_audio_AudioSource
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = true;
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = true;
lime_audio_HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = true;
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return 0;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return 0;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	var _g = lime_audio_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = true;
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	var _g = lime_audio_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = true;
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = true;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = true;
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1.0;
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) farPlane = 1.0;
		if(nearPlane == null) nearPlane = 0.0;
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = true;
lime_graphics_FlashRenderContext.prototype = {
	addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderer != null) {
			var _g = lime_app_Application.current.renderer.context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = true;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,bitmapData.width,bitmapData.height);
	buffer.__srcBitmapData = bitmapData;
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(haxe_io_Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this);
				this.buffer.data = null;
				this.buffer.__srcImageData = null;
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var byteArray = this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
			if(format != null) switch(format) {
			case 1:
				break;
			case 2:
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					{
						var argb = byteArray.readUnsignedInt();
						var bgra = 0;
						bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
						color = bgra;
					}
					byteArray.position -= 4;
					byteArray.writeUnsignedInt(color);
				}
				byteArray.position = 0;
				break;
			default:
				var color1;
				var length1 = byteArray.length / 4 | 0;
				var _g11 = 0;
				while(_g11 < length1) {
					var i1 = _g11++;
					{
						var argb1 = byteArray.readUnsignedInt();
						var rgba = 0;
						rgba = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
						color1 = rgba;
					}
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((function($this) {
						var $r;
						var bgra1 = 0;
						bgra1 = (color1 >> 8 & 255 & 255) << 24 | (color1 >> 16 & 255 & 255) << 16 | (color1 >> 24 & 255 & 255) << 8 | color1 & 255 & 255;
						$r = bgra1;
						return $r;
					}(this)));
				}
				byteArray.position = 0;
			} else {
				var color2;
				var length2 = byteArray.length / 4 | 0;
				var _g12 = 0;
				while(_g12 < length2) {
					var i2 = _g12++;
					{
						var argb2 = byteArray.readUnsignedInt();
						var rgba1 = 0;
						rgba1 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
						color2 = rgba1;
					}
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((function($this) {
						var $r;
						var bgra2 = 0;
						bgra2 = (color2 >> 8 & 255 & 255) << 24 | (color2 >> 16 & 255 & 255) << 16 | (color2 >> 24 & 255 & 255) << 8 | color2 & 255 & 255;
						$r = bgra2;
						return $r;
					}(this)));
				}
				byteArray.position = 0;
			}
			return byteArray;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,byteArray,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,byteArray,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format != null) switch(format) {
			case 1:
				break;
			case 2:
				var srcData = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = srcData.readUnsignedInt();
					byteArray.writeUnsignedInt(js_Boot.__cast(color , Int));
				}
				srcData.position = 0;
				byteArray.position = 0;
				break;
			default:
				var srcData1 = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color1;
				var length1 = byteArray.length / 4 | 0;
				var _g11 = 0;
				while(_g11 < length1) {
					var i1 = _g11++;
					color1 = srcData1.readUnsignedInt();
					byteArray.writeUnsignedInt(js_Boot.__cast(color1 , Int));
				}
				srcData1.position = 0;
				byteArray.position = 0;
			} else {
				var srcData2 = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color2;
				var length2 = byteArray.length / 4 | 0;
				var _g12 = 0;
				while(_g12 < length2) {
					var i2 = _g12++;
					color2 = srcData2.readUnsignedInt();
					byteArray.writeUnsignedInt(js_Boot.__cast(color2 , Int));
				}
				srcData2.position = 0;
				byteArray.position = 0;
			}
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read a PNG/JPG ByteArray, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = true;
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : true, __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event();
	this.onRenderContextRestored = new lime_app_Event();
	this.onRenderContextLost = new lime_app_Event();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.currentRenderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = true;
lime_graphics_Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = true;
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	recreate: function(surface) {
	}
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,destroy: function() {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,reference: function() {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontFace: function(face) {
	}
	,setFontSize: function(size) {
	}
	,getFontOptions: function() {
		return null;
	}
	,setFontOptions: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_referenceCount: function() {
		return 0;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
};
var lime_graphics_cairo_CairoFont = function(font) {
};
$hxClasses["lime.graphics.cairo.CairoFont"] = lime_graphics_cairo_CairoFont;
lime_graphics_cairo_CairoFont.__name__ = true;
lime_graphics_cairo_CairoFont.prototype = {
	destroy: function() {
	}
	,__class__: lime_graphics_cairo_CairoFont
};
var lime_graphics_cairo_CairoFontOptions = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.graphics.cairo.CairoFontOptions"] = lime_graphics_cairo_CairoFontOptions;
lime_graphics_cairo_CairoFontOptions.__name__ = true;
lime_graphics_cairo_CairoFontOptions.prototype = {
	get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_hintMetrics: function() {
		return 0;
	}
	,set_hintMetrics: function(value) {
		return value;
	}
	,get_hintStyle: function() {
		return 0;
	}
	,set_hintStyle: function(value) {
		return value;
	}
	,get_subpixelOrder: function() {
		return 0;
	}
	,set_subpixelOrder: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_CairoFontOptions
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = true;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy = function(this1) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = true;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.destroy = function(this1) {
};
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = true;
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : true, __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = true;
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = true;
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = true;
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = true;
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = new lime_utils_ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeShort(0);
		data.writeShort(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	data.writeInt(type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	data.writeShort(1);
	data.writeShort(type == lime_graphics_format_BMPType.RGB?24:32);
	data.writeInt(type == lime_graphics_format_BMPType.BITFIELD?3:0);
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.writeByte(0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
		break;
	case 2:
		var andMask = new lime_utils_ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			pixels.position = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.writeByte(0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : true, __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = true;
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = true;
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = true;
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = true;
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	}
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(destPoint.x >= image.width || destPoint.y >= image.height) return;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.webkitImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) return;
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas,x,y);
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,byteArray,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,byteArray,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = true;
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				value;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				var x = _g3++;
				switch(sourceFormat) {
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) sourcePixel = 0;
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					var x1 = _g31++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r1;
							var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
							var g1;
							var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
							var b1;
							var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
							sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r2;
							var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
							var g2;
							var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
							var b2;
							var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
							destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value;
						var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						var value1;
						var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value1;
						var value2;
						var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
						value2;
						var value3;
						var idx12 = Math.round(blendAlpha * 255.0);
						value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
						value3;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					var x2 = _g32++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r3;
							var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
							var g3;
							var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
							var b3;
							var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
							sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r4;
							var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
							var g4;
							var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
							var b4;
							var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
							destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							var r5;
							var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
							var g5;
							var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
							var b5;
							var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
							alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value4;
						var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
						destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value4;
						var value5;
						var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value5;
						var value6;
						var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
						value6;
						var value7;
						var idx25 = Math.round(blendAlpha * 255.0);
						value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
						value7;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) fillColor = 0;
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			var r;
			var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	if(fillColor == hitColor) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					var r1;
					var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				if(premultiplied) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) fillColor = 0;
					} else if((fillColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format1) {
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var r;
	var g;
	var b;
	var a;
	var mr;
	var mg;
	var mb;
	var ma;
	if(format == 1) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) ma = mask >> 24 & 255; else ma = 255;
		mr = mask >> 16 & 255;
		mg = mask >> 8 & 255;
		mb = mask & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
		mr = mask >> 24 & 255;
		mg = mask >> 16 & 255;
		mb = mask >> 8 & 255;
		if(image.get_transparent()) ma = mask & 255; else ma = 255;
	}
	color = r | g << 8 | b << 16 | a << 24;
	mask = mr | mg << 8 | mb << 16 | mask << 24;
	var pix;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var ix = _g1++;
		var hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var iy = _g3++;
			pix = image.getPixel32(ix,iy);
			if(findColor) hit = (pix & mask) == color; else hit = (pix & mask) != color;
			if(hit) {
				if(ix < left) left = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var _ix = _g11++;
		var ix1 = image.width - 1 - _ix;
		var hit1 = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var iy1 = _g31++;
			pix = image.getPixel32(ix1,iy1);
			if(findColor) hit1 = (pix & mask) == color; else hit1 = (pix & mask) != color;
			if(hit1) {
				if(ix1 > right) right = ix1;
				break;
			}
		}
		if(hit1) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var iy2 = _g12++;
		var hit2 = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var ix2 = _g32++;
			pix = image.getPixel32(ix2,iy2);
			if(findColor) hit2 = (pix & mask) == color; else hit2 = (pix & mask) != color;
			if(hit2) {
				if(iy2 < top) top = iy2;
				break;
			}
		}
		if(hit2) break;
	}
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var _iy = _g13++;
		var iy3 = image.height - 1 - _iy;
		var hit3 = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var ix3 = _g33++;
			pix = image.getPixel32(ix3,iy3);
			if(findColor) hit3 = (pix & mask) == color; else hit3 = (pix & mask) != color;
			if(hit3) {
				if(iy3 > bottom) bottom = iy3;
				break;
			}
		}
		if(hit3) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	0;
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var byteArray = new lime_utils_ByteArray(length * 4);
	byteArray.position = 0;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				{
					var argb1 = 0;
					argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					argb = argb1;
				}
				pixel = argb;
				break;
			case 2:
				{
					var bgra1 = 0;
					bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					bgra = bgra1;
				}
				pixel = bgra;
				break;
			default:
			}
			byteArray.__set(destPosition++,pixel >> 24 & 255);
			byteArray.__set(destPosition++,pixel >> 16 & 255);
			byteArray.__set(destPosition++,pixel >> 8 & 255);
			byteArray.__set(destPosition++,pixel & 255);
			position += 4;
		}
	}
	byteArray.position = 0;
	return byteArray;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					var r;
					var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value;
			var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value1;
			var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			value2;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
			value3;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData;
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
	newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
	255;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,byteArray,format) {
	if(image.buffer.data == null) return;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = byteArray.readUnsignedInt();
			switch(format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
				255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = true;
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = true;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[18];
	var offset = this1[19] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[12];
	var offset = this1[14] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[6];
	var offset = this1[9] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[0];
	var offset = this1[4] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = true;
lime_math_Matrix3.prototype = {
	clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = true;
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
		this1[i] = val;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime_math_Vector4(0,0,-1);
	if(up == null) up = new lime_math_Vector4(0,-1,0);
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime_math_Vector4(-dir.y,dir.x,0); else vup = new lime_math_Vector4(1,0,0);
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis;
	var this2;
	if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
	othis = this2;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = true;
lime_math_Rectangle.prototype = {
	clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = true;
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = true;
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = true;
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) argb = 0;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		var r;
		var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = true;
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) bgra = 0;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var b;
		var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var r;
		var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = true;
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) rgba = 0;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var r;
		var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net_URLLoader = function(request) {
	this.onSecurityError = new lime_app_Event();
	this.onProgress = new lime_app_Event();
	this.onOpen = new lime_app_Event();
	this.onIOError = new lime_app_Event();
	this.onHTTPStatus = new lime_app_Event();
	this.onComplete = new lime_app_Event();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime_net_URLLoader;
lime_net_URLLoader.__name__ = true;
lime_net_URLLoader.prototype = {
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) {
				var listeners = self.onHTTPStatus.listeners;
				var repeat = self.onHTTPStatus.repeat;
				var i = 0;
				while(i < listeners.length) {
					listeners[i](_g,s);
					if(!repeat[i]) self.onHTTPStatus.remove(listeners[i]); else i++;
				}
			}
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) {
				var listeners1 = self.onIOError.listeners;
				var repeat1 = self.onIOError.repeat;
				var i1 = 0;
				while(i1 < listeners1.length) {
					listeners1[i1](_g,"Failed to connect or resolve host");
					if(!repeat1[i1]) self.onIOError.remove(listeners1[i1]); else i1++;
				}
			} else if(s == 12029) {
				var listeners2 = self.onIOError.listeners;
				var repeat2 = self.onIOError.repeat;
				var i2 = 0;
				while(i2 < listeners2.length) {
					listeners2[i2](_g,"Failed to connect to host");
					if(!repeat2[i2]) self.onIOError.remove(listeners2[i2]); else i2++;
				}
			} else if(s == 12007) {
				var listeners3 = self.onIOError.listeners;
				var repeat3 = self.onIOError.repeat;
				var i3 = 0;
				while(i3 < listeners3.length) {
					listeners3[i3](_g,"Unknown host");
					if(!repeat3[i3]) self.onIOError.remove(listeners3[i3]); else i3++;
				}
			} else if(s == 0) {
				var listeners4 = self.onIOError.listeners;
				var repeat4 = self.onIOError.repeat;
				var i4 = 0;
				while(i4 < listeners4.length) {
					listeners4[i4](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat4[i4]) self.onIOError.remove(listeners4[i4]); else i4++;
				}
				var listeners5 = self.onSecurityError.listeners;
				var repeat5 = self.onSecurityError.repeat;
				var i5 = 0;
				while(i5 < listeners5.length) {
					listeners5[i5](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat5[i5]) self.onSecurityError.remove(listeners5[i5]); else i5++;
				}
			} else {
				var listeners6 = self.onIOError.listeners;
				var repeat6 = self.onIOError.repeat;
				var i6 = 0;
				while(i6 < listeners6.length) {
					listeners6[i6](_g,"Http Error #" + subject.status);
					if(!repeat6[i6]) self.onIOError.remove(listeners6[i6]); else i6++;
				}
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,lime_utils_ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,lime_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js_Boot.__cast(method , String),url,true);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var listeners = this.onIOError.listeners;
			var repeat = this.onIOError.repeat;
			var i = 0;
			while(i < listeners.length) {
				listeners[i](this,e.toString());
				if(!repeat[i]) this.onIOError.remove(listeners[i]); else i++;
			}
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		var listeners1 = this.onOpen.listeners;
		var repeat1 = this.onOpen.repeat;
		var i1 = 0;
		while(i1 < listeners1.length) {
			listeners1[i1](this);
			if(!repeat1[i1]) this.onOpen.remove(listeners1[i1]); else i1++;
		}
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime_utils_ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](this);
			if(!repeat[i]) this.onComplete.remove(listeners[i]); else i++;
		}
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](this,this.bytesLoaded,this.bytesTotal);
			if(!repeat[i]) this.onProgress.remove(listeners[i]); else i++;
		}
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime_net_URLLoader
};
var lime_net_URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
lime_net_URLLoaderDataFormat.BINARY.toString = $estr;
lime_net_URLLoaderDataFormat.BINARY.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
lime_net_URLLoaderDataFormat.TEXT.toString = $estr;
lime_net_URLLoaderDataFormat.TEXT.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
lime_net_URLLoaderDataFormat.VARIABLES.__enum__ = lime_net_URLLoaderDataFormat;
var lime_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime_net_URLRequest;
lime_net_URLRequest.__name__ = true;
lime_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new lime_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime_net_URLRequest
};
var lime_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime_net_URLRequestHeader;
lime_net_URLRequestHeader.__name__ = true;
lime_net_URLRequestHeader.prototype = {
	__class__: lime_net_URLRequestHeader
};
var lime_net_URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime_net_URLVariables;
lime_net_URLVariables.__name__ = true;
lime_net_URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime_net_URLVariables
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = true;
lime_system_Display.prototype = {
	__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = true;
lime_system_DisplayMode.prototype = {
	__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : true, __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = true;
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.background = color;
	ApplicationMain.config.element = htmlElement;
	ApplicationMain.config.width = width;
	ApplicationMain.config.height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.exit = function(code) {
};
lime_system_System.findHaxeLib = function(library) {
	return "";
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(lime_system_System.disableCFFI) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_System.sysName = function() {
	return null;
};
lime_system_System.tryLoad = function(name,library,func,args) {
	return null;
};
lime_system_System.loaderTrace = function(message) {
};
lime_system_System.get_applicationDirectory = function() {
	return null;
};
lime_system_System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime_app_Application.current != null && lime_app_Application.current.config != null) {
		if(lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
		if(lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
	}
	return null;
};
lime_system_System.get_desktopDirectory = function() {
	return null;
};
lime_system_System.get_documentsDirectory = function() {
	return null;
};
lime_system_System.get_fontsDirectory = function() {
	return null;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return null;
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onProgress = new lime_app_Event();
	this.onError = new lime_app_Event();
	this.onComplete = new lime_app_Event();
	this.doWork = new lime_app_Event();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = true;
lime_system_ThreadPool.prototype = {
	queue: function(id,message) {
		var listeners = this.doWork.listeners;
		var repeat = this.doWork.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](id,message);
			if(!repeat[i]) this.doWork.remove(listeners[i]); else i++;
		}
	}
	,sendComplete: function(id,message) {
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](id,message);
			if(!repeat[i]) this.onComplete.remove(listeners[i]); else i++;
		}
	}
	,sendError: function(id,message) {
		var listeners = this.onError.listeners;
		var repeat = this.onError.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](id,message);
			if(!repeat[i]) this.onError.remove(listeners[i]); else i++;
		}
	}
	,sendProgress: function(id,message) {
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](id,message);
			if(!repeat[i]) this.onProgress.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : true, __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,id,message) {
	this.type = type;
	this.id = id;
	this.message = message;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = true;
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = true;
lime_text_Font.fromBytes = function(bytes) {
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = true;
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = true;
lime_text_GlyphMetrics.prototype = {
	__class__: lime_text_GlyphMetrics
};
var lime_ui_Gamepad = function(id) {
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = true;
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.prototype = {
	get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: lime_ui_Gamepad
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = true;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = true;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = true;
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = true;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Window = function(config) {
	this.onWindowRestore = new lime_app_Event();
	this.onWindowResize = new lime_app_Event();
	this.onWindowMove = new lime_app_Event();
	this.onWindowMinimize = new lime_app_Event();
	this.onWindowLeave = new lime_app_Event();
	this.onWindowFullscreen = new lime_app_Event();
	this.onWindowFocusOut = new lime_app_Event();
	this.onWindowFocusIn = new lime_app_Event();
	this.onWindowEnter = new lime_app_Event();
	this.onWindowDeactivate = new lime_app_Event();
	this.onWindowClose = new lime_app_Event();
	this.onWindowActivate = new lime_app_Event();
	this.onTouchStart = new lime_app_Event();
	this.onTouchMove = new lime_app_Event();
	this.onTouchEnd = new lime_app_Event();
	this.onTextInput = new lime_app_Event();
	this.onTextEdit = new lime_app_Event();
	this.onMouseWheel = new lime_app_Event();
	this.onMouseUp = new lime_app_Event();
	this.onMouseMoveRelative = new lime_app_Event();
	this.onMouseMove = new lime_app_Event();
	this.onMouseDown = new lime_app_Event();
	this.onKeyUp = new lime_app_Event();
	this.onKeyDown = new lime_app_Event();
	this.onGamepadDisconnect = new lime_app_Event();
	this.onGamepadConnect = new lime_app_Event();
	this.onGamepadButtonUp = new lime_app_Event();
	this.onGamepadButtonDown = new lime_app_Event();
	this.onGamepadAxisMove = new lime_app_Event();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
		if(Object.prototype.hasOwnProperty.call(config,"title")) this.__title = config.title;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = true;
lime_ui_Window.prototype = {
	close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.currentRenderer != null) this.currentRenderer.create();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(this.__title);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
};
var lime_utils__$ArrayBufferView_TAError = $hxClasses["lime.utils._ArrayBufferView.TAError"] = { __ename__ : true, __constructs__ : ["RangeError"] };
lime_utils__$ArrayBufferView_TAError.RangeError = ["RangeError",0];
lime_utils__$ArrayBufferView_TAError.RangeError.toString = $estr;
lime_utils__$ArrayBufferView_TAError.RangeError.__enum__ = lime_utils__$ArrayBufferView_TAError;
var lime_utils_ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime_utils_ByteArray;
lime_utils_ByteArray.__name__ = true;
lime_utils_ByteArray.fromBytes = function(bytes) {
	var result = new lime_utils_ByteArray();
	result.byteView = new Uint8Array(bytes.b.bufferValue);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime_utils_ByteArray.readFile = function(path) {
	return null;
};
lime_utils_ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime_utils_ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime_utils_ByteArray.prototype = {
	clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw new js__$Boot_HaxeError("Read error - Out of bounds");
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		haxe_Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib",{ fileName : "ByteArray.hx", lineNumber : 600, className : "lime.utils.ByteArray", methodName : "uncompress"});
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if(_$UInt_UInt_$Impl_$.gt(0,offset) || _$UInt_UInt_$Impl_$.gt(0,length)) throw new js__$Boot_HaxeError("Write error - Out of bounds");
		if(length == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b.bufferValue);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime_utils_ByteArray
};
var lime_utils_CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : true, __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime_utils_CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime_utils_CompressionAlgorithm.DEFLATE.toString = $estr;
lime_utils_CompressionAlgorithm.DEFLATE.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime_utils_CompressionAlgorithm.ZLIB.toString = $estr;
lime_utils_CompressionAlgorithm.ZLIB.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.LZMA = ["LZMA",2];
lime_utils_CompressionAlgorithm.LZMA.toString = $estr;
lime_utils_CompressionAlgorithm.LZMA.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.GZIP = ["GZIP",3];
lime_utils_CompressionAlgorithm.GZIP.toString = $estr;
lime_utils_CompressionAlgorithm.GZIP.__enum__ = lime_utils_CompressionAlgorithm;
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = true;
lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = true;
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw new js__$Boot_HaxeError("Error compiling vertex shader");
		break;
	case 35632:
		throw new js__$Boot_HaxeError("Error compiling fragment shader");
		break;
	default:
		throw new js__$Boot_HaxeError("Error compiling unknown shader type");
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
	return program;
};
var lime_utils_IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime_utils_IDataInput;
lime_utils_IDataInput.__name__ = true;
lime_utils_IDataInput.prototype = {
	__class__: lime_utils_IDataInput
};
var lime_utils_IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime_utils_IMemoryRange;
lime_utils_IMemoryRange.__name__ = true;
lime_utils_IMemoryRange.prototype = {
	__class__: lime_utils_IMemoryRange
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = true;
lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_LZMA = function() { };
$hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
lime_utils_LZMA.__name__ = true;
lime_utils_LZMA.decode = function(bytes) {
	return null;
};
lime_utils_LZMA.encode = function(bytes) {
	return null;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = true;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
	if(len == null) return new Uint32Array(bytes.b.bufferValue,byteOffset);
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = true;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var nape_Config = function() {
};
$hxClasses["nape.Config"] = nape_Config;
nape_Config.__name__ = true;
nape_Config.prototype = {
	__class__: nape_Config
};
var nape_callbacks_Callback = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_callbacks_ZPP_$Callback.internal) throw new js__$Boot_HaxeError("Error: Callback cannot be instantiated derp!");
};
$hxClasses["nape.callbacks.Callback"] = nape_callbacks_Callback;
nape_callbacks_Callback.__name__ = true;
nape_callbacks_Callback.prototype = {
	get_event: function() {
		return zpp_$nape_callbacks_ZPP_$Listener.events[this.zpp_inner.event];
	}
	,get_listener: function() {
		return this.zpp_inner.listener.outer;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape_callbacks_Callback
};
var nape_callbacks_BodyCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.BodyCallback"] = nape_callbacks_BodyCallback;
nape_callbacks_BodyCallback.__name__ = true;
nape_callbacks_BodyCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_BodyCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_body: function() {
		return this.zpp_inner.body.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][this.zpp_inner.event - zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.body.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_BodyCallback
});
var nape_callbacks_Listener = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_callbacks_ZPP_$Listener.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate Listener derp!");
};
$hxClasses["nape.callbacks.Listener"] = nape_callbacks_Listener;
nape_callbacks_Listener.__name__ = true;
nape_callbacks_Listener.prototype = {
	get_type: function() {
		return zpp_$nape_callbacks_ZPP_$Listener.types[this.zpp_inner.type];
	}
	,get_event: function() {
		return zpp_$nape_callbacks_ZPP_$Listener.events[this.zpp_inner.event];
	}
	,set_event: function(event) {
		if(event == null) throw new js__$Boot_HaxeError("Error: Cannot set listener event type to null");
		if(zpp_$nape_callbacks_ZPP_$Listener.events[this.zpp_inner.event] != event) {
			var xevent;
			if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_END;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_END; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_PRE;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE; else xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK;
			this.zpp_inner.swapEvent(xevent);
		}
		return zpp_$nape_callbacks_ZPP_$Listener.events[this.zpp_inner.event];
	}
	,get_precedence: function() {
		return this.zpp_inner.precedence;
	}
	,set_precedence: function(precedence) {
		if(this.zpp_inner.precedence != precedence) {
			this.zpp_inner.precedence = precedence;
			this.zpp_inner.invalidate_precedence();
		}
		return this.zpp_inner.precedence;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(this);
			if(space != null) space.zpp_inner.wrap_listeners.add(this); else this.zpp_inner.space = null;
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_BODY) {
			var body = this.zpp_inner.body;
			return "BodyListener{" + event + "::" + Std.string(body.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_CONSTRAINT) {
			var con = this.zpp_inner.constraint;
			return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else {
			var con1 = this.zpp_inner.interaction;
			var itype;
			var _g = con1.itype;
			switch(_g) {
			case 1:
				itype = "COLLISION";
				break;
			case 2:
				itype = "SENSOR";
				break;
			case 4:
				itype = "FLUID";
				break;
			default:
				itype = "ALL";
			}
			return (this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_INTERACTION?"InteractionListener{" + event + "#" + itype + "::" + Std.string(con1.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_zni.zpp_inner_zn.options2.outer) + "}":"PreListener{" + itype + "::" + Std.string(con1.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
	,__class__: nape_callbacks_Listener
};
var nape_callbacks_BodyListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) throw new js__$Boot_HaxeError("Error: BodyListener::handler cannot be null");
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP; else throw new js__$Boot_HaxeError("Error: cbEvent '" + event.toString() + "' is not a valid event type for a BodyListener");
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$BodyListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
$hxClasses["nape.callbacks.BodyListener"] = nape_callbacks_BodyListener;
nape_callbacks_BodyListener.__name__ = true;
nape_callbacks_BodyListener.__super__ = nape_callbacks_Listener;
nape_callbacks_BodyListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_handler: function(handler) {
		if(handler == null) throw new js__$Boot_HaxeError("Error: BodyListener::handler cannot be null");
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,__class__: nape_callbacks_BodyListener
});
var nape_callbacks_CbEvent = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "CbEvent" + " derp!");
};
$hxClasses["nape.callbacks.CbEvent"] = nape_callbacks_CbEvent;
nape_callbacks_CbEvent.__name__ = true;
nape_callbacks_CbEvent.get_BEGIN = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
};
nape_callbacks_CbEvent.get_ONGOING = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
};
nape_callbacks_CbEvent.get_END = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_END;
};
nape_callbacks_CbEvent.get_WAKE = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
};
nape_callbacks_CbEvent.get_SLEEP = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
};
nape_callbacks_CbEvent.get_BREAK = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK;
};
nape_callbacks_CbEvent.get_PRE = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_PRE;
};
nape_callbacks_CbEvent.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_PRE;
			return $r;
		}(this))) return "PRE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
			return $r;
		}(this))) return "BEGIN"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
			return $r;
		}(this))) return "ONGOING"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_END;
			return $r;
		}(this))) return "END"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
			return $r;
		}(this))) return "WAKE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
			return $r;
		}(this))) return "SLEEP"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK;
			return $r;
		}(this))) return "BREAK"; else return "";
	}
	,__class__: nape_callbacks_CbEvent
};
var nape_callbacks_CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$CbType();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbType"] = nape_callbacks_CbType;
nape_callbacks_CbType.__name__ = true;
nape_callbacks_CbType.get_ANY_BODY = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY;
};
nape_callbacks_CbType.get_ANY_CONSTRAINT = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT;
};
nape_callbacks_CbType.get_ANY_SHAPE = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE;
};
nape_callbacks_CbType.get_ANY_COMPOUND = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND;
};
nape_callbacks_CbType.prototype = {
	get_id: function() {
		return this.zpp_inner.id;
	}
	,including: function(includes) {
		return new nape_callbacks_OptionType(this).including(includes);
	}
	,excluding: function(excludes) {
		return new nape_callbacks_OptionType(this).excluding(excludes);
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_$nape_util_ZPP_$InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,toString: function() {
		if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY) return "ANY_BODY"; else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE) return "ANY_SHAPE"; else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND) return "ANY_COMPOUND"; else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT) return "ANY_CONSTRAINT"; else return "CbType#" + this.zpp_inner.id;
	}
	,__class__: nape_callbacks_CbType
};
var nape_callbacks_CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$CbTypeList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "CbType" + "Iterator derp!");
};
$hxClasses["nape.callbacks.CbTypeIterator"] = nape_callbacks_CbTypeIterator;
nape_callbacks_CbTypeIterator.__name__ = true;
nape_callbacks_CbTypeIterator.get = function(list) {
	var ret;
	if(nape_callbacks_CbTypeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CbTypeList.internal = true;
		var ret1 = new nape_callbacks_CbTypeIterator();
		zpp_$nape_util_ZPP_$CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_CbTypeIterator.zpp_pool;
		nape_callbacks_CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_CbTypeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
			nape_callbacks_CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_CbTypeIterator
};
var nape_callbacks_CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CbTypeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbTypeList"] = nape_callbacks_CbTypeList;
nape_callbacks_CbTypeList.__name__ = true;
nape_callbacks_CbTypeList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_callbacks_CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_callbacks_CbTypeList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "CbType" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "CbType" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "CbType" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "CbType" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "CbType" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "CbType" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_callbacks_CbTypeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_callbacks_CbTypeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_callbacks_CbTypeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "CbType" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_callbacks_CbTypeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_callbacks_CbTypeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_callbacks_CbTypeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
			nape_callbacks_CbTypeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_callbacks_CbTypeList
};
var nape_callbacks_ConstraintCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.ConstraintCallback"] = nape_callbacks_ConstraintCallback;
nape_callbacks_ConstraintCallback.__name__ = true;
nape_callbacks_ConstraintCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_ConstraintCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_constraint: function() {
		return this.zpp_inner.constraint.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.constraint.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_ConstraintCallback
});
var nape_callbacks_ConstraintListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) throw new js__$Boot_HaxeError("Error: ConstraintListener::handler cannot be null");
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK; else throw new js__$Boot_HaxeError("Error: cbEvent '" + event.toString() + "' is not a valid event type for a ConstraintListener");
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$ConstraintListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
$hxClasses["nape.callbacks.ConstraintListener"] = nape_callbacks_ConstraintListener;
nape_callbacks_ConstraintListener.__name__ = true;
nape_callbacks_ConstraintListener.__super__ = nape_callbacks_Listener;
nape_callbacks_ConstraintListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_handler: function(handler) {
		if(handler == null) throw new js__$Boot_HaxeError("Error: ConstraintListener::handler cannot be null");
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,__class__: nape_callbacks_ConstraintListener
});
var nape_callbacks_InteractionCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.InteractionCallback"] = nape_callbacks_InteractionCallback;
nape_callbacks_InteractionCallback.__name__ = true;
nape_callbacks_InteractionCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_InteractionCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_arbiters: function() {
		return this.zpp_inner.wrap_arbiters;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.wrap_arbiters.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_InteractionCallback
});
var nape_callbacks_InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) throw new js__$Boot_HaxeError("Error: InteractionListener::handler cannot be null");
	if(event == null) throw new js__$Boot_HaxeError("Error: CbEvent cannot be null for InteractionListener");
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_END;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_END; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING; else throw new js__$Boot_HaxeError("Error: CbEvent '" + event.toString() + "' is not a valid event type for InteractionListener");
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),xevent,zpp_$nape_util_ZPP_$Flags.id_ListenerType_INTERACTION);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	this.set_interactionType(interactionType);
};
$hxClasses["nape.callbacks.InteractionListener"] = nape_callbacks_InteractionListener;
nape_callbacks_InteractionListener.__name__ = true;
nape_callbacks_InteractionListener.__super__ = nape_callbacks_Listener;
nape_callbacks_InteractionListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
		} else return null;
	}
	,set_interactionType: function(interactionType) {
		if(interactionType == null) throw new js__$Boot_HaxeError("Error: Cannot set listener interaction type to null");
		if(this.get_interactionType() != interactionType) {
			var xtype;
			if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID; else xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handleri;
	}
	,set_handler: function(handler) {
		if(handler == null) throw new js__$Boot_HaxeError("Error: InteractionListener::handler cannot be null");
		this.zpp_inner_zn.handleri = handler;
		return this.zpp_inner_zn.handleri;
	}
	,get_allowSleepingCallbacks: function() {
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,set_allowSleepingCallbacks: function(allowSleepingCallbacks) {
		this.zpp_inner_zn.allowSleepingCallbacks = allowSleepingCallbacks;
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,__class__: nape_callbacks_InteractionListener
});
var nape_callbacks_InteractionType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "InteractionType" + " derp!");
};
$hxClasses["nape.callbacks.InteractionType"] = nape_callbacks_InteractionType;
nape_callbacks_InteractionType.__name__ = true;
nape_callbacks_InteractionType.get_COLLISION = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
};
nape_callbacks_InteractionType.get_SENSOR = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
};
nape_callbacks_InteractionType.get_FLUID = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
};
nape_callbacks_InteractionType.get_ANY = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
};
nape_callbacks_InteractionType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
			return $r;
		}(this))) return "FLUID"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
			return $r;
		}(this))) return "ANY"; else return "";
	}
	,__class__: nape_callbacks_InteractionType
};
var nape_callbacks_ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ListenerList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Listener" + "Iterator derp!");
};
$hxClasses["nape.callbacks.ListenerIterator"] = nape_callbacks_ListenerIterator;
nape_callbacks_ListenerIterator.__name__ = true;
nape_callbacks_ListenerIterator.get = function(list) {
	var ret;
	if(nape_callbacks_ListenerIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ListenerList.internal = true;
		var ret1 = new nape_callbacks_ListenerIterator();
		zpp_$nape_util_ZPP_$ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_ListenerIterator.zpp_pool;
		nape_callbacks_ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_ListenerIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
			nape_callbacks_ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_ListenerIterator
};
var nape_callbacks_ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ListenerList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.ListenerList"] = nape_callbacks_ListenerList;
nape_callbacks_ListenerList.__name__ = true;
nape_callbacks_ListenerList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_callbacks_ListenerList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_callbacks_ListenerList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Listener" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Listener" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Listener" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Listener" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Listener" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Listener" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_callbacks_ListenerIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_callbacks_ListenerList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_callbacks_ListenerIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "Listener" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_callbacks_ListenerIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_callbacks_ListenerIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_callbacks_ListenerIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
			nape_callbacks_ListenerIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_callbacks_ListenerList
};
var nape_callbacks_ListenerType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ListenerType" + " derp!");
};
$hxClasses["nape.callbacks.ListenerType"] = nape_callbacks_ListenerType;
nape_callbacks_ListenerType.__name__ = true;
nape_callbacks_ListenerType.get_BODY = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_BODY;
};
nape_callbacks_ListenerType.get_CONSTRAINT = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT;
};
nape_callbacks_ListenerType.get_INTERACTION = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION;
};
nape_callbacks_ListenerType.get_PRE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_PRE;
};
nape_callbacks_ListenerType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ListenerType_BODY;
			return $r;
		}(this))) return "BODY"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT;
			return $r;
		}(this))) return "CONSTRAINT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION;
			return $r;
		}(this))) return "INTERACTION"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ListenerType_PRE;
			return $r;
		}(this))) return "PRE"; else return "";
	}
	,__class__: nape_callbacks_ListenerType
};
var nape_callbacks_OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) this.including(includes);
	if(excludes != null) this.excluding(excludes);
};
$hxClasses["nape.callbacks.OptionType"] = nape_callbacks_OptionType;
nape_callbacks_OptionType.__name__ = true;
nape_callbacks_OptionType.prototype = {
	get_includes: function() {
		if(this.zpp_inner.wrap_includes == null) this.zpp_inner.setup_includes();
		return this.zpp_inner.wrap_includes;
	}
	,get_excludes: function() {
		if(this.zpp_inner.wrap_excludes == null) this.zpp_inner.setup_excludes();
		return this.zpp_inner.wrap_excludes;
	}
	,including: function(includes) {
		this.zpp_inner.append(this.zpp_inner.includes,includes);
		return this;
	}
	,excluding: function(excludes) {
		this.zpp_inner.append(this.zpp_inner.excludes,excludes);
		return this;
	}
	,toString: function() {
		var inc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_includes == null) $this.zpp_inner.setup_includes();
			$r = $this.zpp_inner.wrap_includes;
			return $r;
		}(this))).toString();
		var exc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_excludes == null) $this.zpp_inner.setup_excludes();
			$r = $this.zpp_inner.wrap_excludes;
			return $r;
		}(this))).toString();
		return "@{" + inc + " excluding " + exc + "}";
	}
	,__class__: nape_callbacks_OptionType
};
var nape_callbacks_PreCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.PreCallback"] = nape_callbacks_PreCallback;
nape_callbacks_PreCallback.__name__ = true;
nape_callbacks_PreCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_PreCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_arbiter: function() {
		return this.zpp_inner.pre_arbiter.wrapper();
	}
	,get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_swapped: function() {
		return this.zpp_inner.pre_swapped;
	}
	,toString: function() {
		var ret = "Cb:PRE:";
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
		ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_PreCallback
});
var nape_callbacks_PreFlag = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "PreFlag" + " derp!");
};
$hxClasses["nape.callbacks.PreFlag"] = nape_callbacks_PreFlag;
nape_callbacks_PreFlag.__name__ = true;
nape_callbacks_PreFlag.get_ACCEPT = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
};
nape_callbacks_PreFlag.get_IGNORE = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
};
nape_callbacks_PreFlag.get_ACCEPT_ONCE = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
};
nape_callbacks_PreFlag.get_IGNORE_ONCE = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
};
nape_callbacks_PreFlag.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
			return $r;
		}(this))) return "ACCEPT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
			return $r;
		}(this))) return "IGNORE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
			return $r;
		}(this))) return "ACCEPT_ONCE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
			return $r;
		}(this))) return "IGNORE_ONCE"; else return "";
	}
	,__class__: nape_callbacks_PreFlag
};
var nape_callbacks_PreListener = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) pure = false;
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) throw new js__$Boot_HaxeError("Error: PreListener must take a handler!");
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE,zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	this.set_interactionType(interactionType);
};
$hxClasses["nape.callbacks.PreListener"] = nape_callbacks_PreListener;
nape_callbacks_PreListener.__name__ = true;
nape_callbacks_PreListener.__super__ = nape_callbacks_Listener;
nape_callbacks_PreListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handlerp;
	}
	,set_handler: function(handler) {
		if(handler == null) throw new js__$Boot_HaxeError("Error: PreListener must take a non-null handler!");
		this.zpp_inner_zn.handlerp = handler;
		this.zpp_inner_zn.wake();
		return this.zpp_inner_zn.handlerp;
	}
	,get_pure: function() {
		return this.zpp_inner_zn.pure;
	}
	,set_pure: function(pure) {
		if(!pure) this.zpp_inner_zn.wake();
		this.zpp_inner_zn.pure = pure;
		return this.zpp_inner_zn.pure;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
		} else return null;
	}
	,set_interactionType: function(interactionType) {
		if(interactionType == null) throw new js__$Boot_HaxeError("Error: Cannot set listener interaction type to null");
		if(this.get_interactionType() != interactionType) {
			var xtype;
			if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID; else xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,__class__: nape_callbacks_PreListener
});
var nape_constraint_Constraint = function() {
	this.debugDraw = true;
	this.zpp_inner.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT.zpp_inner);
	if(!nape_constraint_Constraint.zpp_internalAlloc) throw new js__$Boot_HaxeError("Error: Constraint cannot be instantiated derp!");
};
$hxClasses["nape.constraint.Constraint"] = nape_constraint_Constraint;
nape_constraint_Constraint.__name__ = true;
nape_constraint_Constraint.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(this);
			if(compound != null) compound.zpp_inner.wrap_constraints.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if(this.zpp_inner.compound != null) throw new js__$Boot_HaxeError("Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set");
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(this);
			if(space != null) space.zpp_inner.wrap_constraints.add(this); else this.zpp_inner.space = null;
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,get_isSleeping: function() {
		if(this.zpp_inner.space == null || !this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: isSleeping only makes sense if constraint is" + " active and inside a space");
		return this.zpp_inner.component.sleeping;
	}
	,get_active: function() {
		return this.zpp_inner.active;
	}
	,set_active: function(active) {
		if(this.zpp_inner.active != active) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(active) {
				this.zpp_inner.active = active;
				this.zpp_inner.activate();
				if(this.zpp_inner.space != null) {
					if(this.zpp_inner.component != null) this.zpp_inner.component.sleeping = true;
					this.zpp_inner.space.wake_constraint(this.zpp_inner,true);
				}
			} else {
				if(this.zpp_inner.space != null) {
					this.zpp_inner.wake();
					this.zpp_inner.space.live_constraints.remove(this.zpp_inner);
				}
				this.zpp_inner.active = active;
				this.zpp_inner.deactivate();
			}
		}
		return this.zpp_inner.active;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.ignore = ignore;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.ignore;
	}
	,get_stiff: function() {
		return this.zpp_inner.stiff;
	}
	,set_stiff: function(stiff) {
		if(this.zpp_inner.stiff != stiff) {
			this.zpp_inner.stiff = stiff;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.stiff;
	}
	,get_frequency: function() {
		return this.zpp_inner.frequency;
	}
	,set_frequency: function(frequency) {
		if(frequency != frequency) throw new js__$Boot_HaxeError("Error: Constraint::Frequency cannot be NaN");
		if(frequency <= 0) throw new js__$Boot_HaxeError("Error: Constraint::Frequency must be >0");
		if(this.zpp_inner.frequency != frequency) {
			this.zpp_inner.frequency = frequency;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.frequency;
	}
	,get_damping: function() {
		return this.zpp_inner.damping;
	}
	,set_damping: function(damping) {
		if(damping != damping) throw new js__$Boot_HaxeError("Error: Constraint::Damping cannot be Nan");
		if(damping < 0) throw new js__$Boot_HaxeError("Error: Constraint::Damping must be >=0");
		if(this.zpp_inner.damping != damping) {
			this.zpp_inner.damping = damping;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.damping;
	}
	,get_maxForce: function() {
		return this.zpp_inner.maxForce;
	}
	,set_maxForce: function(maxForce) {
		if(maxForce != maxForce) throw new js__$Boot_HaxeError("Error: Constraint::maxForce cannot be NaN");
		if(maxForce < 0) throw new js__$Boot_HaxeError("Error: Constraint::maxForce must be >=0");
		if(this.zpp_inner.maxForce != maxForce) {
			this.zpp_inner.maxForce = maxForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxForce;
	}
	,get_maxError: function() {
		return this.zpp_inner.maxError;
	}
	,set_maxError: function(maxError) {
		if(maxError != maxError) throw new js__$Boot_HaxeError("Error: Constraint::maxError cannot be NaN");
		if(maxError < 0) throw new js__$Boot_HaxeError("Error: Constraint::maxError must be >=0");
		if(this.zpp_inner.maxError != maxError) {
			this.zpp_inner.maxError = maxError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxError;
	}
	,get_breakUnderForce: function() {
		return this.zpp_inner.breakUnderForce;
	}
	,set_breakUnderForce: function(breakUnderForce) {
		if(this.zpp_inner.breakUnderForce != breakUnderForce) {
			this.zpp_inner.breakUnderForce = breakUnderForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderForce;
	}
	,get_breakUnderError: function() {
		return this.zpp_inner.breakUnderError;
	}
	,set_breakUnderError: function(breakUnderError) {
		if(this.zpp_inner.breakUnderError != breakUnderError) {
			this.zpp_inner.breakUnderError = breakUnderError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderError;
	}
	,get_removeOnBreak: function() {
		return this.zpp_inner.removeOnBreak;
	}
	,set_removeOnBreak: function(removeOnBreak) {
		this.zpp_inner.removeOnBreak = removeOnBreak;
		return this.zpp_inner.removeOnBreak;
	}
	,impulse: function() {
		return null;
	}
	,bodyImpulse: function(body) {
		return null;
	}
	,visitBodies: function(lambda) {
	}
	,get_cbTypes: function() {
		if(this.zpp_inner.wrap_cbTypes == null) this.zpp_inner.setupcbTypes();
		return this.zpp_inner.wrap_cbTypes;
	}
	,toString: function() {
		return "{Constraint}";
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,__class__: nape_constraint_Constraint
};
var nape_constraint_AngleJoint = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(jointMin != jointMin) throw new js__$Boot_HaxeError("Error: AngleJoint::jointMin cannot be NaN");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(jointMax != jointMax) throw new js__$Boot_HaxeError("Error: AngleJoint::jointMax cannot be NaN");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(ratio != ratio) throw new js__$Boot_HaxeError("Error: AngleJoint::ratio cannot be NaN");
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
$hxClasses["nape.constraint.AngleJoint"] = nape_constraint_AngleJoint;
nape_constraint_AngleJoint.__name__ = true;
nape_constraint_AngleJoint.__super__ = nape_constraint_Constraint;
nape_constraint_AngleJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
		if(jointMin != jointMin) throw new js__$Boot_HaxeError("Error: AngleJoint::jointMin cannot be NaN");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
		if(jointMax != jointMax) throw new js__$Boot_HaxeError("Error: AngleJoint::jointMax cannot be NaN");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("AngleJoint::ratio");
		if(ratio != ratio) throw new js__$Boot_HaxeError("Error: AngleJoint::ratio cannot be NaN");
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,isSlack: function() {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) throw new js__$Boot_HaxeError("Error: Cannot compute slack for AngleJoint if either body is null.");
		return this.zpp_inner_zn.is_slack();
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate impulse on null body");
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw new js__$Boot_HaxeError("Error: Body is not linked to this constraint");
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(0,0,0); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot apply null lambda to bodies");
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_AngleJoint
});
var nape_constraint_ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ConstraintList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Constraint" + "Iterator derp!");
};
$hxClasses["nape.constraint.ConstraintIterator"] = nape_constraint_ConstraintIterator;
nape_constraint_ConstraintIterator.__name__ = true;
nape_constraint_ConstraintIterator.get = function(list) {
	var ret;
	if(nape_constraint_ConstraintIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConstraintList.internal = true;
		var ret1 = new nape_constraint_ConstraintIterator();
		zpp_$nape_util_ZPP_$ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape_constraint_ConstraintIterator.zpp_pool;
		nape_constraint_ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_constraint_ConstraintIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_constraint_ConstraintIterator
};
var nape_constraint_ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConstraintList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.constraint.ConstraintList"] = nape_constraint_ConstraintList;
nape_constraint_ConstraintList.__name__ = true;
nape_constraint_ConstraintList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_constraint_ConstraintList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_constraint_ConstraintList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Constraint" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Constraint" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Constraint" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Constraint" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Constraint" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Constraint" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_constraint_ConstraintIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_constraint_ConstraintList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_constraint_ConstraintIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "Constraint" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_constraint_ConstraintIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_constraint_ConstraintIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_constraint_ConstraintIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_constraint_ConstraintList
};
var nape_constraint_DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(jointMin != jointMin) throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMin cannot be NaN");
	if(jointMin < 0) throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMin must be >= 0");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(jointMax != jointMax) throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMax cannot be NaN");
	if(jointMax < 0) throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMax must be >= 0");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
$hxClasses["nape.constraint.DistanceJoint"] = nape_constraint_DistanceJoint;
nape_constraint_DistanceJoint.__name__ = true;
nape_constraint_DistanceJoint.__super__ = nape_constraint_Constraint;
nape_constraint_DistanceJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
		if(jointMin != jointMin) throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMin cannot be NaN");
		if(jointMin < 0) throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMin must be >= 0");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
		if(jointMax != jointMax) throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMax cannot be NaN");
		if(jointMax < 0) throw new js__$Boot_HaxeError("Error: DistanceJoint::jointMax must be >= 0");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,isSlack: function() {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) throw new js__$Boot_HaxeError("Error: Cannot compute slack for DistanceJoint if either body is null.");
		return this.zpp_inner_zn.slack;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate impulse on null body");
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw new js__$Boot_HaxeError("Error: Body is not linked to this constraint");
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_DistanceJoint
});
var nape_constraint_LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	if(direction != null && direction.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(direction == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "direction" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this))).set(direction);
	if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
	this.zpp_inner_zn.wrap_n;
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(jointMin != jointMin) throw new js__$Boot_HaxeError("Error: AngleJoint::jointMin cannot be NaN");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(jointMax != jointMax) throw new js__$Boot_HaxeError("Error: AngleJoint::jointMax cannot be NaN");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
$hxClasses["nape.constraint.LineJoint"] = nape_constraint_LineJoint;
nape_constraint_LineJoint.__name__ = true;
nape_constraint_LineJoint.__super__ = nape_constraint_Constraint;
nape_constraint_LineJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_direction: function() {
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		return this.zpp_inner_zn.wrap_n;
	}
	,set_direction: function(direction) {
		if(direction != null && direction.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(direction == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "direction" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
			$r = $this.zpp_inner_zn.wrap_n;
			return $r;
		}(this))).set(direction);
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		return this.zpp_inner_zn.wrap_n;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMin");
		if(jointMin != jointMin) throw new js__$Boot_HaxeError("Error: AngleJoint::jointMin cannot be NaN");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMax");
		if(jointMax != jointMax) throw new js__$Boot_HaxeError("Error: AngleJoint::jointMax cannot be NaN");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(2,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate impulse on null body");
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw new js__$Boot_HaxeError("Error: Body is not linked to this constraint");
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_LineJoint
});
var nape_constraint_MotorJoint = function(body1,body2,rate,ratio) {
	if(ratio == null) ratio = 1.0;
	if(rate == null) rate = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(rate != rate) throw new js__$Boot_HaxeError("Error: MotorJoint::rate cannot be NaN");
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.rate;
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(ratio != ratio) throw new js__$Boot_HaxeError("Error: MotorJoint::ratio cannot be NaN");
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
$hxClasses["nape.constraint.MotorJoint"] = nape_constraint_MotorJoint;
nape_constraint_MotorJoint.__name__ = true;
nape_constraint_MotorJoint.__super__ = nape_constraint_Constraint;
nape_constraint_MotorJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("MotorJoint::ratio");
		if(ratio != ratio) throw new js__$Boot_HaxeError("Error: MotorJoint::ratio cannot be NaN");
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,get_rate: function() {
		return this.zpp_inner_zn.rate;
	}
	,set_rate: function(rate) {
		this.zpp_inner.immutable_midstep("MotorJoint::rate");
		if(rate != rate) throw new js__$Boot_HaxeError("Error: MotorJoint::rate cannot be NaN");
		if(this.zpp_inner_zn.rate != rate) {
			this.zpp_inner_zn.rate = rate;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.rate;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate impulse on null body");
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw new js__$Boot_HaxeError("Error: Body is not linked to this constraint");
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_MotorJoint
});
var nape_constraint_PivotJoint = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
};
$hxClasses["nape.constraint.PivotJoint"] = nape_constraint_PivotJoint;
nape_constraint_PivotJoint.__name__ = true;
nape_constraint_PivotJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PivotJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(2,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate impulse on null body");
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw new js__$Boot_HaxeError("Error: Body is not linked to this constraint");
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_PivotJoint
});
var nape_constraint_PulleyJoint = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_body3(body3);
	this.set_body4(body4);
	if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	if(anchor3 != null && anchor3.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor3 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor3" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
		$r = $this.zpp_inner_zn.wrap_a3;
		return $r;
	}(this))).set(anchor3);
	if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
	this.zpp_inner_zn.wrap_a3;
	if(anchor4 != null && anchor4.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor4 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor4" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
		$r = $this.zpp_inner_zn.wrap_a4;
		return $r;
	}(this))).set(anchor4);
	if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
	this.zpp_inner_zn.wrap_a4;
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(ratio != ratio) throw new js__$Boot_HaxeError("Error: PulleyJoint::ratio cannot be NaN");
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(jointMin != jointMin) throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMin cannot be NaN");
	if(jointMin < 0) throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMin must be >= 0");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(jointMax != jointMax) throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMax cannot be NaN");
	if(jointMax < 0) throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMax must be >= 0");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
$hxClasses["nape.constraint.PulleyJoint"] = nape_constraint_PulleyJoint;
nape_constraint_PulleyJoint.__name__ = true;
nape_constraint_PulleyJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PulleyJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_body3: function() {
		if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
	}
	,set_body3: function(body3) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body3");
		var inbody3;
		if(body3 == null) inbody3 = null; else inbody3 = body3.zpp_inner;
		if(inbody3 != this.zpp_inner_zn.b3) {
			if(this.zpp_inner_zn.b3 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
					if(this.zpp_inner_zn.b3 != null) this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b3.wake();
			}
			this.zpp_inner_zn.b3 = inbody3;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
				if(inbody3 != null) inbody3.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody3 != null) inbody3.wake();
			}
		}
		if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
	}
	,get_body4: function() {
		if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
	}
	,set_body4: function(body4) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body4");
		var inbody4;
		if(body4 == null) inbody4 = null; else inbody4 = body4.zpp_inner;
		if(inbody4 != this.zpp_inner_zn.b4) {
			if(this.zpp_inner_zn.b4 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
					if(this.zpp_inner_zn.b4 != null) this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b4.wake();
			}
			this.zpp_inner_zn.b4 = inbody4;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
				if(inbody4 != null) inbody4.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody4 != null) inbody4.wake();
			}
		}
		if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_anchor3: function() {
		if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
		return this.zpp_inner_zn.wrap_a3;
	}
	,set_anchor3: function(anchor3) {
		if(anchor3 != null && anchor3.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor3 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor3" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
			$r = $this.zpp_inner_zn.wrap_a3;
			return $r;
		}(this))).set(anchor3);
		if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
		return this.zpp_inner_zn.wrap_a3;
	}
	,get_anchor4: function() {
		if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
		return this.zpp_inner_zn.wrap_a4;
	}
	,set_anchor4: function(anchor4) {
		if(anchor4 != null && anchor4.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor4 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor4" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
			$r = $this.zpp_inner_zn.wrap_a4;
			return $r;
		}(this))).set(anchor4);
		if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
		return this.zpp_inner_zn.wrap_a4;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
		if(jointMin != jointMin) throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMin cannot be NaN");
		if(jointMin < 0) throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMin must be >= 0");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
		if(jointMax != jointMax) throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMax cannot be NaN");
		if(jointMax < 0) throw new js__$Boot_HaxeError("Error: PulleyJoint::jointMax must be >= 0");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
		if(ratio != ratio) throw new js__$Boot_HaxeError("Error: PulleyJoint::ratio cannot be NaN");
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,isSlack: function() {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null || (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) == null || (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) == null) throw new js__$Boot_HaxeError("Error: Cannot compute slack for PulleyJoint if either body is null.");
		return this.zpp_inner_zn.slack;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate impulse on null body");
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && body != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) && body != (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer)) throw new js__$Boot_HaxeError("Error: Body is not linked to this constraint");
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
		if((this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != null && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) lambda(this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer);
		if((this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != null && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer)) lambda(this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer);
	}
	,__class__: nape_constraint_PulleyJoint
});
var nape_constraint_UserConstraint = function(dimensions,velocityOnly) {
	if(velocityOnly == null) velocityOnly = false;
	this.zpp_inner_zn = null;
	if(dimensions < 1) throw new js__$Boot_HaxeError("Error: Constraint dimension must be at least 1");
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
};
$hxClasses["nape.constraint.UserConstraint"] = nape_constraint_UserConstraint;
nape_constraint_UserConstraint.__name__ = true;
nape_constraint_UserConstraint.__super__ = nape_constraint_Constraint;
nape_constraint_UserConstraint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__bindVec2: function() {
		var ret = new nape_geom_Vec2();
		ret.zpp_inner._inuse = true;
		ret.zpp_inner._invalidate = ($_=this.zpp_inner_zn,$bind($_,$_.bindVec2_invalidate));
		return ret;
	}
	,__copy: function() {
		throw new js__$Boot_HaxeError("Error: UserConstraint::__copy must be overriden");
		return null;
	}
	,__broken: function() {
	}
	,__validate: function() {
	}
	,__draw: function(debug) {
	}
	,__prepare: function() {
	}
	,__position: function(err) {
		throw new js__$Boot_HaxeError("Error: UserConstraint::__position must be overriden");
	}
	,__velocity: function(err) {
		throw new js__$Boot_HaxeError("Error: Userconstraint::__velocity must be overriden");
	}
	,__eff_mass: function(eff) {
		throw new js__$Boot_HaxeError("Error: UserConstraint::__eff_mass must be overriden");
	}
	,__clamp: function(jAcc) {
	}
	,__impulse: function(imp,body,out) {
		throw new js__$Boot_HaxeError("Error: UserConstraint::__impulse must be overriden");
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(this.zpp_inner_zn.dim,1);
		var _g1 = 0;
		var _g = this.zpp_inner_zn.dim;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < 0 || i >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
			ret.zpp_inner.x[i * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc[i];
		}
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate impulse on null body");
		var found = false;
		var _g = 0;
		var _g1 = this.zpp_inner_zn.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body == body.zpp_inner) {
				found = true;
				break;
			}
		}
		if(!found) throw new js__$Boot_HaxeError("Error: Body is not linked to this constraint");
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		var i = 0;
		var nbodies = this.zpp_inner_zn.bodies.length;
		while(i < nbodies) {
			var b = this.zpp_inner_zn.bodies[i];
			if(b.body != null) {
				var found = false;
				var _g = i + 1;
				while(_g < nbodies) {
					var j = _g++;
					var c = this.zpp_inner_zn.bodies[j];
					if(c.body == b.body) {
						found = true;
						break;
					}
				}
				if(!found) lambda(b.body.outer);
			}
			i++;
		}
	}
	,__invalidate: function() {
		this.zpp_inner.immutable_midstep("UserConstraint::invalidate()");
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.wake();
	}
	,__registerBody: function(oldBody,newBody) {
		this.zpp_inner.immutable_midstep("UserConstraint::registerBody(..)");
		if(oldBody != newBody) {
			if(oldBody != null) {
				if(!this.zpp_inner_zn.remBody(oldBody.zpp_inner)) throw new js__$Boot_HaxeError("Error: oldBody is not registered to the cosntraint");
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) oldBody.zpp_inner.wake();
			}
			if(newBody != null) this.zpp_inner_zn.addBody(newBody.zpp_inner);
			this.zpp_inner.wake();
			if(newBody != null) newBody.zpp_inner.wake();
		}
		return newBody;
	}
	,__class__: nape_constraint_UserConstraint
});
var nape_constraint_WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) phase = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(phase != phase) throw new js__$Boot_HaxeError("Error: WeldJoint::phase cannot be NaN");
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.phase;
};
$hxClasses["nape.constraint.WeldJoint"] = nape_constraint_WeldJoint;
nape_constraint_WeldJoint.__name__ = true;
nape_constraint_WeldJoint.__super__ = nape_constraint_Constraint;
nape_constraint_WeldJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor1 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(anchor2 == null) throw new js__$Boot_HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_phase: function() {
		return this.zpp_inner_zn.phase;
	}
	,set_phase: function(phase) {
		this.zpp_inner.immutable_midstep("WeldJoint::phase");
		if(phase != phase) throw new js__$Boot_HaxeError("Error: WeldJoint::phase cannot be NaN");
		if(this.zpp_inner_zn.phase != phase) {
			this.zpp_inner_zn.phase = phase;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.phase;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(3,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccz;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate impulse on null body");
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw new js__$Boot_HaxeError("Error: Body is not linked to this constraint");
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_WeldJoint
});
var nape_dynamics_Arbiter = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate Arbiter derp!");
};
$hxClasses["nape.dynamics.Arbiter"] = nape_dynamics_Arbiter;
nape_dynamics_Arbiter.__name__ = true;
nape_dynamics_Arbiter.prototype = {
	get_isSleeping: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		return this.zpp_inner.sleeping;
	}
	,get_type: function() {
		return zpp_$nape_dynamics_ZPP_$Arbiter.types[this.zpp_inner.type];
	}
	,isCollisionArbiter: function() {
		return this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL;
	}
	,isFluidArbiter: function() {
		return this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
	}
	,isSensorArbiter: function() {
		return this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR;
	}
	,get_collisionArbiter: function() {
		if(this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) return this.zpp_inner.colarb.outer_zn; else return null;
	}
	,get_fluidArbiter: function() {
		if(this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) return this.zpp_inner.fluidarb.outer_zn; else return null;
	}
	,get_shape1: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws2.outer; else return this.zpp_inner.ws1.outer;
	}
	,get_shape2: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws1.outer; else return this.zpp_inner.ws2.outer;
	}
	,get_body1: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b2.outer; else return this.zpp_inner.b1.outer;
	}
	,get_body2: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b1.outer; else return this.zpp_inner.b2.outer;
	}
	,get_state: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		var _g = this.zpp_inner.immState;
		var x = _g;
		if(x == (zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS)) {
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
		} else {
			var x1 = _g;
			switch(_g) {
			case 1:
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
			default:
				if(x1 == (zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS)) {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
				} else {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
				}
			}
		}
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: Arbiter does not relate to body");
		return nape_geom_Vec3.get(0,0,0);
	}
	,toString: function() {
		var ret;
		if(this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) ret = "CollisionArbiter"; else if(this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) ret = "FluidArbiter"; else ret = "SensorArbiter";
		if(this.zpp_inner.cleared) return ret + "(object-pooled)"; else return ret + "(" + ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
			return $r;
		}(this))).toString() + "|" + ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
			return $r;
		}(this))).toString() + ")" + (this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL?"[" + ["SD","DD"][this.zpp_inner.colarb.stat?0:1] + "]":"") + "<-" + this.get_state().toString();
	}
	,__class__: nape_dynamics_Arbiter
};
var nape_dynamics_ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ArbiterList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Arbiter" + "Iterator derp!");
};
$hxClasses["nape.dynamics.ArbiterIterator"] = nape_dynamics_ArbiterIterator;
nape_dynamics_ArbiterIterator.__name__ = true;
nape_dynamics_ArbiterIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ArbiterIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ArbiterList.internal = true;
		var ret1 = new nape_dynamics_ArbiterIterator();
		zpp_$nape_util_ZPP_$ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ArbiterIterator.zpp_pool;
		nape_dynamics_ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ArbiterIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ArbiterIterator
};
var nape_dynamics_ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ArbiterList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.ArbiterList"] = nape_dynamics_ArbiterList;
nape_dynamics_ArbiterList.__name__ = true;
nape_dynamics_ArbiterList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_dynamics_ArbiterList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_dynamics_ArbiterList.prototype = {
	get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.head;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite.elt;
				if(x1.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Arbiter" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Arbiter" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Arbiter" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.empty()) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Arbiter" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.empty()) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Arbiter" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Arbiter" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_dynamics_ArbiterIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_dynamics_ArbiterList();
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "Arbiter" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g = xs.iterator();
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) this.add(x);
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_dynamics_ArbiterList
};
var nape_dynamics_ArbiterType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ArbiterType" + " derp!");
};
$hxClasses["nape.dynamics.ArbiterType"] = nape_dynamics_ArbiterType;
nape_dynamics_ArbiterType.__name__ = true;
nape_dynamics_ArbiterType.get_COLLISION = function() {
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION;
};
nape_dynamics_ArbiterType.get_SENSOR = function() {
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR;
};
nape_dynamics_ArbiterType.get_FLUID = function() {
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID;
};
nape_dynamics_ArbiterType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID;
			return $r;
		}(this))) return "FLUID"; else return "";
	}
	,__class__: nape_dynamics_ArbiterType
};
var nape_dynamics_CollisionArbiter = function() {
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate CollisionArbiter derp!");
	nape_dynamics_Arbiter.call(this);
};
$hxClasses["nape.dynamics.CollisionArbiter"] = nape_dynamics_CollisionArbiter;
nape_dynamics_CollisionArbiter.__name__ = true;
nape_dynamics_CollisionArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_CollisionArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	get_contacts: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(this.zpp_inner.colarb.wrap_contacts == null) this.zpp_inner.colarb.setupcontacts();
		return this.zpp_inner.colarb.wrap_contacts;
	}
	,get_normal: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(this.zpp_inner.colarb.wrap_normal == null) this.zpp_inner.colarb.getnormal();
		return this.zpp_inner.colarb.wrap_normal;
	}
	,get_radius: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		return this.zpp_inner.colarb.radius;
	}
	,get_referenceEdge1: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
			return $r;
		}(this))).isPolygon() || ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
			return $r;
		}(this))).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		if(edge == null) return null; else return edge.wrapper();
	}
	,get_referenceEdge2: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
			return $r;
		}(this))).isPolygon() || ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
			return $r;
		}(this))).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		if(edge == null) return null; else return edge.wrapper();
	}
	,firstVertex: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == -1; else return false;
	}
	,secondVertex: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == 1; else return false;
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: Arbiter does not relate to body");
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().normalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().normalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: Arbiter does not relate to body");
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().tangentImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().tangentImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: Arbiter does not relate to body");
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().totalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().totalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: Arbiter does not relate to body");
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) return colarb.oc1.wrapper().rollingImpulse(body); else return 0.0;
	}
	,get_elasticity: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.restitution;
	}
	,set_elasticity: function(elasticity) {
		if(!this.zpp_inner.colarb.mutable) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "elasticity" + " is only mutable during a pre-handler");
		if(elasticity != elasticity) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "elasticity" + " cannot be NaN");
		if(elasticity < 0) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "elasticity" + " cannot be negative");
		var colarb = this.zpp_inner.colarb;
		colarb.restitution = elasticity;
		colarb.userdef_restitution = true;
		return this.get_elasticity();
	}
	,get_dynamicFriction: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.dyn_fric;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		if(!this.zpp_inner.colarb.mutable) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "dynamicFriction" + " is only mutable during a pre-handler");
		if(dynamicFriction != dynamicFriction) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "dynamicFriction" + " cannot be NaN");
		if(dynamicFriction < 0) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "dynamicFriction" + " cannot be negative");
		var colarb = this.zpp_inner.colarb;
		colarb.dyn_fric = dynamicFriction;
		colarb.userdef_dyn_fric = true;
		return this.get_dynamicFriction();
	}
	,get_staticFriction: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.stat_fric;
	}
	,set_staticFriction: function(staticFriction) {
		if(!this.zpp_inner.colarb.mutable) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "staticFriction" + " is only mutable during a pre-handler");
		if(staticFriction != staticFriction) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "staticFriction" + " cannot be NaN");
		if(staticFriction < 0) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "staticFriction" + " cannot be negative");
		var colarb = this.zpp_inner.colarb;
		colarb.stat_fric = staticFriction;
		colarb.userdef_stat_fric = true;
		return this.get_staticFriction();
	}
	,get_rollingFriction: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.rfric;
	}
	,set_rollingFriction: function(rollingFriction) {
		if(!this.zpp_inner.colarb.mutable) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "rollingFriction" + " is only mutable during a pre-handler");
		if(rollingFriction != rollingFriction) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "rollingFriction" + " cannot be NaN");
		if(rollingFriction < 0) throw new js__$Boot_HaxeError("Error: CollisionArbiter::" + "rollingFriction" + " cannot be negative");
		var colarb = this.zpp_inner.colarb;
		colarb.rfric = rollingFriction;
		colarb.userdef_rfric = true;
		return this.get_rollingFriction();
	}
	,__class__: nape_dynamics_CollisionArbiter
});
var nape_dynamics_Contact = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_dynamics_ZPP_$Contact.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate Contact derp!");
};
$hxClasses["nape.dynamics.Contact"] = nape_dynamics_Contact;
nape_dynamics_Contact.__name__ = true;
nape_dynamics_Contact.prototype = {
	get_arbiter: function() {
		if(this.zpp_inner.arbiter == null) return null; else return this.zpp_inner.arbiter.outer.get_collisionArbiter();
	}
	,get_penetration: function() {
		if(this.zpp_inner.inactiveme()) throw new js__$Boot_HaxeError("Error: Contact not currently in use");
		return -this.zpp_inner.dist;
	}
	,get_position: function() {
		if(this.zpp_inner.inactiveme()) throw new js__$Boot_HaxeError("Error: Contact not currently in use");
		if(this.zpp_inner.wrap_position == null) this.zpp_inner.getposition();
		return this.zpp_inner.wrap_position;
	}
	,get_fresh: function() {
		if(this.zpp_inner.inactiveme()) throw new js__$Boot_HaxeError("Error: Contact not currently in use");
		return this.zpp_inner.fresh;
	}
	,normalImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw new js__$Boot_HaxeError("Error: Contact not currently in use");
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		if(body == null) return nape_geom_Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc); else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw new js__$Boot_HaxeError("Error: Contact does not relate to the given body");
			if(body == colarb.b1.outer) return nape_geom_Vec3.get(colarb.nx * -jnAcc,colarb.ny * -jnAcc,-(colarb.ny * cin.r1x - colarb.nx * cin.r1y) * jnAcc); else return nape_geom_Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc,(colarb.ny * cin.r2x - colarb.nx * cin.r2y) * jnAcc);
		}
	}
	,tangentImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw new js__$Boot_HaxeError("Error: Contact not currently in use");
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jtAcc = cin.jtAcc;
		if(body == null) return nape_geom_Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc); else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw new js__$Boot_HaxeError("Error: Contact does not relate to the given body");
			if(body == colarb.b1.outer) return nape_geom_Vec3.get(colarb.ny * jtAcc,-colarb.nx * jtAcc,-(cin.r1x * colarb.nx + cin.r1y * colarb.ny) * jtAcc); else return nape_geom_Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc,(cin.r2x * colarb.nx + cin.r2y * colarb.ny) * jtAcc);
		}
	}
	,rollingImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw new js__$Boot_HaxeError("Error: Contact not currently in use");
		var colarb = this.zpp_inner.arbiter.colarb;
		var jrAcc = this.zpp_inner.arbiter.colarb.jrAcc;
		if(body == null) return jrAcc; else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw new js__$Boot_HaxeError("Error: Contact does not relate to the given body");
			if(body == colarb.b1.outer) return -jrAcc; else return jrAcc;
		}
	}
	,totalImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw new js__$Boot_HaxeError("Error: Contact not currently in use");
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		var jtAcc = cin.jtAcc;
		var jrAcc = colarb.jrAcc;
		if(body == null) return nape_geom_Vec3.get(colarb.nx * jnAcc - colarb.ny * jtAcc,colarb.ny * jnAcc + colarb.nx * jtAcc,jrAcc); else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw new js__$Boot_HaxeError("Error: Contact does not relate to the given body");
			var jx = colarb.nx * jnAcc - colarb.ny * jtAcc;
			var jy = colarb.ny * jnAcc + colarb.nx * jtAcc;
			if(body == colarb.b1.outer) return nape_geom_Vec3.get(-jx,-jy,-(jy * cin.r1x - jx * cin.r1y) - jrAcc); else return nape_geom_Vec3.get(jx,jy,jy * cin.r2x - jx * cin.r2y + jrAcc);
		}
	}
	,get_friction: function() {
		if(this.zpp_inner.inactiveme()) throw new js__$Boot_HaxeError("Error: Contact not currently in use");
		return this.zpp_inner.inner.friction;
	}
	,toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) return "{object-pooled}"; else return "{Contact}";
	}
	,__class__: nape_dynamics_Contact
};
var nape_dynamics_ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ContactList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Contact" + "Iterator derp!");
};
$hxClasses["nape.dynamics.ContactIterator"] = nape_dynamics_ContactIterator;
nape_dynamics_ContactIterator.__name__ = true;
nape_dynamics_ContactIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ContactIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ContactList.internal = true;
		var ret1 = new nape_dynamics_ContactIterator();
		zpp_$nape_util_ZPP_$ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ContactIterator.zpp_pool;
		nape_dynamics_ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ContactIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
			nape_dynamics_ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ContactIterator
};
var nape_dynamics_ContactList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ContactList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.ContactList"] = nape_dynamics_ContactList;
nape_dynamics_ContactList.__name__ = true;
nape_dynamics_ContactList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_dynamics_ContactList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_dynamics_ContactList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite;
				if(x1.active && x1.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Contact" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Contact" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Contact" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.get_length() == 0) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Contact" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.get_length() == 0) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.next;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Contact" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Contact" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.get_length() == 0)) this.pop(); else while(!(this.get_length() == 0)) this.shift();
	}
	,empty: function() {
		return this.get_length() == 0;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_dynamics_ContactIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_dynamics_ContactList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_dynamics_ContactIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "Contact" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_dynamics_ContactIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_dynamics_ContactIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_dynamics_ContactIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
			nape_dynamics_ContactIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_dynamics_ContactList
};
var nape_dynamics_FluidArbiter = function() {
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate FluidArbiter derp!");
	nape_dynamics_Arbiter.call(this);
};
$hxClasses["nape.dynamics.FluidArbiter"] = nape_dynamics_FluidArbiter;
nape_dynamics_FluidArbiter.__name__ = true;
nape_dynamics_FluidArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_FluidArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	get_position: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
		return this.zpp_inner.fluidarb.wrap_position;
	}
	,set_position: function(position) {
		if(!this.zpp_inner.fluidarb.mutable) throw new js__$Boot_HaxeError("Error: Arbiter is mutable only within a pre-handler");
		if(position == null) throw new js__$Boot_HaxeError("Error: FluidArbiter::position cannot be null");
		((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			if($this.zpp_inner.fluidarb.wrap_position == null) $this.zpp_inner.fluidarb.getposition();
			$r = $this.zpp_inner.fluidarb.wrap_position;
			return $r;
		}(this))).set(position);
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
		return this.zpp_inner.fluidarb.wrap_position;
	}
	,get_overlap: function() {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		return this.zpp_inner.fluidarb.overlap;
	}
	,set_overlap: function(overlap) {
		if(!this.zpp_inner.fluidarb.mutable) throw new js__$Boot_HaxeError("Error: Arbiter is mutable only within a pre-handler");
		if(overlap != overlap) throw new js__$Boot_HaxeError("Error: FluidArbiter::overlap cannot be NaN");
		if(overlap <= 0 || overlap == Infinity) throw new js__$Boot_HaxeError("Error: FluidArbiter::overlap must be strictly positive and non infinite");
		this.zpp_inner.fluidarb.overlap = overlap;
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		return this.zpp_inner.fluidarb.overlap;
	}
	,buoyancyImpulse: function(body) {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: Arbiter does not relate to body");
		var farb = this.zpp_inner.fluidarb;
		if(body == null) return nape_geom_Vec3.get(farb.buoyx,farb.buoyy,0); else if(body.zpp_inner == this.zpp_inner.b2) return nape_geom_Vec3.get(farb.buoyx,farb.buoyy,farb.buoyy * farb.r2x - farb.buoyx * farb.r2y); else return nape_geom_Vec3.get(-farb.buoyx,-farb.buoyy,-(farb.buoyy * farb.r1x - farb.buoyx * farb.r1y));
	}
	,dragImpulse: function(body) {
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: Arbiter does not relate to body");
		var farb = this.zpp_inner.fluidarb;
		var scale;
		if(body == null || body.zpp_inner == this.zpp_inner.b2) scale = 1; else scale = -1;
		return nape_geom_Vec3.get(farb.dampx * scale,farb.dampy * scale,farb.adamp * scale);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: Arbiter does not relate to body");
		var tmp = this.buoyancyImpulse(body);
		var ret = this.dragImpulse(body);
		var _g = ret;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(tmp != null && tmp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.x;
			return $r;
		}(this)));
		var _g1 = ret;
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(tmp != null && tmp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.y;
			return $r;
		}(this)));
		var _g2 = ret;
		_g2.set_z((function($this) {
			var $r;
			if(_g2 != null && _g2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			_g2.zpp_inner.validate();
			$r = _g2.zpp_inner.z;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(tmp != null && tmp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.z;
			return $r;
		}(this)));
		tmp.dispose();
		return ret;
	}
	,__class__: nape_dynamics_FluidArbiter
});
var nape_dynamics_InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) fluidMask = -1;
	if(fluidGroup == null) fluidGroup = 1;
	if(sensorMask == null) sensorMask = -1;
	if(sensorGroup == null) sensorGroup = 1;
	if(collisionMask == null) collisionMask = -1;
	if(collisionGroup == null) collisionGroup = 1;
	this.zpp_inner = null;
	if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionFilter(); else {
		this.zpp_inner = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionGroup;
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionMask;
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorGroup;
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorMask;
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidGroup;
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidMask;
};
$hxClasses["nape.dynamics.InteractionFilter"] = nape_dynamics_InteractionFilter;
nape_dynamics_InteractionFilter.__name__ = true;
nape_dynamics_InteractionFilter.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,get_collisionGroup: function() {
		return this.zpp_inner.collisionGroup;
	}
	,set_collisionGroup: function(collisionGroup) {
		if(this.zpp_inner.collisionGroup != collisionGroup) {
			this.zpp_inner.collisionGroup = collisionGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionGroup;
	}
	,get_collisionMask: function() {
		return this.zpp_inner.collisionMask;
	}
	,set_collisionMask: function(collisionMask) {
		if(this.zpp_inner.collisionMask != collisionMask) {
			this.zpp_inner.collisionMask = collisionMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionMask;
	}
	,get_sensorGroup: function() {
		return this.zpp_inner.sensorGroup;
	}
	,set_sensorGroup: function(sensorGroup) {
		if(this.zpp_inner.sensorGroup != sensorGroup) {
			this.zpp_inner.sensorGroup = sensorGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorGroup;
	}
	,get_sensorMask: function() {
		return this.zpp_inner.sensorMask;
	}
	,set_sensorMask: function(sensorMask) {
		if(this.zpp_inner.sensorMask != sensorMask) {
			this.zpp_inner.sensorMask = sensorMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorMask;
	}
	,get_fluidGroup: function() {
		return this.zpp_inner.fluidGroup;
	}
	,set_fluidGroup: function(fluidGroup) {
		if(this.zpp_inner.fluidGroup != fluidGroup) {
			this.zpp_inner.fluidGroup = fluidGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidGroup;
	}
	,get_fluidMask: function() {
		return this.zpp_inner.fluidMask;
	}
	,set_fluidMask: function(fluidMask) {
		if(this.zpp_inner.fluidMask != fluidMask) {
			this.zpp_inner.fluidMask = fluidMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidMask;
	}
	,shouldCollide: function(filter) {
		if(filter == null) throw new js__$Boot_HaxeError("Error: filter argument cannot be null for shouldCollide");
		return this.zpp_inner.shouldCollide(filter.zpp_inner);
	}
	,shouldSense: function(filter) {
		if(filter == null) throw new js__$Boot_HaxeError("Error: filter argument cannot be null for shouldSense");
		return this.zpp_inner.shouldSense(filter.zpp_inner);
	}
	,shouldFlow: function(filter) {
		if(filter == null) throw new js__$Boot_HaxeError("Error: filter argument cannot be null for shouldFlow");
		return this.zpp_inner.shouldFlow(filter.zpp_inner);
	}
	,copy: function() {
		return new nape_dynamics_InteractionFilter(this.zpp_inner.collisionGroup,this.zpp_inner.collisionMask,this.zpp_inner.sensorGroup,this.zpp_inner.sensorMask,this.zpp_inner.fluidGroup,this.zpp_inner.fluidMask);
	}
	,toString: function() {
		return "{ collision: " + StringTools.hex(this.zpp_inner.collisionGroup,8) + "~" + StringTools.hex(this.zpp_inner.collisionMask,8) + " sensor: " + StringTools.hex(this.zpp_inner.sensorGroup,8) + "~" + StringTools.hex(this.zpp_inner.sensorMask,8) + " fluid: " + StringTools.hex(this.zpp_inner.fluidGroup,8) + "~" + StringTools.hex(this.zpp_inner.fluidMask,8) + " }";
	}
	,__class__: nape_dynamics_InteractionFilter
};
var nape_dynamics_InteractionGroup = function(ignore) {
	if(ignore == null) ignore = false;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionGroup();
	this.zpp_inner.outer = this;
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
	this.zpp_inner.ignore;
};
$hxClasses["nape.dynamics.InteractionGroup"] = nape_dynamics_InteractionGroup;
nape_dynamics_InteractionGroup.__name__ = true;
nape_dynamics_InteractionGroup.prototype = {
	get_group: function() {
		if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
	}
	,set_group: function(group) {
		if(group == this) throw new js__$Boot_HaxeError("Error: Cannot assign InteractionGroup to itself");
		this.zpp_inner.setGroup(group == null?null:group.zpp_inner);
		if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.invalidate(true);
			this.zpp_inner.ignore = ignore;
		}
		return this.zpp_inner.ignore;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_$nape_util_ZPP_$InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,get_groups: function() {
		if(this.zpp_inner.wrap_groups == null) this.zpp_inner.wrap_groups = zpp_$nape_util_ZPP_$InteractionGroupList.get(this.zpp_inner.groups,true);
		return this.zpp_inner.wrap_groups;
	}
	,toString: function() {
		var ret = "InteractionGroup";
		if(this.zpp_inner.ignore) ret += ":ignore";
		return ret;
	}
	,__class__: nape_dynamics_InteractionGroup
};
var nape_dynamics_InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$InteractionGroupList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "InteractionGroup" + "Iterator derp!");
};
$hxClasses["nape.dynamics.InteractionGroupIterator"] = nape_dynamics_InteractionGroupIterator;
nape_dynamics_InteractionGroupIterator.__name__ = true;
nape_dynamics_InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape_dynamics_InteractionGroupIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = true;
		var ret1 = new nape_dynamics_InteractionGroupIterator();
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_InteractionGroupIterator.zpp_pool;
		nape_dynamics_InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_InteractionGroupIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
			nape_dynamics_InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_InteractionGroupIterator
};
var nape_dynamics_InteractionGroupList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractionGroupList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.InteractionGroupList"] = nape_dynamics_InteractionGroupList;
nape_dynamics_InteractionGroupList.__name__ = true;
nape_dynamics_InteractionGroupList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_dynamics_InteractionGroupList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_dynamics_InteractionGroupList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "InteractionGroup" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "InteractionGroup" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "InteractionGroup" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "InteractionGroup" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "InteractionGroup" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "InteractionGroup" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_dynamics_InteractionGroupIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_dynamics_InteractionGroupList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_dynamics_InteractionGroupIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "InteractionGroup" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_dynamics_InteractionGroupIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_dynamics_InteractionGroupIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_dynamics_InteractionGroupIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
			nape_dynamics_InteractionGroupIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_dynamics_InteractionGroupList
};
var nape_geom_AABB = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_inner = null;
	if(x != x || y != y) throw new js__$Boot_HaxeError("Error: AABB position cannot be NaN");
	if(width != width || height != height) throw new js__$Boot_HaxeError("Error: AABB dimensions cannot be NaN");
	this.zpp_inner = zpp_$nape_geom_ZPP_$AABB.get(x,y,x + width,y + height);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.AABB"] = nape_geom_AABB;
nape_geom_AABB.__name__ = true;
nape_geom_AABB.prototype = {
	copy: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.copy().wrapper();
	}
	,get_min: function() {
		return this.zpp_inner.getmin();
	}
	,set_min: function(min) {
		if(min != null && min.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(this.zpp_inner._immutable) throw new js__$Boot_HaxeError("Error: AABB is immutable");
		if(min == null) throw new js__$Boot_HaxeError("Error: Cannot assign null to AABB::" + "min");
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) || (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: AABB::" + "min" + " components cannot be NaN");
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			min.zpp_inner.validate();
			$r = min.zpp_inner.x;
			return $r;
		}(this)) > this.zpp_inner.getmax().get_x()) throw new js__$Boot_HaxeError("Error: Assignment would cause negative width");
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			min.zpp_inner.validate();
			$r = min.zpp_inner.y;
			return $r;
		}(this)) > this.zpp_inner.getmax().get_y()) throw new js__$Boot_HaxeError("Error: Assignment would cause negative height");
		this.zpp_inner.getmin().set(min);
		return this.zpp_inner.getmin();
	}
	,get_max: function() {
		return this.zpp_inner.getmax();
	}
	,set_max: function(max) {
		if(max != null && max.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(this.zpp_inner._immutable) throw new js__$Boot_HaxeError("Error: AABB is immutable");
		if(max == null) throw new js__$Boot_HaxeError("Error: Cannot assign null to AABB::" + "max");
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) || (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: AABB::" + "max" + " components cannot be NaN");
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			max.zpp_inner.validate();
			$r = max.zpp_inner.x;
			return $r;
		}(this)) < this.zpp_inner.getmin().get_x()) throw new js__$Boot_HaxeError("Error: Assignment would cause negative width");
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			max.zpp_inner.validate();
			$r = max.zpp_inner.y;
			return $r;
		}(this)) < this.zpp_inner.getmin().get_y()) throw new js__$Boot_HaxeError("Error: Assignment would cause negative height");
		this.zpp_inner.getmax().set(max);
		return this.zpp_inner.getmax();
	}
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.minx;
	}
	,set_x: function(x) {
		if(this.zpp_inner._immutable) throw new js__$Boot_HaxeError("Error: AABB is immutable");
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != x) {
			if(x != x) throw new js__$Boot_HaxeError("Error: AABB::" + "x" + " cannot be NaN");
			this.zpp_inner.maxx += x - this.zpp_inner.minx;
			this.zpp_inner.minx = x;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.minx;
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.miny;
	}
	,set_y: function(y) {
		if(this.zpp_inner._immutable) throw new js__$Boot_HaxeError("Error: AABB is immutable");
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != y) {
			if(y != y) throw new js__$Boot_HaxeError("Error: AABB::" + "y" + " cannot be NaN");
			this.zpp_inner.maxy += y - this.zpp_inner.miny;
			this.zpp_inner.miny = y;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.miny;
	}
	,get_width: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.width();
	}
	,set_width: function(width) {
		if(this.zpp_inner._immutable) throw new js__$Boot_HaxeError("Error: AABB is immutable");
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.width();
			return $r;
		}(this)) != width) {
			if(width != width) throw new js__$Boot_HaxeError("Error: AABB::" + "width" + " cannot be NaN");
			if(width < 0) throw new js__$Boot_HaxeError("Error: AABB::" + "width" + " (" + width + ") must be >= 0");
			this.zpp_inner.maxx = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.minx;
				return $r;
			}(this)) + width;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.width();
	}
	,get_height: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.height();
	}
	,set_height: function(height) {
		if(this.zpp_inner._immutable) throw new js__$Boot_HaxeError("Error: AABB is immutable");
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.height();
			return $r;
		}(this)) != height) {
			if(height != height) throw new js__$Boot_HaxeError("Error: AABB::" + "height" + " cannot be NaN");
			if(height < 0) throw new js__$Boot_HaxeError("Error: AABB::" + "height" + " (" + height + ") must be >= 0");
			this.zpp_inner.maxy = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.miny;
				return $r;
			}(this)) + height;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.height();
	}
	,toString: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_AABB
};
var nape_geom_ConvexResult = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_geom_ZPP_$ConvexRayResult.internal) throw new js__$Boot_HaxeError("Error: ConvexResult cannot be instantiated derp!");
};
$hxClasses["nape.geom.ConvexResult"] = nape_geom_ConvexResult;
nape_geom_ConvexResult.__name__ = true;
nape_geom_ConvexResult.prototype = {
	get_normal: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return this.zpp_inner.normal;
	}
	,get_position: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return this.zpp_inner.position;
	}
	,get_toi: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return this.zpp_inner.toiDistance;
	}
	,get_shape: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return this.zpp_inner.shape;
	}
	,dispose: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		this.zpp_inner.free();
	}
	,toString: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return "{ shape: " + Std.string((function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
			$r = $this.zpp_inner.shape;
			return $r;
		}(this))) + " toi: " + (function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
			$r = $this.zpp_inner.toiDistance;
			return $r;
		}(this)) + " }";
	}
	,__class__: nape_geom_ConvexResult
};
var nape_geom_ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ConvexResultList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ConvexResult" + "Iterator derp!");
};
$hxClasses["nape.geom.ConvexResultIterator"] = nape_geom_ConvexResultIterator;
nape_geom_ConvexResultIterator.__name__ = true;
nape_geom_ConvexResultIterator.get = function(list) {
	var ret;
	if(nape_geom_ConvexResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConvexResultList.internal = true;
		var ret1 = new nape_geom_ConvexResultIterator();
		zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_ConvexResultIterator.zpp_pool;
		nape_geom_ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_ConvexResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
			nape_geom_ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_ConvexResultIterator
};
var nape_geom_ConvexResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConvexResultList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.ConvexResultList"] = nape_geom_ConvexResultList;
nape_geom_ConvexResultList.__name__ = true;
nape_geom_ConvexResultList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_geom_ConvexResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_ConvexResultList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "ConvexResult" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "ConvexResult" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "ConvexResult" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "ConvexResult" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "ConvexResult" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "ConvexResult" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_geom_ConvexResultIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_geom_ConvexResultList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_ConvexResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "ConvexResult" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_geom_ConvexResultIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_ConvexResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_geom_ConvexResultIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
			nape_geom_ConvexResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_geom_ConvexResultList
};
var nape_geom_Geom = function() { };
$hxClasses["nape.geom.Geom"] = nape_geom_Geom;
nape_geom_Geom.__name__ = true;
nape_geom_Geom.distanceBody = function(body1,body2,out1,out2) {
	if(out1 != null && out1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(out2 != null && out2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	out1.zpp_inner.immutable();
	out2.zpp_inner.immutable();
	if(body1.zpp_inner.wrap_shapes.empty() || body2.zpp_inner.wrap_shapes.empty()) throw new js__$Boot_HaxeError("Error: Bodies cannot be empty in calculating distances");
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_$nape_geom_ZPP_$Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_$nape_geom_ZPP_$Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	return zpp_$nape_geom_ZPP_$SweepDistance.distanceBody(body1.zpp_inner,body2.zpp_inner,out1.zpp_inner,out2.zpp_inner);
};
nape_geom_Geom.distance = function(shape1,shape2,out1,out2) {
	if(out1 != null && out1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(out2 != null && out2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	out1.zpp_inner.immutable();
	out2.zpp_inner.immutable();
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw new js__$Boot_HaxeError("Error: Shape must be part of a Body to calculate distances");
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape1.zpp_inner);
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape2.zpp_inner);
	var tmp;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) tmp = new zpp_$nape_geom_ZPP_$Vec2(); else {
		tmp = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = tmp.next;
		tmp.next = null;
	}
	tmp.weak = false;
	var ret = zpp_$nape_geom_ZPP_$SweepDistance.distance(shape1.zpp_inner,shape2.zpp_inner,out1.zpp_inner,out2.zpp_inner,tmp,1e100);
	var o = tmp;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
	zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	return ret;
};
nape_geom_Geom.intersectsBody = function(body1,body2) {
	if(body1.zpp_inner.wrap_shapes.empty() || body2.zpp_inner.wrap_shapes.empty()) throw new js__$Boot_HaxeError("Error: Bodies must have shapes to test for intersection.");
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_$nape_geom_ZPP_$Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_$nape_geom_ZPP_$Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	if(!body1.zpp_inner.aabb.intersect(body2.zpp_inner.aabb)) return false; else {
		var cx_ite2 = body1.zpp_inner.shapes.head;
		while(cx_ite2 != null) {
			var s1 = cx_ite2.elt;
			var cx_ite3 = body2.zpp_inner.shapes.head;
			while(cx_ite3 != null) {
				var s2 = cx_ite3.elt;
				if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(s1,s2)) return true;
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
		return false;
	}
};
nape_geom_Geom.intersects = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw new js__$Boot_HaxeError("Error: Shape must be part of a Body to calculate intersection");
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape1.zpp_inner);
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape2.zpp_inner);
	return shape1.zpp_inner.aabb.intersect(shape2.zpp_inner.aabb) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape1.zpp_inner,shape2.zpp_inner);
};
nape_geom_Geom.contains = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw new js__$Boot_HaxeError("Error: Shape must be part of a Body to calculate containment");
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape1.zpp_inner);
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape2.zpp_inner);
	return zpp_$nape_geom_ZPP_$Collide.containTest(shape1.zpp_inner,shape2.zpp_inner);
};
var nape_geom_GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw new js__$Boot_HaxeError("Error: Array<Vec2> contains null objects");
				if(!js_Boot.__instanceof(vite,nape_geom_Vec2)) throw new js__$Boot_HaxeError("Error: Array<Vec2> contains non Vec2 objects");
				var v = vite;
				if(v != null && v.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				var obj = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) throw new js__$Boot_HaxeError("Error: Vec2List contains null objects");
				if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape_geom_Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else throw new js__$Boot_HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
$hxClasses["nape.geom.GeomPoly"] = nape_geom_GeomPoly;
nape_geom_GeomPoly.__name__ = true;
nape_geom_GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolGeomPoly == null) ret = new nape_geom_GeomPoly(); else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolGeomPoly;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextGeomPoly) zpp_$nape_util_ZPP_$PubPool.nextGeomPoly = null;
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw new js__$Boot_HaxeError("Error: Array<Vec2> contains null objects");
				if(!js_Boot.__instanceof(vite,nape_geom_Vec2)) throw new js__$Boot_HaxeError("Error: Array<Vec2> contains non Vec2 objects");
				var v = vite;
				if(v != null && v.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				var obj = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) throw new js__$Boot_HaxeError("Error: Vec2List contains null objects");
				if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v1 != null && v1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape_geom_Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v2 != null && v2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else throw new js__$Boot_HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
nape_geom_GeomPoly.prototype = {
	empty: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		return this.zpp_inner.vertices == null;
	}
	,size: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		var ret = 0;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var i = nite;
				ret++;
				nite = nite.next;
			} while(nite != L);
		}
		return ret;
	}
	,iterator: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		return zpp_$nape_geom_ZPP_$GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,forwardIterator: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		return zpp_$nape_geom_ZPP_$GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,backwardsIterator: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		return zpp_$nape_geom_ZPP_$GeomVertexIterator.get(this.zpp_inner.vertices,false);
	}
	,current: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: GeomPoly is empty");
		return this.zpp_inner.vertices.wrapper();
	}
	,push: function(vertex) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(vertex != null && vertex.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vertex == null) throw new js__$Boot_HaxeError("Error: Cannot push null vertex");
		var obj = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
			var $r;
			if(vertex != null && vertex.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vertex != null && vertex.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.y;
			return $r;
		}(this)));
		if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.prev = this.zpp_inner.vertices;
			obj.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = obj;
			this.zpp_inner.vertices.next = obj;
		}
		this.zpp_inner.vertices = obj;
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,pop: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null) throw new js__$Boot_HaxeError("Error: Cannot pop from empty polygon");
		var retv = this.zpp_inner.vertices;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			this.zpp_inner.vertices = retnodes;
		}
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		return this;
	}
	,unshift: function(vertex) {
		if(vertex != null && vertex.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vertex == null) throw new js__$Boot_HaxeError("Error: Cannot unshift null vertex");
		var obj = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
			var $r;
			if(vertex != null && vertex.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vertex != null && vertex.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.y;
			return $r;
		}(this)));
		if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.next = this.zpp_inner.vertices;
			obj.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.prev.next = obj;
			this.zpp_inner.vertices.prev = obj;
		}
		this.zpp_inner.vertices = obj;
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,shift: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null) throw new js__$Boot_HaxeError("Error: Cannot shift from empty polygon");
		var retv = this.zpp_inner.vertices;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			this.zpp_inner.vertices = retnodes;
		}
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		return this;
	}
	,skipForward: function(times) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(!(this.zpp_inner.vertices == null)) {
			if(times > 0) while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next; else if(times < 0) while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
		}
		return this;
	}
	,skipBackwards: function(times) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		return this.skipForward(-times);
	}
	,erase: function(count) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		while(count != 0 && !(this.zpp_inner.vertices == null)) {
			var retv = this.zpp_inner.vertices;
			if(count > 0) {
				if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = this.zpp_inner.vertices = null;
				} else {
					var retnodes = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
					this.zpp_inner.vertices = retnodes;
				}
				count--;
			} else if(count < 0) {
				if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
				} else {
					var retnodes1 = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
					this.zpp_inner.vertices = retnodes1;
				}
				count++;
			}
			var o = retv;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		}
		return this;
	}
	,clear: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		while(!(this.zpp_inner.vertices == null)) {
			var tmp = this.zpp_inner.vertices;
			if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = this.zpp_inner.vertices = null;
			} else {
				var retnodes = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = null;
				this.zpp_inner.vertices = retnodes;
			}
			var o = tmp;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		}
		return this;
	}
	,copy: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		var ret = nape_geom_GeomPoly.get();
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var obj = zpp_$nape_geom_ZPP_$GeomVert.get(v.x,v.y);
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,dispose: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		this.clear();
		var o = this;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextGeomPoly != null) zpp_$nape_util_ZPP_$PubPool.nextGeomPoly.zpp_pool = o; else zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = o;
		zpp_$nape_util_ZPP_$PubPool.nextGeomPoly = o;
		o.zpp_disp = true;
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v != this.zpp_inner.vertices) ret += ",";
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
			} while(nite != L);
		}
		return ret + "]";
	}
	,area: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return 0.0; else {
			var ret;
			var area = 0.0;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
			ret = area * 0.5;
			if(ret < 0) return -ret; else return ret;
		}
	}
	,winding: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
			if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED;
		} else {
			var area;
			var area1 = 0.0;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area1 += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
			area = area1 * 0.5;
			if(area > 0) {
				if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
			} else if(area == 0) {
				if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED;
			} else {
				if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE;
			}
		}
	}
	,contains: function(point) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(point == null) throw new js__$Boot_HaxeError("Error: GeomPoly::contains point cannot be null");
		var ret;
		var x;
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		point.zpp_inner.validate();
		x = point.zpp_inner.x;
		var y;
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		point.zpp_inner.validate();
		y = point.zpp_inner.y;
		var ret1 = false;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				var q = p.prev;
				if((p.y < y && q.y >= y || q.y < y && p.y >= y) && (p.x <= x || q.x <= x)) {
					if(p.x + (y - p.y) / (q.y - p.y) * (q.x - p.x) < x) ret1 = !ret1;
				}
				nite = nite.next;
			} while(nite != L);
		}
		ret = ret1;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,isClockwise: function() {
		return this.winding() == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
			return $r;
		}(this));
	}
	,isConvex: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else {
			var neg = false;
			var pos = false;
			var ret = true;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					var u = v.prev;
					var w = v.next;
					var ax = 0.0;
					var ay = 0.0;
					ax = w.x - v.x;
					ay = w.y - v.y;
					var bx = 0.0;
					var by = 0.0;
					bx = v.x - u.x;
					by = v.y - u.y;
					var dot = by * ax - bx * ay;
					if(dot > 0.0) pos = true; else if(dot < 0.0) neg = true;
					if(pos && neg) {
						ret = false;
						break;
					}
					nite = nite.next;
				} while(nite != L);
			}
			return ret;
		}
	}
	,isSimple: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_$nape_geom_ZPP_$Simple.isSimple(this.zpp_inner.vertices);
	}
	,isMonotone: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_$nape_geom_ZPP_$Monotone.isMonotone(this.zpp_inner.vertices);
	}
	,isDegenerate: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return this.area() < nape_Config.epsilon;
	}
	,simplify: function(epsilon) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(epsilon <= 0.0) throw new js__$Boot_HaxeError("Error: Epsilon should be > 0 for simplifying a GeomPoly");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return this.copy(); else {
			var x = zpp_$nape_geom_ZPP_$Simplify.simplify(this.zpp_inner.vertices,epsilon);
			var ret = nape_geom_GeomPoly.get();
			ret.zpp_inner.vertices = x;
			return ret;
		}
	}
	,simpleDecomposition: function(output) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw new js__$Boot_HaxeError("Error: Cannot decompose a degenerate polygon");
		var MPs = zpp_$nape_geom_ZPP_$Simple.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
			$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape_geom_GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,monotoneDecomposition: function(output) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw new js__$Boot_HaxeError("Error: Cannot decompose a degenerate polygon");
		var poly = zpp_$nape_geom_ZPP_$Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$Monotone.sharedPPoly == null) zpp_$nape_geom_ZPP_$Monotone.sharedPPoly = new zpp_$nape_geom_ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract((function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
			$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape_geom_GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,convexDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw new js__$Boot_HaxeError("Error: Cannot decompose a degenerate polygon");
		var poly = zpp_$nape_geom_ZPP_$Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$Monotone.sharedPPoly == null) zpp_$nape_geom_ZPP_$Monotone.sharedPPoly = new zpp_$nape_geom_ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList = new zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_$nape_geom_ZPP_$Triangular.triangulate(MP);
			if(delaunay) zpp_$nape_geom_ZPP_$Triangular.optimise(MP);
			zpp_$nape_geom_ZPP_$Convex.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
				$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape_geom_GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,triangularDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw new js__$Boot_HaxeError("Error: Cannot decompose a degenerate polygon");
		var poly = zpp_$nape_geom_ZPP_$Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$Monotone.sharedPPoly == null) zpp_$nape_geom_ZPP_$Monotone.sharedPPoly = new zpp_$nape_geom_ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList = new zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_$nape_geom_ZPP_$Triangular.triangulate(MP);
			if(delaunay) zpp_$nape_geom_ZPP_$Triangular.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
				$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape_geom_GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,inflate: function(inflation) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		var ret = nape_geom_GeomPoly.get();
		if(this.winding() == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) inflation = -inflation;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				var prev = p.prev;
				var next = p.next;
				var ax = 0.0;
				var ay = 0.0;
				var bx = 0.0;
				var by = 0.0;
				ax = p.x - prev.x;
				ay = p.y - prev.y;
				bx = next.x - p.x;
				by = next.y - p.y;
				var apx = 0.0;
				var apy = 0.0;
				var bpx = 0.0;
				var bpy = 0.0;
				apx = ax;
				apy = ay;
				var d = apx * apx + apy * apy;
				var imag = 1.0 / Math.sqrt(d);
				var t1 = imag;
				apx *= t1;
				apy *= t1;
				var t2 = apx;
				apx = -apy;
				apy = t2;
				var t3 = inflation;
				apx *= t3;
				apy *= t3;
				bpx = bx;
				bpy = by;
				var d1 = bpx * bpx + bpy * bpy;
				var imag1 = 1.0 / Math.sqrt(d1);
				var t4 = imag1;
				bpx *= t4;
				bpy *= t4;
				var t5 = bpx;
				bpx = -bpy;
				bpy = t5;
				var t6 = inflation;
				bpx *= t6;
				bpy *= t6;
				var bapx = 0.0;
				var bapy = 0.0;
				bapx = bpx - apx;
				bapy = bpy - apy;
				var num = by * bapx - bx * bapy;
				var t;
				if(num == 0) t = 0; else t = num / (by * ax - bx * ay);
				var px = 0.0;
				var py = 0.0;
				px = p.x + apx;
				py = p.y + apy;
				var t7 = t;
				px += ax * t7;
				py += ay * t7;
				ret.push(nape_geom_Vec2.get(px,py,null));
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,cut: function(start,end,boundedStart,boundedEnd,output) {
		if(boundedEnd == null) boundedEnd = false;
		if(boundedStart == null) boundedStart = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(!(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			$r = $this.zpp_inner.vertices == null || $this.zpp_inner.vertices.next == null || $this.zpp_inner.vertices.prev == $this.zpp_inner.vertices.next?true:zpp_$nape_geom_ZPP_$Simple.isSimple($this.zpp_inner.vertices);
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: Cut requires a truly simple polygon");
		if(start == null || end == null) throw new js__$Boot_HaxeError("Error: Cannot cut with null start/end's");
		if(start != null && start.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(end != null && end.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		var ret = zpp_$nape_geom_ZPP_$Cutter.run(this.zpp_inner.vertices,start,end,boundedStart,boundedEnd,output);
		if(start.zpp_inner.weak) {
			start.dispose();
			true;
		} else false;
		if(end.zpp_inner.weak) {
			end.dispose();
			true;
		} else false;
		return ret;
	}
	,transform: function(matrix) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if(matrix == null) throw new js__$Boot_HaxeError("Error: Cannot transform by null matrix");
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var t = matrix.zpp_inner.a * v.x + matrix.zpp_inner.b * v.y + matrix.zpp_inner.tx;
				v.y = matrix.zpp_inner.c * v.x + matrix.zpp_inner.d * v.y + matrix.zpp_inner.ty;
				v.x = t;
				nite = nite.next;
			} while(nite != L);
		}
		return this;
	}
	,bounds: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: empty GeomPoly has no defineable bounds");
		var minx = 1e100;
		var miny = 1e100;
		var maxx = -1e+100;
		var maxy = -1e+100;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < minx) minx = v.x;
				if(v.y < miny) miny = v.y;
				if(v.x > maxx) maxx = v.x;
				if(v.y > maxy) maxy = v.y;
				nite = nite.next;
			} while(nite != L);
		}
		return new nape_geom_AABB(minx,miny,maxx - minx,maxy - miny);
	}
	,top: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: empty GeomPoly has no defineable topmost vertex");
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y < min.y) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(min.wrap == null) {
			min.wrap = nape_geom_Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner._inuse = true;
			min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
			min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
		}
		return min.wrap;
	}
	,bottom: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: empty GeomPoly has no defineable bottommost vertex");
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y > max.y) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(max.wrap == null) {
			max.wrap = nape_geom_Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner._inuse = true;
			max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
			max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
		}
		return max.wrap;
	}
	,left: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: empty GeomPoly has no defineable leftmost vertex");
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < min.x) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(min.wrap == null) {
			min.wrap = nape_geom_Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner._inuse = true;
			min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
			min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
		}
		return min.wrap;
	}
	,right: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw new js__$Boot_HaxeError("Error: empty GeomPoly has no defineable rightmmost vertex");
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x > max.x) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(max.wrap == null) {
			max.wrap = nape_geom_Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner._inuse = true;
			max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
			max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
		}
		return max.wrap;
	}
	,__class__: nape_geom_GeomPoly
};
var nape_geom_GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$GeomPolyList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "GeomPoly" + "Iterator derp!");
};
$hxClasses["nape.geom.GeomPolyIterator"] = nape_geom_GeomPolyIterator;
nape_geom_GeomPolyIterator.__name__ = true;
nape_geom_GeomPolyIterator.get = function(list) {
	var ret;
	if(nape_geom_GeomPolyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$GeomPolyList.internal = true;
		var ret1 = new nape_geom_GeomPolyIterator();
		zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_GeomPolyIterator.zpp_pool;
		nape_geom_GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_GeomPolyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
			nape_geom_GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_GeomPolyIterator
};
var nape_geom_GeomPolyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$GeomPolyList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.GeomPolyList"] = nape_geom_GeomPolyList;
nape_geom_GeomPolyList.__name__ = true;
nape_geom_GeomPolyList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_geom_GeomPolyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_GeomPolyList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_geom_GeomPolyIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_geom_GeomPolyList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_GeomPolyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_geom_GeomPolyIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_GeomPolyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_geom_GeomPolyIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
			nape_geom_GeomPolyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_geom_GeomPolyList
};
var nape_geom_GeomVertexIterator = function() {
	if(!zpp_$nape_geom_ZPP_$GeomVertexIterator.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate GeomVertexIterator");
};
$hxClasses["nape.geom.GeomVertexIterator"] = nape_geom_GeomVertexIterator;
nape_geom_GeomVertexIterator.__name__ = true;
nape_geom_GeomVertexIterator.prototype = {
	hasNext: function() {
		if(this.zpp_inner == null) throw new js__$Boot_HaxeError("Error: Iterator has been disposed");
		var ret = this.zpp_inner.ptr != this.zpp_inner.start || this.zpp_inner.first;
		this.zpp_inner.first = false;
		if(!ret) {
			var o = this.zpp_inner;
			o.outer.zpp_inner = null;
			o.ptr = o.start = null;
			o.next = zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool = o;
		}
		return ret;
	}
	,next: function() {
		if(this.zpp_inner == null) throw new js__$Boot_HaxeError("Error: Iterator has been disposed");
		var ret = this.zpp_inner.ptr.wrapper();
		if(this.zpp_inner.forward) this.zpp_inner.ptr = this.zpp_inner.ptr.next; else this.zpp_inner.ptr = this.zpp_inner.ptr.prev;
		return ret;
	}
	,__class__: nape_geom_GeomVertexIterator
};
var nape_geom_MarchingSquares = function() { };
$hxClasses["nape.geom.MarchingSquares"] = nape_geom_MarchingSquares;
nape_geom_MarchingSquares.__name__ = true;
nape_geom_MarchingSquares.run = function(iso,bounds,cellsize,quality,subgrid,combine,output) {
	if(combine == null) combine = true;
	if(quality == null) quality = 2;
	if(cellsize != null && cellsize.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(subgrid != null && subgrid.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(iso == null) throw new js__$Boot_HaxeError("Error: MarchingSquares requires an iso function to operate");
	if(bounds == null) throw new js__$Boot_HaxeError("Error: MarchingSquares requires an AABB to define bounds of surface extraction");
	if(cellsize == null) throw new js__$Boot_HaxeError("Error: MarchingSquares requires a Vec2 to define cell size for surface extraction");
	if((function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.y;
		return $r;
	}(this)) <= 0) throw new js__$Boot_HaxeError("Error: MarchingSquares cannot operate with non-positive cell dimensions");
	if(quality < 0) throw new js__$Boot_HaxeError("Error: MarchingSquares cannot use a negative quality value for interpolation");
	if(subgrid != null && ((function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.y;
		return $r;
	}(this)) <= 0)) throw new js__$Boot_HaxeError("Error: MarchingSquares cannot with non-positive sub-grid dimensions");
	var ret;
	if(output != null) ret = output; else ret = new nape_geom_GeomPolyList();
	if(subgrid == null) zpp_$nape_geom_ZPP_$MarchingSquares.run(iso,(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.minx;
		return $r;
	}(this)),(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.miny;
		return $r;
	}(this)),bounds.zpp_inner.getmax().get_x(),bounds.zpp_inner.getmax().get_y(),cellsize,quality,combine,ret); else {
		var xp;
		xp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.width();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.x;
			return $r;
		}(this));
		var yp;
		yp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.height();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.y;
			return $r;
		}(this));
		var xn = xp | 0;
		var yn = yp | 0;
		if(xn != xp) xn++;
		if(yn != yp) yn++;
		var _g = 0;
		while(_g < xn) {
			var x = _g++;
			var x0;
			x0 = (function($this) {
				var $r;
				bounds.zpp_inner.validate();
				$r = bounds.zpp_inner.minx;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this)) * x;
			var x1;
			if(x == xn - 1) x1 = bounds.zpp_inner.getmax().get_x(); else x1 = x0 + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this));
			var _g1 = 0;
			while(_g1 < yn) {
				var y = _g1++;
				var y0;
				y0 = (function($this) {
					var $r;
					bounds.zpp_inner.validate();
					$r = bounds.zpp_inner.miny;
					return $r;
				}(this)) + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this)) * y;
				var y1;
				if(y == yn - 1) y1 = bounds.zpp_inner.getmax().get_y(); else y1 = y0 + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this));
				zpp_$nape_geom_ZPP_$MarchingSquares.run(iso,x0,y0,x1,y1,cellsize,quality,combine,ret);
			}
		}
	}
	if(cellsize.zpp_inner.weak) {
		cellsize.dispose();
		true;
	} else false;
	if(subgrid != null) {
		if(subgrid.zpp_inner.weak) {
			subgrid.dispose();
			true;
		} else false;
	}
	return ret;
};
var nape_geom_Mat23 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0.0;
	if(tx == null) tx = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.zpp_inner = null;
	this.zpp_inner = zpp_$nape_geom_ZPP_$Mat23.get();
	this.zpp_inner.outer = this;
	if(a != a) throw new js__$Boot_HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
	this.zpp_inner.a = a;
	this.zpp_inner.invalidate();
	this.zpp_inner.a;
	if(b != b) throw new js__$Boot_HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
	this.zpp_inner.b = b;
	this.zpp_inner.invalidate();
	this.zpp_inner.b;
	if(tx != tx) throw new js__$Boot_HaxeError("Error: Mat23::" + "tx" + " cannot be NaN");
	this.zpp_inner.tx = tx;
	this.zpp_inner.invalidate();
	this.zpp_inner.tx;
	if(c != c) throw new js__$Boot_HaxeError("Error: Mat23::" + "c" + " cannot be NaN");
	this.zpp_inner.c = c;
	this.zpp_inner.invalidate();
	this.zpp_inner.c;
	if(d != d) throw new js__$Boot_HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
	this.zpp_inner.d = d;
	this.zpp_inner.invalidate();
	this.zpp_inner.d;
	if(ty != ty) throw new js__$Boot_HaxeError("Error: Mat23::" + "ty" + " cannot be NaN");
	this.zpp_inner.ty = ty;
	this.zpp_inner.invalidate();
	this.zpp_inner.ty;
};
$hxClasses["nape.geom.Mat23"] = nape_geom_Mat23;
nape_geom_Mat23.__name__ = true;
nape_geom_Mat23.rotation = function(angle) {
	if(angle != angle) throw new js__$Boot_HaxeError("Error: Cannot create rotation matrix with NaN angle");
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	return new nape_geom_Mat23(cos,-sin,sin,cos,0,0);
};
nape_geom_Mat23.translation = function(tx,ty) {
	return new nape_geom_Mat23(1,0,0,1,tx,ty);
};
nape_geom_Mat23.scale = function(sx,sy) {
	return new nape_geom_Mat23(sx,0,0,sy,0,0);
};
nape_geom_Mat23.prototype = {
	get_a: function() {
		return this.zpp_inner.a;
	}
	,set_a: function(a) {
		if(a != a) throw new js__$Boot_HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
		this.zpp_inner.a = a;
		this.zpp_inner.invalidate();
		return this.zpp_inner.a;
	}
	,get_b: function() {
		return this.zpp_inner.b;
	}
	,set_b: function(b) {
		if(b != b) throw new js__$Boot_HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
		this.zpp_inner.b = b;
		this.zpp_inner.invalidate();
		return this.zpp_inner.b;
	}
	,get_c: function() {
		return this.zpp_inner.c;
	}
	,set_c: function(c) {
		if(c != c) throw new js__$Boot_HaxeError("Error: Mat23::" + "c" + " cannot be NaN");
		this.zpp_inner.c = c;
		this.zpp_inner.invalidate();
		return this.zpp_inner.c;
	}
	,get_d: function() {
		return this.zpp_inner.d;
	}
	,set_d: function(d) {
		if(d != d) throw new js__$Boot_HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
		this.zpp_inner.d = d;
		this.zpp_inner.invalidate();
		return this.zpp_inner.d;
	}
	,get_tx: function() {
		return this.zpp_inner.tx;
	}
	,set_tx: function(tx) {
		if(tx != tx) throw new js__$Boot_HaxeError("Error: Mat23::" + "tx" + " cannot be NaN");
		this.zpp_inner.tx = tx;
		this.zpp_inner.invalidate();
		return this.zpp_inner.tx;
	}
	,get_ty: function() {
		return this.zpp_inner.ty;
	}
	,set_ty: function(ty) {
		if(ty != ty) throw new js__$Boot_HaxeError("Error: Mat23::" + "ty" + " cannot be NaN");
		this.zpp_inner.ty = ty;
		this.zpp_inner.invalidate();
		return this.zpp_inner.ty;
	}
	,copy: function() {
		return new nape_geom_Mat23(this.zpp_inner.a,this.zpp_inner.b,this.zpp_inner.c,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
	}
	,set: function(matrix) {
		if(matrix == null) throw new js__$Boot_HaxeError("Error: Cannot set form null matrix");
		this.zpp_inner.set(matrix.zpp_inner);
		this.zpp_inner.invalidate();
		return this;
	}
	,setAs: function(a,b,c,d,tx,ty) {
		if(ty == null) ty = 0.0;
		if(tx == null) tx = 0.0;
		if(d == null) d = 1.0;
		if(c == null) c = 0.0;
		if(b == null) b = 0.0;
		if(a == null) a = 1.0;
		this.zpp_inner.setas(a,b,c,d,tx,ty);
		this.zpp_inner.invalidate();
		return this;
	}
	,reset: function() {
		return this.setAs();
	}
	,get_determinant: function() {
		return this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	}
	,singular: function() {
		var norm = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d;
		var limit = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
		if(limit < 0) limit = -limit;
		return norm > nape_Config.illConditionedThreshold * limit;
	}
	,inverse: function() {
		if(this.singular()) throw new js__$Boot_HaxeError("Error: Matrix is singular and cannot be inverted");
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		return new nape_geom_Mat23(this.zpp_inner.d * idet,-this.zpp_inner.b * idet,-this.zpp_inner.c * idet,this.zpp_inner.a * idet,(this.zpp_inner.b * this.zpp_inner.ty - this.zpp_inner.d * this.zpp_inner.tx) * idet,(this.zpp_inner.c * this.zpp_inner.tx - this.zpp_inner.a * this.zpp_inner.ty) * idet);
	}
	,transpose: function() {
		return new nape_geom_Mat23(this.zpp_inner.a,this.zpp_inner.c,this.zpp_inner.b,this.zpp_inner.d,-this.zpp_inner.a * this.zpp_inner.tx - this.zpp_inner.c * this.zpp_inner.ty,-this.zpp_inner.b * this.zpp_inner.tx - this.zpp_inner.d * this.zpp_inner.ty);
	}
	,concat: function(matrix) {
		var m = matrix;
		if(m == null) throw new js__$Boot_HaxeError("Error: Cannot concatenate with null Mat23");
		return new nape_geom_Mat23(m.zpp_inner.a * this.zpp_inner.a + m.zpp_inner.b * this.zpp_inner.c,m.zpp_inner.a * this.zpp_inner.b + m.zpp_inner.b * this.zpp_inner.d,m.zpp_inner.c * this.zpp_inner.a + m.zpp_inner.d * this.zpp_inner.c,m.zpp_inner.c * this.zpp_inner.b + m.zpp_inner.d * this.zpp_inner.d,m.zpp_inner.a * this.zpp_inner.tx + m.zpp_inner.b * this.zpp_inner.ty + m.zpp_inner.tx,m.zpp_inner.c * this.zpp_inner.tx + m.zpp_inner.d * this.zpp_inner.ty + m.zpp_inner.ty);
	}
	,transform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(point == null) throw new js__$Boot_HaxeError("Error: Cannot transform null Vec2");
		var ret;
		if(noTranslation) ret = nape_geom_Vec2.get((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b,(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d,weak); else ret = nape_geom_Vec2.get((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b + this.zpp_inner.tx,(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d + this.zpp_inner.ty,weak);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,inverseTransform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(point == null) throw new js__$Boot_HaxeError("Error: Cannot transform null Vec2");
		if(this.singular()) throw new js__$Boot_HaxeError("Error: Matrix is singular and inverse transformation cannot be performed");
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		var ret;
		if(noTranslation) ret = nape_geom_Vec2.get(((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.d - (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b) * idet,((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.a - (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c) * idet,weak); else {
			var dx;
			dx = (function($this) {
				var $r;
				if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				point.zpp_inner.validate();
				$r = point.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.tx;
			var dy;
			dy = (function($this) {
				var $r;
				if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				point.zpp_inner.validate();
				$r = point.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.ty;
			ret = nape_geom_Vec2.get((dx * this.zpp_inner.d - dy * this.zpp_inner.b) * idet,(dy * this.zpp_inner.a - dx * this.zpp_inner.c) * idet,weak);
		}
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,toString: function() {
		return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
	}
	,equiorthogonal: function() {
		if(this.singular()) return false; else {
			var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			if(x * x < nape_Config.epsilon) {
				var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - this.zpp_inner.c * this.zpp_inner.c - this.zpp_inner.d * this.zpp_inner.d;
				return y * y < nape_Config.epsilon;
			} else return false;
		}
	}
	,orthogonal: function() {
		var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		if(x * x < nape_Config.epsilon) {
			var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - 1;
			var z = this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d - 1;
			return y * y < nape_Config.epsilon && z * z < nape_Config.epsilon;
		} else return false;
	}
	,equiorthogonalise: function() {
		if(!this.equiorthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			if(k1 * k1 < nape_Config.epsilon || k2 * k2 < nape_Config.epsilon) throw new js__$Boot_HaxeError("Error: Matrix is singular and cannot be " + "equiorthogonal" + "ised");
			var k = (k1 + k2) / 2;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.set_a(_g.zpp_inner.a * k1);
			var _g1 = this;
			_g1.set_c(_g1.zpp_inner.c * k1);
			var _g2 = this;
			_g2.set_b(_g2.zpp_inner.b * k2);
			var _g3 = this;
			_g3.set_d(_g3.zpp_inner.d * k2);
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.set_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
			if(a2 != a2) throw new js__$Boot_HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.set_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
			if(b2 != b2) throw new js__$Boot_HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,orthogonalise: function() {
		if(!this.orthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			if(k1 * k1 < nape_Config.epsilon || k2 * k2 < nape_Config.epsilon) throw new js__$Boot_HaxeError("Error: Matrix is singular and cannot be " + "orthogonal" + "ised");
			var k = 1;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.set_a(_g.zpp_inner.a * k1);
			var _g1 = this;
			_g1.set_c(_g1.zpp_inner.c * k1);
			var _g2 = this;
			_g2.set_b(_g2.zpp_inner.b * k2);
			var _g3 = this;
			_g3.set_d(_g3.zpp_inner.d * k2);
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.set_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
			if(a2 != a2) throw new js__$Boot_HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.set_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
			if(b2 != b2) throw new js__$Boot_HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,__class__: nape_geom_Mat23
};
var nape_geom_MatMN = function(rows,cols) {
	this.zpp_inner = null;
	if(rows <= 0 || cols <= 0) throw new js__$Boot_HaxeError("Error: MatMN::dimensions cannot be < 1");
	this.zpp_inner = new zpp_$nape_geom_ZPP_$MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.MatMN"] = nape_geom_MatMN;
nape_geom_MatMN.__name__ = true;
nape_geom_MatMN.prototype = {
	get_rows: function() {
		return this.zpp_inner.m;
	}
	,get_cols: function() {
		return this.zpp_inner.n;
	}
	,x: function(row,col) {
		if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		return this.zpp_inner.x[row * this.zpp_inner.n + col];
	}
	,setx: function(row,col,x) {
		if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
		return this.zpp_inner.x[row * this.zpp_inner.n + col] = x;
	}
	,toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			if(!fst) ret += "; ";
			fst = false;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				ret += (function($this) {
					var $r;
					if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
					$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
					return $r;
				}(this)) + " ";
			}
		}
		ret += "}";
		return ret;
	}
	,transpose: function() {
		var ret = new nape_geom_MatMN(this.zpp_inner.n,this.zpp_inner.m);
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				ret.setx(j,i,(function($this) {
					var $r;
					if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
					$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
					return $r;
				}(this)));
			}
		}
		return ret;
	}
	,mul: function(matrix) {
		var y = matrix;
		if(this.zpp_inner.n != y.zpp_inner.m) throw new js__$Boot_HaxeError("Error: Matrix dimensions aren't compatible");
		var ret = new nape_geom_MatMN(this.zpp_inner.m,y.zpp_inner.n);
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = y.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				var v = 0.0;
				var _g5 = 0;
				var _g4 = this.zpp_inner.n;
				while(_g5 < _g4) {
					var k = _g5++;
					v += (function($this) {
						var $r;
						if(i < 0 || k < 0 || i >= $this.zpp_inner.m || k >= $this.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
						$r = $this.zpp_inner.x[i * $this.zpp_inner.n + k];
						return $r;
					}(this)) * (function($this) {
						var $r;
						if(k < 0 || j < 0 || k >= y.zpp_inner.m || j >= y.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
						$r = y.zpp_inner.x[k * y.zpp_inner.n + j];
						return $r;
					}(this));
				}
				if(i < 0 || j < 0 || i >= ret.zpp_inner.m || j >= ret.zpp_inner.n) throw new js__$Boot_HaxeError("Error: MatMN indices out of range");
				ret.zpp_inner.x[i * ret.zpp_inner.n + j] = v;
			}
		}
		return ret;
	}
	,__class__: nape_geom_MatMN
};
var nape_geom_Ray = function(origin,direction) {
	this.zpp_inner = null;
	if(origin != null && origin.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(direction != null && direction.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	this.zpp_inner = new zpp_$nape_geom_ZPP_$Ray();
	if(origin != null && origin.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(origin == null) throw new js__$Boot_HaxeError("Error: Ray::origin cannot be null");
	this.zpp_inner.origin.set(origin);
	this.zpp_inner.origin;
	if(direction != null && direction.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(direction == null) throw new js__$Boot_HaxeError("Error: Ray::direction cannot be null");
	this.zpp_inner.direction.set(direction);
	this.zpp_inner.zip_dir = true;
	this.zpp_inner.direction;
	this.zpp_inner.maxdist = Infinity;
};
$hxClasses["nape.geom.Ray"] = nape_geom_Ray;
nape_geom_Ray.__name__ = true;
nape_geom_Ray.fromSegment = function(start,end) {
	if(start != null && start.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(end != null && end.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(start == null) throw new js__$Boot_HaxeError("Error: Ray::fromSegment::start is null");
	if(end == null) throw new js__$Boot_HaxeError("Error: Ray::fromSegment::end is null");
	var dir = end.sub(start,true);
	var ret = new nape_geom_Ray(start,dir);
	ret.set_maxDistance(Math.sqrt(zpp_$nape_geom_ZPP_$VecMath.vec_dsq((function($this) {
		var $r;
		if(start != null && start.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		start.zpp_inner.validate();
		$r = start.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(start != null && start.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		start.zpp_inner.validate();
		$r = start.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(end != null && end.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		end.zpp_inner.validate();
		$r = end.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(end != null && end.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		end.zpp_inner.validate();
		$r = end.zpp_inner.y;
		return $r;
	}(this)))));
	if(start.zpp_inner.weak) {
		start.dispose();
		true;
	} else false;
	if(end.zpp_inner.weak) {
		end.dispose();
		true;
	} else false;
	return ret;
};
nape_geom_Ray.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_origin: function() {
		return this.zpp_inner.origin;
	}
	,set_origin: function(origin) {
		if(origin != null && origin.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(origin == null) throw new js__$Boot_HaxeError("Error: Ray::origin cannot be null");
		this.zpp_inner.origin.set(origin);
		return this.zpp_inner.origin;
	}
	,get_direction: function() {
		return this.zpp_inner.direction;
	}
	,set_direction: function(direction) {
		if(direction != null && direction.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(direction == null) throw new js__$Boot_HaxeError("Error: Ray::direction cannot be null");
		this.zpp_inner.direction.set(direction);
		this.zpp_inner.zip_dir = true;
		return this.zpp_inner.direction;
	}
	,get_maxDistance: function() {
		return this.zpp_inner.maxdist;
	}
	,set_maxDistance: function(maxDistance) {
		if(maxDistance != maxDistance) throw new js__$Boot_HaxeError("Error: maxDistance cannot be NaN");
		this.zpp_inner.maxdist = maxDistance;
		return this.zpp_inner.maxdist;
	}
	,aabb: function() {
		return this.zpp_inner.rayAABB().wrapper();
	}
	,at: function(distance,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_dir();
		return nape_geom_Vec2.get(this.zpp_inner.origin.get_x() + distance * this.zpp_inner.dirx,this.zpp_inner.origin.get_y() + distance * this.zpp_inner.diry,weak);
	}
	,copy: function() {
		var ret = new nape_geom_Ray(this.zpp_inner.origin,this.zpp_inner.direction);
		ret.set_maxDistance(this.zpp_inner.maxdist);
		return ret;
	}
	,__class__: nape_geom_Ray
};
var nape_geom_RayResult = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_geom_ZPP_$ConvexRayResult.internal) throw new js__$Boot_HaxeError("Error: RayResult cannot be instantiated derp!");
};
$hxClasses["nape.geom.RayResult"] = nape_geom_RayResult;
nape_geom_RayResult.__name__ = true;
nape_geom_RayResult.prototype = {
	get_normal: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return this.zpp_inner.normal;
	}
	,get_distance: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return this.zpp_inner.toiDistance;
	}
	,get_inner: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return this.zpp_inner.inner;
	}
	,get_shape: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return this.zpp_inner.shape;
	}
	,dispose: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		this.zpp_inner.free();
	}
	,toString: function() {
		if(this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
		return "{ shape: " + Std.string((function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
			$r = $this.zpp_inner.shape;
			return $r;
		}(this))) + " distance: " + (function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
			$r = $this.zpp_inner.toiDistance;
			return $r;
		}(this)) + " ?inner: " + Std.string((function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
			$r = $this.zpp_inner.inner;
			return $r;
		}(this))) + " }";
	}
	,__class__: nape_geom_RayResult
};
var nape_geom_RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$RayResultList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "RayResult" + "Iterator derp!");
};
$hxClasses["nape.geom.RayResultIterator"] = nape_geom_RayResultIterator;
nape_geom_RayResultIterator.__name__ = true;
nape_geom_RayResultIterator.get = function(list) {
	var ret;
	if(nape_geom_RayResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$RayResultList.internal = true;
		var ret1 = new nape_geom_RayResultIterator();
		zpp_$nape_util_ZPP_$RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_RayResultIterator.zpp_pool;
		nape_geom_RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_RayResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_geom_RayResultIterator.zpp_pool;
			nape_geom_RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_RayResultIterator
};
var nape_geom_RayResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$RayResultList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.RayResultList"] = nape_geom_RayResultList;
nape_geom_RayResultList.__name__ = true;
nape_geom_RayResultList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_geom_RayResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_RayResultList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "RayResult" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "RayResult" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "RayResult" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "RayResult" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "RayResult" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "RayResult" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_geom_RayResultIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_geom_RayResultList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_RayResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "RayResult" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_geom_RayResultIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_RayResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_geom_RayResultIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_geom_RayResultIterator.zpp_pool;
			nape_geom_RayResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_geom_RayResultList
};
var nape_geom_Vec2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	if(x != x || y != y) throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	this.zpp_inner = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2"] = nape_geom_Vec2;
nape_geom_Vec2.__name__ = true;
nape_geom_Vec2.weak = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	return nape_geom_Vec2.get(x,y,true);
};
nape_geom_Vec2.get = function(x,y,weak) {
	if(weak == null) weak = false;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(x != x || y != y) throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) ret = new nape_geom_Vec2(); else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
	}
	if(ret.zpp_inner == null) {
		ret.zpp_inner = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		ret.zpp_inner.immutable();
		if(x != x || y != y) throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		if(!((function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			ret.zpp_inner.invalidate();
		}
		ret;
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape_geom_Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) weak = false;
	if(length != length) throw new js__$Boot_HaxeError("Error: Vec2::length cannot be NaN");
	if(angle != angle) throw new js__$Boot_HaxeError("Error: Vec2::angle cannot be NaN");
	return nape_geom_Vec2.get(length * Math.cos(angle),length * Math.sin(angle),weak);
};
nape_geom_Vec2.dsq = function(a,b) {
	if(a != null && a.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(b != null && b.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(a == null || b == null) throw new js__$Boot_HaxeError("Error: Cannot compute squared distance between null Vec2");
	var ret = zpp_$nape_geom_ZPP_$VecMath.vec_dsq((function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this)));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape_geom_Vec2.distance = function(a,b) {
	if(a != null && a.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(b != null && b.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	if(a == null || b == null) throw new js__$Boot_HaxeError("Error: Cannot compute squared distance between null Vec2");
	var ret = Math.sqrt(zpp_$nape_geom_ZPP_$VecMath.vec_dsq((function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this))));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape_geom_Vec2.prototype = {
	dispose: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if(this.zpp_inner._inuse) throw new js__$Boot_HaxeError("Error: This Vec2 is not disposable");
		var inner = this.zpp_inner;
		this.zpp_inner.outer = null;
		this.zpp_inner = null;
		var o = this;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o; else zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	,copy: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		return nape_geom_Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,get_x: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) != x) {
			if(x != x) throw new js__$Boot_HaxeError("Error: Vec2::" + "x" + " cannot be NaN");
			this.zpp_inner.x = x;
			this.zpp_inner.invalidate();
		}
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,get_y: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) != y) {
			if(y != y) throw new js__$Boot_HaxeError("Error: Vec2::" + "y" + " cannot be NaN");
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,get_length: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
	}
	,set_length: function(length) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if(length != length) throw new js__$Boot_HaxeError("Error: Vec2::length cannot be NaN");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) == 0) throw new js__$Boot_HaxeError("Error: Cannot set length of a zero vector");
		var t = length / Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
	}
	,lsq: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
	}
	,set: function(vector) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot assign null Vec2");
		var ret = this.setxy((function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,setxy: function(x,y) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if(x != x || y != y) throw new js__$Boot_HaxeError("Error: Vec2 components cannot be NaN");
		if(!((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			this.zpp_inner.x = x;
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,get_angle: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) && (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)));
	}
	,set_angle: function(angle) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if(angle != angle) throw new js__$Boot_HaxeError("Error: Vec2::angle cannot be NaN");
		var l;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		l = Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		this.setxy(l * Math.cos(angle),l * Math.sin(angle));
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) && (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)));
	}
	,rotate: function(angle) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if(angle != angle) throw new js__$Boot_HaxeError("Error: Cannot rotate Vec2 by NaN");
		if(angle % (Math.PI * 2) != 0) {
			var ax = Math.sin(angle);
			var ay = Math.cos(angle);
			var t = ay * this.zpp_inner.x - ax * this.zpp_inner.y;
			this.zpp_inner.y = this.zpp_inner.x * ax + this.zpp_inner.y * ay;
			this.zpp_inner.x = t;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,reflect: function(vec,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vec != null && vec.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) == 0) throw new js__$Boot_HaxeError("Error: Cannot reflect in zero vector");
		var normal = ((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = nape_geom_Vec2.get((function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)),true);
			return $r;
		}(this))).normalise();
		var ret = vec.sub(normal.muleq(2 * normal.dot(vec)),weak);
		if(vec.zpp_inner.weak) {
			vec.dispose();
			true;
		} else false;
		return ret;
	}
	,normalise: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) == 0) throw new js__$Boot_HaxeError("Error: Cannot normalise vector of length 0");
		var d;
		d = (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		return this;
	}
	,unit: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) == 0) throw new js__$Boot_HaxeError("Error: Cannot normalise vector of length 0");
		var scale = 1 / zpp_$nape_util_ZPP_$Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		return nape_geom_Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scale,(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scale,weak);
	}
	,add: function(vector,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot add null vectors");
		var ret = nape_geom_Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,addMul: function(vector,scalar,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot add null vectors");
		var ret = nape_geom_Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,sub: function(vector,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot subtract null vectors");
		var ret = nape_geom_Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,mul: function(scalar,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(scalar != scalar) throw new js__$Boot_HaxeError("Error: Cannot multiply with NaN");
		return nape_geom_Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
	}
	,addeq: function(vector) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot add null vectors");
		this.setxy((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,subeq: function(vector) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot subtract null vectors");
		this.setxy((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,muleq: function(scalar) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.immutable();
		if(scalar != scalar) throw new js__$Boot_HaxeError("Error: Cannot multiply with NaN");
		return this.setxy((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar);
	}
	,dot: function(vector) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot take dot product with null vector");
		var ret;
		ret = (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,cross: function(vector) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot take cross product with null vector");
		var ret;
		ret = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,perp: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		return nape_geom_Vec2.get(-(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),weak);
	}
	,toString: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_Vec2
};
var nape_geom_Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$Vec2List.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Vec2" + "Iterator derp!");
};
$hxClasses["nape.geom.Vec2Iterator"] = nape_geom_Vec2Iterator;
nape_geom_Vec2Iterator.__name__ = true;
nape_geom_Vec2Iterator.get = function(list) {
	var ret;
	if(nape_geom_Vec2Iterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$Vec2List.internal = true;
		var ret1 = new nape_geom_Vec2Iterator();
		zpp_$nape_util_ZPP_$Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_Vec2Iterator.zpp_pool;
		nape_geom_Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_Vec2Iterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
			nape_geom_Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_Vec2Iterator
};
var nape_geom_Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$Vec2List();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2List"] = nape_geom_Vec2List;
nape_geom_Vec2List.__name__ = true;
nape_geom_Vec2List.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_geom_Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_Vec2List.prototype = {
	get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.empty()) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.empty()) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_geom_Vec2Iterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_geom_Vec2List();
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				if(i != null && i.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$r = nape_geom_Vec2.get((function($this) {
					var $r;
					if(i != null && i.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					i.zpp_inner.validate();
					$r = i.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(i != null && i.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					i.zpp_inner.validate();
					$r = i.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g = xs.iterator();
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) this.add(x);
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
			nape_geom_Vec2Iterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_geom_Vec2List
};
var nape_geom_Vec3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$Vec3();
	this.zpp_inner.outer = this;
	if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
	this.zpp_inner.x = x;
	if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	this.zpp_inner.validate();
	this.zpp_inner.x;
	if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
	this.zpp_inner.y = y;
	if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	this.zpp_inner.validate();
	this.zpp_inner.y;
	if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
	this.zpp_inner.z = z;
	if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	this.zpp_inner.validate();
	this.zpp_inner.z;
};
$hxClasses["nape.geom.Vec3"] = nape_geom_Vec3;
nape_geom_Vec3.__name__ = true;
nape_geom_Vec3.get = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec3 == null) ret = new nape_geom_Vec3(); else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec3;
		zpp_$nape_util_ZPP_$PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec3) zpp_$nape_util_ZPP_$PubPool.nextVec3 = null;
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
};
nape_geom_Vec3.prototype = {
	get_x: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
		this.zpp_inner.x = x;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,get_y: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
		this.zpp_inner.y = y;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,get_z: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,set_z: function(z) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
		this.zpp_inner.z = z;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,dispose: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: This Vec3 is not disposable");
		var o = this;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec3 != null) zpp_$nape_util_ZPP_$PubPool.nextVec3.zpp_pool = o; else zpp_$nape_util_ZPP_$PubPool.poolVec3 = o;
		zpp_$nape_util_ZPP_$PubPool.nextVec3 = o;
		o.zpp_disp = true;
	}
	,get_length: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
	}
	,set_length: function(length) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(length != length) throw new js__$Boot_HaxeError("Error: Vec3::length cannot be NaN");
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) == 0) throw new js__$Boot_HaxeError("Error: Cannot set length of a zero vector");
		var t;
		t = length / (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.z;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.z;
				return $r;
			}($this)));
			return $r;
		}(this));
		var t1 = t;
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t1);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			if(_g1 != null && _g1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t1);
		var _g2 = this;
		_g2.set_z((function($this) {
			var $r;
			if(_g2 != null && _g2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			_g2.zpp_inner.validate();
			$r = _g2.zpp_inner.z;
			return $r;
		}(this)) * t);
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
	}
	,lsq: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this));
	}
	,set: function(vector) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot assign null Vec3");
		return this.setxyz((function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.z;
			return $r;
		}(this)));
	}
	,setxyz: function(x,y,z) {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
		this.zpp_inner.x = x;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		this.zpp_inner.x;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
		this.zpp_inner.y = y;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		this.zpp_inner.y;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: Vec3 is immutable");
		this.zpp_inner.z = z;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		this.zpp_inner.validate();
		this.zpp_inner.z;
		return this;
	}
	,xy: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		return nape_geom_Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,toString: function() {
		if(this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		return "{ x: " + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + " y: " + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + " z: " + (function($this) {
			var $r;
			if($this.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) + " }";
	}
	,__class__: nape_geom_Vec3
};
var nape_geom_Winding = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Winding" + " derp!");
};
$hxClasses["nape.geom.Winding"] = nape_geom_Winding;
nape_geom_Winding.__name__ = true;
nape_geom_Winding.get_UNDEFINED = function() {
	if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED;
};
nape_geom_Winding.get_CLOCKWISE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
};
nape_geom_Winding.get_ANTICLOCKWISE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE;
};
nape_geom_Winding.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED;
			return $r;
		}(this))) return "UNDEFINED"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) return "CLOCKWISE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE;
			return $r;
		}(this))) return "ANTICLOCKWISE"; else return "";
	}
	,__class__: nape_geom_Winding
};
var nape_phys_Interactor = function() {
	this.zpp_inner_i = null;
	if(!nape_phys_Interactor.zpp_internalAlloc) throw new js__$Boot_HaxeError("Error: Cannot instantiate an Interactor, only Shape/Body/Compound");
};
$hxClasses["nape.phys.Interactor"] = nape_phys_Interactor;
nape_phys_Interactor.__name__ = true;
nape_phys_Interactor.prototype = {
	get_id: function() {
		return this.zpp_inner_i.id;
	}
	,get_userData: function() {
		if(this.zpp_inner_i.userData == null) this.zpp_inner_i.userData = { };
		return this.zpp_inner_i.userData;
	}
	,isShape: function() {
		return this.zpp_inner_i.ishape != null;
	}
	,isBody: function() {
		return this.zpp_inner_i.ibody != null;
	}
	,isCompound: function() {
		return this.zpp_inner_i.icompound != null;
	}
	,get_castShape: function() {
		if(this.zpp_inner_i.ishape != null) return this.zpp_inner_i.ishape.outer; else return null;
	}
	,get_castBody: function() {
		if(this.zpp_inner_i.ibody != null) return this.zpp_inner_i.ibody.outer; else return null;
	}
	,get_castCompound: function() {
		if(this.zpp_inner_i.icompound != null) return this.zpp_inner_i.icompound.outer; else return null;
	}
	,get_group: function() {
		if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
	}
	,set_group: function(group) {
		this.zpp_inner_i.immutable_midstep("Interactor::group");
		this.zpp_inner_i.setGroup(group == null?null:group.zpp_inner);
		if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
	}
	,get_cbTypes: function() {
		if(this.zpp_inner_i.wrap_cbTypes == null) this.zpp_inner_i.setupcbTypes();
		return this.zpp_inner_i.wrap_cbTypes;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape_phys_Interactor
};
var nape_phys_Body = function(type,position) {
	this.debugDraw = true;
	this.zpp_inner = null;
	nape_phys_Interactor.zpp_internalAlloc = true;
	nape_phys_Interactor.call(this);
	nape_phys_Interactor.zpp_internalAlloc = false;
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		if(position != null && position.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(position != null && position.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		position.zpp_inner.validate();
		this.zpp_inner.posx = position.zpp_inner.x;
		if(position != null && position.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		position.zpp_inner.validate();
		this.zpp_inner.posy = position.zpp_inner.y;
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	this.set_type(type == null?(function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
		return $r;
	}(this)):type);
	if(position != null) {
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY.zpp_inner);
};
$hxClasses["nape.phys.Body"] = nape_phys_Body;
nape_phys_Body.__name__ = true;
nape_phys_Body.__super__ = nape_phys_Interactor;
nape_phys_Body.prototype = $extend(nape_phys_Interactor.prototype,{
	get_type: function() {
		return zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type];
	}
	,set_type: function(type) {
		this.zpp_inner.immutable_midstep("Body::type");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type] != type) {
			if(type == null) throw new js__$Boot_HaxeError("Error: Cannot use null BodyType");
			var ntype;
			if(type == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
				return $r;
			}(this))) ntype = zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC; else if(type == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC;
				return $r;
			}(this))) ntype = zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC; else ntype = zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC;
			if(ntype == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.zpp_inner.space != null) {
				this.zpp_inner.velx = 0;
				this.zpp_inner.vely = 0;
				this.zpp_inner.angvel = 0;
			}
			this.zpp_inner.invalidate_type();
			if(this.zpp_inner.space != null) this.zpp_inner.space.transmitType(this.zpp_inner,ntype); else this.zpp_inner.type = ntype;
		}
		return zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type];
	}
	,get_isBullet: function() {
		return this.zpp_inner.bulletEnabled;
	}
	,set_isBullet: function(isBullet) {
		this.zpp_inner.bulletEnabled = isBullet;
		return this.zpp_inner.bulletEnabled;
	}
	,get_disableCCD: function() {
		return this.zpp_inner.disableCCD;
	}
	,set_disableCCD: function(disableCCD) {
		this.zpp_inner.disableCCD = disableCCD;
		return this.zpp_inner.disableCCD;
	}
	,integrate: function(deltaTime) {
		if(deltaTime != deltaTime) throw new js__$Boot_HaxeError("Cannot integrate by NaN time");
		this.zpp_inner.immutable_midstep("Body::space");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(deltaTime == 0) return this;
		var cur = this.zpp_inner;
		cur.sweepTime = 0;
		cur.sweep_angvel = cur.angvel;
		cur.sweepIntegrate(deltaTime);
		cur.invalidate_pos();
		cur.invalidate_rot();
		cur.sweepTime = 0;
		return this;
	}
	,isStatic: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC;
	}
	,isDynamic: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC;
	}
	,isKinematic: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC;
	}
	,get_shapes: function() {
		return this.zpp_inner.wrap_shapes;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(this);
			if(compound != null) compound.zpp_inner.wrap_bodies.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if(this.zpp_inner.compound != null) throw new js__$Boot_HaxeError("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		this.zpp_inner.immutable_midstep("Body::space");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.component.woken = false;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(this);
			if(space != null) space.zpp_inner.wrap_bodies.add(this);
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.zpp_inner.arbiters,true);
		return this.zpp_inner.wrap_arbiters;
	}
	,get_isSleeping: function() {
		if(this.zpp_inner.space == null) throw new js__$Boot_HaxeError("Error: isSleeping makes no sense if the object is not contained within a Space");
		return this.zpp_inner.component.sleeping;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,copy: function() {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world cannot be copied");
		return this.zpp_inner.copy();
	}
	,get_position: function() {
		if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
		return this.zpp_inner.wrap_pos;
	}
	,set_position: function(position) {
		if(position != null && position.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(position == null) throw new js__$Boot_HaxeError("Error: Body::" + "position" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).set(position);
		if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
		return this.zpp_inner.wrap_pos;
	}
	,get_velocity: function() {
		if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
		return this.zpp_inner.wrap_vel;
	}
	,set_velocity: function(velocity) {
		if(velocity != null && velocity.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(velocity == null) throw new js__$Boot_HaxeError("Error: Body::" + "velocity" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(velocity);
		if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
		return this.zpp_inner.wrap_vel;
	}
	,setVelocityFromTarget: function(targetPosition,targetRotation,deltaTime) {
		if(targetPosition != null && targetPosition.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(targetPosition == null) throw new js__$Boot_HaxeError("Cannot set velocity for null target position");
		if(deltaTime == 0) throw new js__$Boot_HaxeError("deltaTime cannot be 0 for setVelocityFromTarget");
		var idt = 1 / deltaTime;
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(targetPosition.sub((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this)),true).muleq(idt));
		this.set_angularVel((targetRotation - this.zpp_inner.rot) * idt);
		if(targetPosition.zpp_inner.weak) {
			targetPosition.dispose();
			true;
		} else false;
		return this;
	}
	,get_kinematicVel: function() {
		if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
		return this.zpp_inner.wrap_kinvel;
	}
	,set_kinematicVel: function(kinematicVel) {
		if(kinematicVel != null && kinematicVel.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(kinematicVel == null) throw new js__$Boot_HaxeError("Error: Body::" + "kinematicVel" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
			$r = $this.zpp_inner.wrap_kinvel;
			return $r;
		}(this))).set(kinematicVel);
		if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
		return this.zpp_inner.wrap_kinvel;
	}
	,get_surfaceVel: function() {
		if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
		return this.zpp_inner.wrap_svel;
	}
	,set_surfaceVel: function(surfaceVel) {
		if(surfaceVel != null && surfaceVel.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(surfaceVel == null) throw new js__$Boot_HaxeError("Error: Body::" + "surfaceVel" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
			$r = $this.zpp_inner.wrap_svel;
			return $r;
		}(this))).set(surfaceVel);
		if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
		return this.zpp_inner.wrap_svel;
	}
	,get_force: function() {
		if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
		return this.zpp_inner.wrap_force;
	}
	,set_force: function(force) {
		if(force != null && force.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(force == null) throw new js__$Boot_HaxeError("Error: Body::" + "force" + " cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
			$r = $this.zpp_inner.wrap_force;
			return $r;
		}(this))).set(force);
		if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
		return this.zpp_inner.wrap_force;
	}
	,get_constraintVelocity: function() {
		if(this.zpp_inner.wrapcvel == null) this.zpp_inner.setup_cvel();
		return this.zpp_inner.wrapcvel;
	}
	,get_rotation: function() {
		return this.zpp_inner.rot;
	}
	,set_rotation: function(rotation) {
		this.zpp_inner.immutable_midstep("Body::rotation");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.zpp_inner.space != null) throw new js__$Boot_HaxeError("Error: Static objects cannot be rotated once inside a Space");
		if(this.zpp_inner.rot != rotation) {
			if(rotation != rotation) throw new js__$Boot_HaxeError("Error: Body::rotation cannot be NaN");
			this.zpp_inner.rot = rotation;
			this.zpp_inner.invalidate_rot();
			this.zpp_inner.wake();
		}
		return this.zpp_inner.rot;
	}
	,get_angularVel: function() {
		return this.zpp_inner.angvel;
	}
	,set_angularVel: function(angularVel) {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(this.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) throw new js__$Boot_HaxeError("Error: Body::angularVel cannot be NaN");
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) throw new js__$Boot_HaxeError("Error: A static object cannot be given a velocity");
			this.zpp_inner.angvel = angularVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.angvel;
	}
	,get_kinAngVel: function() {
		return this.zpp_inner.kinangvel;
	}
	,set_kinAngVel: function(kinAngVel) {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(this.zpp_inner.kinangvel != kinAngVel) {
			if(kinAngVel != kinAngVel) throw new js__$Boot_HaxeError("Error: Body::kinAngVel cannot be NaN");
			this.zpp_inner.kinangvel = kinAngVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.kinangvel;
	}
	,get_torque: function() {
		return this.zpp_inner.torque;
	}
	,set_torque: function(torque) {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(!(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Non-dynamic body cannot have torque applied.");
		if(torque != torque) throw new js__$Boot_HaxeError("Error: Body::torque cannot be NaN");
		if(this.zpp_inner.torque != torque) {
			this.zpp_inner.torque = torque;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.torque;
	}
	,get_bounds: function() {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no bounds");
		return this.zpp_inner.aabb.wrapper();
	}
	,get_allowMovement: function() {
		return !this.zpp_inner.nomove;
	}
	,set_allowMovement: function(allowMovement) {
		this.zpp_inner.immutable_midstep("Body::" + (allowMovement == null?"null":"" + allowMovement));
		if(!this.zpp_inner.nomove != allowMovement) {
			this.zpp_inner.nomove = !allowMovement;
			this.zpp_inner.invalidate_mass();
		}
		return !this.zpp_inner.nomove;
	}
	,get_allowRotation: function() {
		return !this.zpp_inner.norotate;
	}
	,set_allowRotation: function(allowRotation) {
		this.zpp_inner.immutable_midstep("Body::" + (allowRotation == null?"null":"" + allowRotation));
		if(!this.zpp_inner.norotate != allowRotation) {
			this.zpp_inner.norotate = !allowRotation;
			this.zpp_inner.invalidate_inertia();
		}
		return !this.zpp_inner.norotate;
	}
	,get_massMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_massMode: function(massMode) {
		this.zpp_inner.immutable_midstep("Body::massMode");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(massMode == null) throw new js__$Boot_HaxeError("Error: cannot use null massMode");
		if(massMode == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
			return $r;
		}(this))) this.zpp_inner.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT; else this.zpp_inner.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_FIXED;
		this.zpp_inner.invalidate_mass();
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_constraintMass: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_mass();
		return this.zpp_inner.smass;
	}
	,get_mass: function() {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no mass");
		this.zpp_inner.validate_mass();
		if(this.zpp_inner.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && this.zpp_inner.shapes.head == null) throw new js__$Boot_HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
		return this.zpp_inner.cmass;
	}
	,set_mass: function(mass) {
		this.zpp_inner.immutable_midstep("Body::mass");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(mass != mass) throw new js__$Boot_HaxeError("Error: Mass cannot be NaN");
		if(mass <= 0) throw new js__$Boot_HaxeError("Error: Mass must be strictly positive");
		if(mass >= Infinity) throw new js__$Boot_HaxeError("Error: Mass cannot be infinite, use allowMovement = false instead");
		this.zpp_inner.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_FIXED;
		this.zpp_inner.cmass = mass;
		this.zpp_inner.invalidate_mass();
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no mass");
		this.zpp_inner.validate_mass();
		if(this.zpp_inner.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && this.zpp_inner.shapes.head == null) throw new js__$Boot_HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
		return this.zpp_inner.cmass;
	}
	,get_gravMassMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_gravMassMode: function(gravMassMode) {
		this.zpp_inner.immutable_midstep("Body::gravMassMode");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(gravMassMode == null) throw new js__$Boot_HaxeError("Error: Cannot use null gravMassMode");
		if(gravMassMode == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
			return $r;
		}(this))) this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED; else if(gravMassMode == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))) this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT; else this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED;
		this.zpp_inner.invalidate_gravMass();
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_gravMass: function() {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no gravMass");
		this.zpp_inner.validate_gravMass();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED) throw new js__$Boot_HaxeError("Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes");
		}
		return this.zpp_inner.gravMass;
	}
	,set_gravMass: function(gravMass) {
		this.zpp_inner.immutable_midstep("Body::gravMass");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(gravMass != gravMass) throw new js__$Boot_HaxeError("Error: gravMass cannot be NaN");
		this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED;
		this.zpp_inner.gravMass = gravMass;
		this.zpp_inner.invalidate_gravMass();
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no gravMass");
		this.zpp_inner.validate_gravMass();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED) throw new js__$Boot_HaxeError("Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes");
		}
		return this.zpp_inner.gravMass;
	}
	,get_gravMassScale: function() {
		this.zpp_inner.validate_gravMassScale();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED) throw new js__$Boot_HaxeError("Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes");
		}
		return this.zpp_inner.gravMassScale;
	}
	,set_gravMassScale: function(gravMassScale) {
		this.zpp_inner.immutable_midstep("Body::gravMassScale");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(gravMassScale != gravMassScale) throw new js__$Boot_HaxeError("Error: gravMassScale cannot be NaN");
		this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED;
		this.zpp_inner.gravMassScale = gravMassScale;
		this.zpp_inner.invalidate_gravMassScale();
		this.zpp_inner.validate_gravMassScale();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED) throw new js__$Boot_HaxeError("Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes");
		}
		return this.zpp_inner.gravMassScale;
	}
	,get_inertiaMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,set_inertiaMode: function(inertiaMode) {
		this.zpp_inner.immutable_midstep("Body::inertiaMode");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(inertiaMode == null) throw new js__$Boot_HaxeError("Error: Cannot use null InertiaMode");
		if(inertiaMode == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
			return $r;
		}(this))) this.zpp_inner.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_FIXED; else this.zpp_inner.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT;
		this.zpp_inner.invalidate_inertia();
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,get_constraintInertia: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_inertia();
		return this.zpp_inner.sinertia;
	}
	,get_inertia: function() {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no inertia");
		this.zpp_inner.validate_inertia();
		if(this.zpp_inner.inertiaMode == zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT && this.zpp_inner.wrap_shapes.empty()) throw new js__$Boot_HaxeError("Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes");
		return this.zpp_inner.cinertia;
	}
	,set_inertia: function(inertia) {
		this.zpp_inner.immutable_midstep("Body::inertia");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(inertia != inertia) throw new js__$Boot_HaxeError("Error: Inertia cannot be NaN");
		if(inertia <= 0) throw new js__$Boot_HaxeError("Error: Inertia must be strictly positive");
		if(inertia >= Infinity) throw new js__$Boot_HaxeError("Error: Inertia cannot be infinite, use allowRotation = false instead");
		this.zpp_inner.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_FIXED;
		this.zpp_inner.cinertia = inertia;
		this.zpp_inner.invalidate_inertia();
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no inertia");
		this.zpp_inner.validate_inertia();
		if(this.zpp_inner.inertiaMode == zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT && this.zpp_inner.wrap_shapes.empty()) throw new js__$Boot_HaxeError("Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes");
		return this.zpp_inner.cinertia;
	}
	,connectedBodies: function(depth,output) {
		if(depth == null) depth = -1;
		return this.zpp_inner.connectedBodies(depth,output);
	}
	,interactingBodies: function(type,depth,output) {
		if(depth == null) depth = -1;
		var arbiter_type;
		if(type == null) arbiter_type = zpp_$nape_dynamics_ZPP_$Arbiter.COL | zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR | zpp_$nape_dynamics_ZPP_$Arbiter.FLUID; else if(type == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
			return $r;
		}(this))) arbiter_type = zpp_$nape_dynamics_ZPP_$Arbiter.COL; else if(type == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
			return $r;
		}(this))) arbiter_type = zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR; else arbiter_type = zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
		return this.zpp_inner.interactingBodies(arbiter_type,depth,output);
	}
	,crushFactor: function() {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) == null) throw new js__$Boot_HaxeError("Error: Makes no sense to see how much an object not taking part in a simulation is being crushed");
		var msum = 0.0;
		var jsum = nape_geom_Vec2.get(null,null,null);
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var arb;
			_g.zpp_critical = false;
			arb = _g.zpp_inner.at(_g.zpp_i++);
			var imp3 = arb.totalImpulse(this);
			var imp = imp3.xy();
			jsum.addeq(imp);
			if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			msum += Math.sqrt((function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)));
			imp.dispose();
			imp3.dispose();
		}
		var _g1 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_constraints == null) $this.zpp_inner.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get($this.zpp_inner.constraints,true);
			$r = $this.zpp_inner.wrap_constraints;
			return $r;
		}(this))).iterator();
		while(_g1.hasNext()) {
			var con;
			_g1.zpp_critical = false;
			con = _g1.zpp_inner.at(_g1.zpp_i++);
			var imp31 = con.bodyImpulse(this);
			var imp1 = imp31.xy();
			jsum.addeq(imp1);
			if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			msum += Math.sqrt((function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)));
			imp1.dispose();
			imp31.dispose();
		}
		var ret;
		ret = (msum - (function($this) {
			var $r;
			if(jsum != null && jsum.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			$r = Math.sqrt((function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this))) / ((function($this) {
			var $r;
			if($this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no mass");
			$this.zpp_inner.validate_mass();
			if($this.zpp_inner.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && $this.zpp_inner.shapes.head == null) throw new js__$Boot_HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
			$r = $this.zpp_inner.cmass;
			return $r;
		}(this)) * (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.pre_dt);
		jsum.dispose();
		return ret;
	}
	,localPointToWorld: function(point,weak) {
		if(weak == null) weak = false;
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(point == null) throw new js__$Boot_HaxeError("Error: Cannot transform null Vec2");
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape_geom_Vec2.get(tempx + this.zpp_inner.posx,tempy + this.zpp_inner.posy,weak);
	}
	,worldPointToLocal: function(point,weak) {
		if(weak == null) weak = false;
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(point == null) throw new js__$Boot_HaxeError("Error: Cannot transform null Vec2");
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		var pointx = 0.0;
		var pointy = 0.0;
		pointx = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.posx;
		pointy = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) - this.zpp_inner.posy;
		tempx = pointx * this.zpp_inner.axisy + pointy * this.zpp_inner.axisx;
		tempy = pointy * this.zpp_inner.axisy - pointx * this.zpp_inner.axisx;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape_geom_Vec2.get(tempx,tempy,weak);
	}
	,localVectorToWorld: function(vector,weak) {
		if(weak == null) weak = false;
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot transform null Vec2");
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape_geom_Vec2.get(tempx,tempy,weak);
	}
	,worldVectorToLocal: function(vector,weak) {
		if(weak == null) weak = false;
		if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(vector == null) throw new js__$Boot_HaxeError("Error: Cannot transform null Vec2");
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisy + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		tempy = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape_geom_Vec2.get(tempx,tempy,weak);
	}
	,applyImpulse: function(impulse,pos,sleepable) {
		if(sleepable == null) sleepable = false;
		if(impulse != null && impulse.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(pos != null && pos.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(impulse == null) throw new js__$Boot_HaxeError("Error: Cannot apply null impulse to Body");
		if(sleepable && (function($this) {
			var $r;
			if($this.zpp_inner.space == null) throw new js__$Boot_HaxeError("Error: isSleeping makes no sense if the object is not contained within a Space");
			$r = $this.zpp_inner.component.sleeping;
			return $r;
		}(this))) {
			if(impulse.zpp_inner.weak) {
				impulse.dispose();
				true;
			} else false;
			if(pos != null) {
				if(pos.zpp_inner.weak) {
					pos.dispose();
					true;
				} else false;
			}
			return this;
		}
		this.zpp_inner.validate_mass();
		var t = this.zpp_inner.imass;
		this.zpp_inner.velx += (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.x;
			return $r;
		}(this)) * t;
		this.zpp_inner.vely += (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.y;
			return $r;
		}(this)) * t;
		if(pos != null) {
			var rx = 0.0;
			var ry = 0.0;
			rx = (function($this) {
				var $r;
				if(pos != null && pos.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.posx;
			ry = (function($this) {
				var $r;
				if(pos != null && pos.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.posy;
			this.zpp_inner.validate_inertia();
			this.zpp_inner.angvel += ((function($this) {
				var $r;
				if(impulse != null && impulse.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.y;
				return $r;
			}(this)) * rx - (function($this) {
				var $r;
				if(impulse != null && impulse.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.x;
				return $r;
			}(this)) * ry) * this.zpp_inner.iinertia;
			if(pos.zpp_inner.weak) {
				pos.dispose();
				true;
			} else false;
		}
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		if(impulse.zpp_inner.weak) {
			impulse.dispose();
			true;
		} else false;
		return this;
	}
	,applyAngularImpulse: function(impulse,sleepable) {
		if(sleepable == null) sleepable = false;
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(sleepable && (function($this) {
			var $r;
			if($this.zpp_inner.space == null) throw new js__$Boot_HaxeError("Error: isSleeping makes no sense if the object is not contained within a Space");
			$r = $this.zpp_inner.component.sleeping;
			return $r;
		}(this))) return this;
		this.zpp_inner.validate_inertia();
		this.zpp_inner.angvel += impulse * this.zpp_inner.iinertia;
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		return this;
	}
	,translateShapes: function(translation) {
		this.zpp_inner.immutable_midstep("Body::translateShapes()");
		if(translation != null && translation.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(translation == null) throw new js__$Boot_HaxeError("Error: Cannot displace by null Vec2");
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.translate(translation);
			cx_ite = cx_ite.next;
		}
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,rotateShapes: function(angle) {
		this.zpp_inner.immutable_midstep("Body::rotateShapes()");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.rotate(angle);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,scaleShapes: function(scaleX,scaleY) {
		this.zpp_inner.immutable_midstep("Body::scaleShapes()");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.scale(scaleX,scaleY);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,transformShapes: function(matrix) {
		this.zpp_inner.immutable_midstep("Body::transformShapes()");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.transform(matrix);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,align: function() {
		this.zpp_inner.immutable_midstep("Body::align()");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		if(this.zpp_inner.shapes.head == null) throw new js__$Boot_HaxeError("Error: Cannot align empty Body");
		this.zpp_inner.validate_localCOM();
		var dx = nape_geom_Vec2.get(-this.zpp_inner.localCOMx,-this.zpp_inner.localCOMy,null);
		this.translateShapes(dx);
		var dx2 = this.localVectorToWorld(dx);
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).subeq(dx2);
		if(this.zpp_inner.pre_posx < Infinity) {
			var t = 1.0;
			this.zpp_inner.pre_posx -= (function($this) {
				var $r;
				if(dx2 != null && dx2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.x;
				return $r;
			}(this)) * t;
			this.zpp_inner.pre_posy -= (function($this) {
				var $r;
				if(dx2 != null && dx2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.y;
				return $r;
			}(this)) * t;
		}
		dx.dispose();
		dx2.dispose();
		return this;
	}
	,rotate: function(centre,angle) {
		if(centre != null && centre.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(centre == null) throw new js__$Boot_HaxeError("Error: Cannot rotate about a null Vec2");
		if(angle != angle) throw new js__$Boot_HaxeError("Error: Cannot rotate by NaN radians");
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		var del = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).sub(centre);
		del.rotate(angle);
		this.set_position(centre.add(del,true));
		del.dispose();
		var _g = this;
		_g.set_rotation(_g.zpp_inner.rot + angle);
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,setShapeMaterials: function(material) {
		this.zpp_inner.immutable_midstep("Body::setShapeMaterials()");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_material(material);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeFilters: function(filter) {
		this.zpp_inner.immutable_midstep("Body::setShapeFilters()");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_filter(filter);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeFluidProperties: function(fluidProperties) {
		this.zpp_inner.immutable_midstep("Body::setShapeFluidProperties()");
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world is immutable");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_fluidProperties(fluidProperties);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no " + "localCOM");
		if(this.zpp_inner.wrap_localCOM == null) {
			this.zpp_inner.wrap_localCOM = nape_geom_Vec2.get(this.zpp_inner.localCOMx,this.zpp_inner.localCOMy,null);
			this.zpp_inner.wrap_localCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getlocalCOM));
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no " + "worldCOM");
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape_geom_Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().normalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().tangentImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,totalContactsImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var ret = 0.0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			ret += arb.wrapper().get_collisionArbiter().rollingImpulse(this,freshOnly);
		}
		return ret;
	}
	,buoyancyImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().buoyancyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,dragImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().dragImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,totalFluidImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().totalImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,constraintsImpulse: function() {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			var imp = con.outer.bodyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
			cx_ite = cx_ite.next;
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.active) {
				var imp1 = con.outer.bodyImpulse(this);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					if(imp1 != null && imp1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
			cx_ite = cx_ite.next;
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,contains: function(point) {
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(point == null) throw new js__$Boot_HaxeError("Error: Cannot check containment of null point");
		var wasWeak = point.zpp_inner.weak;
		point.zpp_inner.weak = false;
		var retvar;
		retvar = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.outer.contains(point)) {
				retvar = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		point.zpp_inner.weak = wasWeak;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return retvar;
	}
	,toString: function() {
		return (this.zpp_inner.world?"(space::world":"(" + (this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC?"dynamic":this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?"static":"kinematic")) + ")#" + this.zpp_inner_i.id;
	}
	,__class__: nape_phys_Body
});
var nape_phys_BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$BodyList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Body" + "Iterator derp!");
};
$hxClasses["nape.phys.BodyIterator"] = nape_phys_BodyIterator;
nape_phys_BodyIterator.__name__ = true;
nape_phys_BodyIterator.get = function(list) {
	var ret;
	if(nape_phys_BodyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$BodyList.internal = true;
		var ret1 = new nape_phys_BodyIterator();
		zpp_$nape_util_ZPP_$BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_BodyIterator.zpp_pool;
		nape_phys_BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_BodyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_phys_BodyIterator.zpp_pool;
			nape_phys_BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_BodyIterator
};
var nape_phys_BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$BodyList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.BodyList"] = nape_phys_BodyList;
nape_phys_BodyList.__name__ = true;
nape_phys_BodyList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_phys_BodyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_phys_BodyList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Body" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Body" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Body" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Body" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Body" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Body" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_phys_BodyIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_phys_BodyList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_BodyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "Body" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_phys_BodyIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_BodyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_phys_BodyIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_phys_BodyIterator.zpp_pool;
			nape_phys_BodyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_phys_BodyList
};
var nape_phys_BodyType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "BodyType" + " derp!");
};
$hxClasses["nape.phys.BodyType"] = nape_phys_BodyType;
nape_phys_BodyType.__name__ = true;
nape_phys_BodyType.get_STATIC = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
};
nape_phys_BodyType.get_DYNAMIC = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
};
nape_phys_BodyType.get_KINEMATIC = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC;
};
nape_phys_BodyType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
			return $r;
		}(this))) return "STATIC"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
			return $r;
		}(this))) return "DYNAMIC"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC;
			return $r;
		}(this))) return "KINEMATIC"; else return "";
	}
	,__class__: nape_phys_BodyType
};
var nape_phys_Compound = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.zpp_internalAlloc = true;
	nape_phys_Interactor.call(this);
	nape_phys_Interactor.zpp_internalAlloc = false;
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND.zpp_inner);
};
$hxClasses["nape.phys.Compound"] = nape_phys_Compound;
nape_phys_Compound.__name__ = true;
nape_phys_Compound.__super__ = nape_phys_Interactor;
nape_phys_Compound.prototype = $extend(nape_phys_Interactor.prototype,{
	get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		this.zpp_inner.immutable_midstep("Compound::compound");
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(this);
			if(compound != null) compound.zpp_inner.wrap_compounds.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if(this.zpp_inner.compound != null) throw new js__$Boot_HaxeError("Error: Cannot set the space of an inner Compound, only the root Compound space can be set");
		this.zpp_inner.immutable_midstep("Compound::space");
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_compounds.remove(this);
			if(space != null) space.zpp_inner.wrap_compounds.add(this);
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,toString: function() {
		return "Compound" + this.zpp_inner_i.id;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,breakApart: function() {
		this.zpp_inner.breakApart();
	}
	,visitBodies: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: lambda cannot be null for Compound::visitBodies");
		var _g = this.zpp_inner.wrap_bodies.iterator();
		while(_g.hasNext()) {
			var b;
			_g.zpp_critical = false;
			b = _g.zpp_inner.at(_g.zpp_i++);
			lambda(b);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c;
			_g1.zpp_critical = false;
			c = _g1.zpp_inner.at(_g1.zpp_i++);
			c.visitBodies(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: lambda cannot be null for Compound::visitConstraints");
		var _g = this.zpp_inner.wrap_constraints.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c1;
			_g1.zpp_critical = false;
			c1 = _g1.zpp_inner.at(_g1.zpp_i++);
			c1.visitConstraints(lambda);
		}
	}
	,visitCompounds: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: lambda cannot be null for Compound::visitConstraints");
		var _g = this.zpp_inner.wrap_compounds.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,COM: function(weak) {
		if(weak == null) weak = false;
		var ret = nape_geom_Vec2.get(0,0,weak);
		var total = 0.0;
		this.visitBodies(function(b) {
			if(!b.zpp_inner.wrap_shapes.empty()) {
				ret.addeq(((function($this) {
					var $r;
					if(b.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no " + "worldCOM");
					if(b.zpp_inner.wrap_worldCOM == null) {
						b.zpp_inner.wrap_worldCOM = nape_geom_Vec2.get(b.zpp_inner.worldCOMx,b.zpp_inner.worldCOMy,null);
						b.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=b.zpp_inner,$bind($_,$_.getworldCOM));
					}
					$r = b.zpp_inner.wrap_worldCOM;
					return $r;
				}(this))).mul((function($this) {
					var $r;
					if(b.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no mass");
					b.zpp_inner.validate_mass();
					if(b.zpp_inner.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && b.zpp_inner.shapes.head == null) throw new js__$Boot_HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
					$r = b.zpp_inner.cmass;
					return $r;
				}(this)),true));
				if(b.zpp_inner.world) throw new js__$Boot_HaxeError("Error: Space::world has no mass");
				b.zpp_inner.validate_mass();
				if(b.zpp_inner.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && b.zpp_inner.shapes.head == null) throw new js__$Boot_HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
				total += b.zpp_inner.cmass;
			}
		});
		if(total == 0.0) throw new js__$Boot_HaxeError("Error: COM of an empty Compound is undefined silly");
		ret.muleq(1 / total);
		return ret;
	}
	,translate: function(translation) {
		if(translation != null && translation.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(translation == null) throw new js__$Boot_HaxeError("Error: Cannot translate by null Vec2");
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			((function($this) {
				var $r;
				if(b.zpp_inner.wrap_pos == null) b.zpp_inner.setupPosition();
				$r = b.zpp_inner.wrap_pos;
				return $r;
			}(this))).addeq(translation);
		});
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,rotate: function(centre,angle) {
		if(centre != null && centre.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(centre == null) throw new js__$Boot_HaxeError("Error: Cannot rotate about a null Vec2");
		if(angle != angle) throw new js__$Boot_HaxeError("Error: Cannot rotate by NaN radians");
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			b.rotate(centre,angle);
		});
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,__class__: nape_phys_Compound
});
var nape_phys_CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$CompoundList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Compound" + "Iterator derp!");
};
$hxClasses["nape.phys.CompoundIterator"] = nape_phys_CompoundIterator;
nape_phys_CompoundIterator.__name__ = true;
nape_phys_CompoundIterator.get = function(list) {
	var ret;
	if(nape_phys_CompoundIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CompoundList.internal = true;
		var ret1 = new nape_phys_CompoundIterator();
		zpp_$nape_util_ZPP_$CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_CompoundIterator.zpp_pool;
		nape_phys_CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_CompoundIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_phys_CompoundIterator.zpp_pool;
			nape_phys_CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_CompoundIterator
};
var nape_phys_CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CompoundList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.CompoundList"] = nape_phys_CompoundList;
nape_phys_CompoundList.__name__ = true;
nape_phys_CompoundList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_phys_CompoundList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_phys_CompoundList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Compound" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Compound" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Compound" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Compound" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Compound" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Compound" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_phys_CompoundIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_phys_CompoundList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_CompoundIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "Compound" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_phys_CompoundIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_CompoundIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_phys_CompoundIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_phys_CompoundIterator.zpp_pool;
			nape_phys_CompoundIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_phys_CompoundList
};
var nape_phys_FluidProperties = function(density,viscosity) {
	if(viscosity == null) viscosity = 1;
	if(density == null) density = 1;
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool == null) this.zpp_inner = new zpp_$nape_phys_ZPP_$FluidProperties(); else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool;
		zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw new js__$Boot_HaxeError("Error: FluidProperties::" + "density" + " cannot be NaN");
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.density * 1000;
	if(viscosity != this.zpp_inner.viscosity) {
		if(viscosity != viscosity) throw new js__$Boot_HaxeError("Error: FluidProperties::" + "viscosity" + " cannot be NaN");
		if(viscosity < 0) throw new js__$Boot_HaxeError("Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0");
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.viscosity;
};
$hxClasses["nape.phys.FluidProperties"] = nape_phys_FluidProperties;
nape_phys_FluidProperties.__name__ = true;
nape_phys_FluidProperties.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,copy: function() {
		var ret = new nape_phys_FluidProperties(this.zpp_inner.density * 1000,this.zpp_inner.viscosity);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		ret.set_gravity(this.zpp_inner.wrap_gravity);
		return ret;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			if(density != density) throw new js__$Boot_HaxeError("Error: FluidProperties::" + "density" + " cannot be NaN");
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.density * 1000;
	}
	,get_viscosity: function() {
		return this.zpp_inner.viscosity;
	}
	,set_viscosity: function(viscosity) {
		if(viscosity != this.zpp_inner.viscosity) {
			if(viscosity != viscosity) throw new js__$Boot_HaxeError("Error: FluidProperties::" + "viscosity" + " cannot be NaN");
			if(viscosity < 0) throw new js__$Boot_HaxeError("Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0");
			this.zpp_inner.viscosity = viscosity / 1;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.viscosity;
	}
	,get_gravity: function() {
		return this.zpp_inner.wrap_gravity;
	}
	,set_gravity: function(gravity) {
		if(gravity == null) {
			if(this.zpp_inner.wrap_gravity != null) {
				this.zpp_inner.wrap_gravity.zpp_inner._inuse = false;
				this.zpp_inner.wrap_gravity.dispose();
				this.zpp_inner.wrap_gravity = null;
			}
		} else {
			if(gravity != null && gravity.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
			this.zpp_inner.wrap_gravity.set(gravity);
		}
		return this.zpp_inner.wrap_gravity;
	}
	,toString: function() {
		return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
	}
	,__class__: nape_phys_FluidProperties
};
var nape_phys_GravMassMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "GravMassMode" + " derp!");
};
$hxClasses["nape.phys.GravMassMode"] = nape_phys_GravMassMode;
nape_phys_GravMassMode.__name__ = true;
nape_phys_GravMassMode.get_DEFAULT = function() {
	if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
};
nape_phys_GravMassMode.get_FIXED = function() {
	if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED;
};
nape_phys_GravMassMode.get_SCALED = function() {
	if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
};
nape_phys_GravMassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
			return $r;
		}(this))) return "SCALED"; else return "";
	}
	,__class__: nape_phys_GravMassMode
};
var nape_phys_InertiaMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "InertiaMode" + " derp!");
};
$hxClasses["nape.phys.InertiaMode"] = nape_phys_InertiaMode;
nape_phys_InertiaMode.__name__ = true;
nape_phys_InertiaMode.get_DEFAULT = function() {
	if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT;
};
nape_phys_InertiaMode.get_FIXED = function() {
	if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
};
nape_phys_InertiaMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape_phys_InertiaMode
};
var nape_phys_InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$InteractorList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Interactor" + "Iterator derp!");
};
$hxClasses["nape.phys.InteractorIterator"] = nape_phys_InteractorIterator;
nape_phys_InteractorIterator.__name__ = true;
nape_phys_InteractorIterator.get = function(list) {
	var ret;
	if(nape_phys_InteractorIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractorList.internal = true;
		var ret1 = new nape_phys_InteractorIterator();
		zpp_$nape_util_ZPP_$InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_InteractorIterator.zpp_pool;
		nape_phys_InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_InteractorIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_phys_InteractorIterator.zpp_pool;
			nape_phys_InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_InteractorIterator
};
var nape_phys_InteractorList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractorList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.InteractorList"] = nape_phys_InteractorList;
nape_phys_InteractorList.__name__ = true;
nape_phys_InteractorList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_phys_InteractorList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_phys_InteractorList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner_i);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer_i;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Interactor" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner_i); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Interactor" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			} else this.zpp_inner.inner.add(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Interactor" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer_i;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Interactor" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer_i;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Interactor" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner_i) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Interactor" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_phys_InteractorIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_phys_InteractorList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_InteractorIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "Interactor" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_phys_InteractorIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_InteractorIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_phys_InteractorIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_phys_InteractorIterator.zpp_pool;
			nape_phys_InteractorIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_phys_InteractorList
};
var nape_phys_MassMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "MassMode" + " derp!");
};
$hxClasses["nape.phys.MassMode"] = nape_phys_MassMode;
nape_phys_MassMode.__name__ = true;
nape_phys_MassMode.get_DEFAULT = function() {
	if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
};
nape_phys_MassMode.get_FIXED = function() {
	if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.MassMode_FIXED;
};
nape_phys_MassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape_phys_MassMode
};
var nape_phys_Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) rollingFriction = 0.001;
	if(density == null) density = 1;
	if(staticFriction == null) staticFriction = 2.0;
	if(dynamicFriction == null) dynamicFriction = 1.0;
	if(elasticity == null) elasticity = 0.0;
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) this.zpp_inner = new zpp_$nape_phys_ZPP_$Material(); else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$Material.zpp_pool;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		if(elasticity != elasticity) throw new js__$Boot_HaxeError("Error: Material::" + "elasticity" + " cannot be NaN");
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	this.zpp_inner.elasticity;
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		if(dynamicFriction != dynamicFriction) throw new js__$Boot_HaxeError("Error: Material::" + "dynamicFriction" + " cannot be NaN");
		if(dynamicFriction < 0) throw new js__$Boot_HaxeError("Error: Material::" + "dynamicFriction" + " cannot be negative");
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ANGDRAG | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	this.zpp_inner.dynamicFriction;
	if(staticFriction != this.zpp_inner.staticFriction) {
		if(staticFriction != staticFriction) throw new js__$Boot_HaxeError("Error: Material::" + "staticFriction" + " cannot be NaN");
		if(staticFriction < 0) throw new js__$Boot_HaxeError("Error: Material::" + "staticFriction" + " cannot be negative");
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	this.zpp_inner.staticFriction;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw new js__$Boot_HaxeError("Error: Material::" + "density" + " cannot be NaN");
		if(density < 0) throw new js__$Boot_HaxeError("Error: Material::density must be positive");
		if(density < 0) throw new js__$Boot_HaxeError("Error: Material::" + "density" + " cannot be negative");
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.PROPS);
	}
	this.zpp_inner.density * 1000;
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		if(rollingFriction != rollingFriction) throw new js__$Boot_HaxeError("Error: Material::" + "rollingFriction" + " cannot be NaN");
		if(rollingFriction < 0) throw new js__$Boot_HaxeError("Error: Material::" + "rollingFriction" + " cannot be negative");
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	this.zpp_inner.rollingFriction;
};
$hxClasses["nape.phys.Material"] = nape_phys_Material;
nape_phys_Material.__name__ = true;
nape_phys_Material.wood = function() {
	return new nape_phys_Material(0.4,0.2,0.38,0.7,0.005);
};
nape_phys_Material.steel = function() {
	return new nape_phys_Material(0.2,0.57,0.74,7.8,0.001);
};
nape_phys_Material.ice = function() {
	return new nape_phys_Material(0.3,0.03,0.1,0.9,0.0001);
};
nape_phys_Material.rubber = function() {
	return new nape_phys_Material(0.8,1.0,1.4,1.5,0.01);
};
nape_phys_Material.glass = function() {
	return new nape_phys_Material(0.4,0.4,0.94,2.6,0.002);
};
nape_phys_Material.sand = function() {
	return new nape_phys_Material(-1.0,0.45,0.6,1.6,16.0);
};
nape_phys_Material.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,copy: function() {
		var ret = new nape_phys_Material(this.zpp_inner.elasticity,this.zpp_inner.dynamicFriction,this.zpp_inner.staticFriction,this.zpp_inner.density * 1000,this.zpp_inner.rollingFriction);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		return ret;
	}
	,get_elasticity: function() {
		return this.zpp_inner.elasticity;
	}
	,set_elasticity: function(elasticity) {
		if(elasticity != this.zpp_inner.elasticity) {
			if(elasticity != elasticity) throw new js__$Boot_HaxeError("Error: Material::" + "elasticity" + " cannot be NaN");
			this.zpp_inner.elasticity = elasticity / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.zpp_inner.elasticity;
	}
	,get_dynamicFriction: function() {
		return this.zpp_inner.dynamicFriction;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		if(dynamicFriction != this.zpp_inner.dynamicFriction) {
			if(dynamicFriction != dynamicFriction) throw new js__$Boot_HaxeError("Error: Material::" + "dynamicFriction" + " cannot be NaN");
			if(dynamicFriction < 0) throw new js__$Boot_HaxeError("Error: Material::" + "dynamicFriction" + " cannot be negative");
			this.zpp_inner.dynamicFriction = dynamicFriction / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ANGDRAG | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.zpp_inner.dynamicFriction;
	}
	,get_staticFriction: function() {
		return this.zpp_inner.staticFriction;
	}
	,set_staticFriction: function(staticFriction) {
		if(staticFriction != this.zpp_inner.staticFriction) {
			if(staticFriction != staticFriction) throw new js__$Boot_HaxeError("Error: Material::" + "staticFriction" + " cannot be NaN");
			if(staticFriction < 0) throw new js__$Boot_HaxeError("Error: Material::" + "staticFriction" + " cannot be negative");
			this.zpp_inner.staticFriction = staticFriction / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.zpp_inner.staticFriction;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			if(density != density) throw new js__$Boot_HaxeError("Error: Material::" + "density" + " cannot be NaN");
			if(density < 0) throw new js__$Boot_HaxeError("Error: Material::density must be positive");
			if(density < 0) throw new js__$Boot_HaxeError("Error: Material::" + "density" + " cannot be negative");
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.PROPS);
		}
		return this.zpp_inner.density * 1000;
	}
	,get_rollingFriction: function() {
		return this.zpp_inner.rollingFriction;
	}
	,set_rollingFriction: function(rollingFriction) {
		if(rollingFriction != this.zpp_inner.rollingFriction) {
			if(rollingFriction != rollingFriction) throw new js__$Boot_HaxeError("Error: Material::" + "rollingFriction" + " cannot be NaN");
			if(rollingFriction < 0) throw new js__$Boot_HaxeError("Error: Material::" + "rollingFriction" + " cannot be negative");
			this.zpp_inner.rollingFriction = rollingFriction / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.zpp_inner.rollingFriction;
	}
	,toString: function() {
		return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
	}
	,__class__: nape_phys_Material
};
var nape_shape_Shape = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.zpp_internalAlloc = true;
	nape_phys_Interactor.call(this);
	nape_phys_Interactor.zpp_internalAlloc = false;
	if(!nape_shape_Shape.zpp_internalAlloc) throw new js__$Boot_HaxeError("Error: Shape cannot be instantiated derp!");
};
$hxClasses["nape.shape.Shape"] = nape_shape_Shape;
nape_shape_Shape.__name__ = true;
nape_shape_Shape.__super__ = nape_phys_Interactor;
nape_shape_Shape.prototype = $extend(nape_phys_Interactor.prototype,{
	get_type: function() {
		return zpp_$nape_shape_ZPP_$Shape.types[this.zpp_inner.type];
	}
	,isCircle: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE;
	}
	,isPolygon: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON;
	}
	,get_body: function() {
		if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
	}
	,set_body: function(body) {
		this.zpp_inner.immutable_midstep("Shape::body");
		if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) != body) {
			if(this.zpp_inner.body != null) (this.zpp_inner.body != null?this.zpp_inner.body.outer:null).zpp_inner.wrap_shapes.remove(this);
			if(body != null) body.zpp_inner.wrap_shapes.add(this);
		}
		if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
	}
	,get_castCircle: function() {
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) return this.zpp_inner.circle.outer_zn; else return null;
	}
	,get_castPolygon: function() {
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) return this.zpp_inner.polygon.outer_zn; else return null;
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape_geom_Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.wrap_localCOM == null) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,set_localCOM: function(localCOM) {
		this.zpp_inner.immutable_midstep("Body::localCOM");
		if(localCOM != null && localCOM.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) throw new js__$Boot_HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
		if(localCOM == null) throw new js__$Boot_HaxeError("Error: Shape::localCOM cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_localCOM == null) {
				if($this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
			}
			$r = $this.zpp_inner.wrap_localCOM;
			return $r;
		}(this))).set(localCOM);
		if(this.zpp_inner.wrap_localCOM == null) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,get_area: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.area;
	}
	,get_inertia: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.inertia;
	}
	,get_angDrag: function() {
		this.zpp_inner.validate_angDrag();
		return this.zpp_inner.angDrag;
	}
	,get_material: function() {
		return this.zpp_inner.material.wrapper();
	}
	,set_material: function(material) {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		return this.zpp_inner.material.wrapper();
	}
	,get_filter: function() {
		return this.zpp_inner.filter.wrapper();
	}
	,set_filter: function(filter) {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		return this.zpp_inner.filter.wrapper();
	}
	,get_fluidProperties: function() {
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape_phys_FluidProperties().zpp_inner);
		return this.zpp_inner.fluidProperties.wrapper();
	}
	,set_fluidProperties: function(fluidProperties) {
		if(fluidProperties == null) throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false");
		this.zpp_inner.setFluid(fluidProperties.zpp_inner);
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape_phys_FluidProperties().zpp_inner);
		return this.zpp_inner.fluidProperties.wrapper();
	}
	,get_fluidEnabled: function() {
		return this.zpp_inner.fluidEnabled;
	}
	,set_fluidEnabled: function(fluidEnabled) {
		this.zpp_inner.immutable_midstep("Shape::fluidEnabled");
		this.zpp_inner.fluidEnabled = fluidEnabled;
		if(fluidEnabled && this.zpp_inner.fluidProperties == null) this.set_fluidProperties(new nape_phys_FluidProperties());
		this.zpp_inner.wake();
		return this.zpp_inner.fluidEnabled;
	}
	,get_sensorEnabled: function() {
		return this.zpp_inner.sensorEnabled;
	}
	,set_sensorEnabled: function(sensorEnabled) {
		this.zpp_inner.immutable_midstep("Shape::sensorEnabled");
		this.zpp_inner.sensorEnabled = sensorEnabled;
		this.zpp_inner.wake();
		return this.zpp_inner.sensorEnabled;
	}
	,get_bounds: function() {
		return this.zpp_inner.aabb.wrapper();
	}
	,translate: function(translation) {
		this.zpp_inner.immutable_midstep("Shape::translate()");
		if(translation != null && translation.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) throw new js__$Boot_HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
		if(translation == null) throw new js__$Boot_HaxeError("Error: Cannot displace Shape by null Vec2");
		if(translation.lsq() > 0) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__translate((function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this))); else this.zpp_inner.polygon.__translate((function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this)));
		}
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,scale: function(scalex,scaley) {
		this.zpp_inner.immutable_midstep("Shape::scale()");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) throw new js__$Boot_HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
		if(scalex != scalex || scaley != scaley) throw new js__$Boot_HaxeError("Error: Cannot scale Shape by NaN");
		if(scalex == 0 || scaley == 0) throw new js__$Boot_HaxeError("Error: Cannot Scale shape by a factor of 0");
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			var d = scalex * scalex - scaley * scaley;
			if(d * d < nape_Config.epsilon * nape_Config.epsilon) this.zpp_inner.circle.__scale(scalex,scaley); else throw new js__$Boot_HaxeError("Error: Cannot perform a non equal scaling on a Circle");
		} else this.zpp_inner.polygon.__scale(scalex,scaley);
		return this;
	}
	,rotate: function(angle) {
		this.zpp_inner.immutable_midstep("Shape::rotate()");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) throw new js__$Boot_HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
		if(angle != angle) throw new js__$Boot_HaxeError("Error: Cannot rotate Shape by NaN");
		var dr = angle % (2 * Math.PI);
		if(dr != 0.0) {
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__rotate(sin,cos); else this.zpp_inner.polygon.__rotate(sin,cos);
		}
		return this;
	}
	,transform: function(matrix) {
		this.zpp_inner.immutable_midstep("Shape::transform()");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) throw new js__$Boot_HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
		if(matrix == null) throw new js__$Boot_HaxeError("Error: Cannot transform Shape by null matrix");
		if(matrix.singular()) throw new js__$Boot_HaxeError("Error: Cannot transform Shape by a singular matrix");
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			if(matrix.equiorthogonal()) this.zpp_inner.circle.__transform(matrix); else throw new js__$Boot_HaxeError("Error: Cannot transform Circle by a non equiorthogonal matrix");
		} else this.zpp_inner.polygon.__transform(matrix);
		return this;
	}
	,contains: function(point) {
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(point == null) throw new js__$Boot_HaxeError("Cannot check null point for containment");
		if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) == null) throw new js__$Boot_HaxeError("Error: Shape is not well defined without a Body");
		zpp_$nape_geom_ZPP_$Geom.validateShape(this.zpp_inner);
		point.zpp_inner.validate();
		var ret = zpp_$nape_geom_ZPP_$Collide.shapeContains(this.zpp_inner,point.zpp_inner);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,toString: function() {
		var ret;
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ret = "Circle"; else ret = "Polygon";
		return ret + "#" + this.zpp_inner_i.id;
	}
	,__class__: nape_shape_Shape
});
var nape_shape_Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.zpp_internalAlloc = true;
	nape_shape_Shape.call(this);
	nape_shape_Shape.zpp_internalAlloc = false;
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.zpp_inner.body.space != null) throw new js__$Boot_HaxeError("Error: Cannot modifiy radius of Circle contained in static object once added to space");
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) throw new js__$Boot_HaxeError("Error: Circle::radius cannot be NaN");
		if(radius < nape_Config.epsilon) throw new js__$Boot_HaxeError("Error: Circle::radius (" + radius + ") must be > Config.epsilon");
		if(radius > 1e100) throw new js__$Boot_HaxeError("Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX");
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	this.zpp_inner_zn.radius;
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		if(localCOM != null && localCOM.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(localCOM != null && localCOM.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMx = localCOM.zpp_inner.x;
		if(localCOM != null && localCOM.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMy = localCOM.zpp_inner.y;
		if(localCOM.zpp_inner.weak) {
			localCOM.dispose();
			true;
		} else false;
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material(); else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter(); else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE.zpp_inner);
};
$hxClasses["nape.shape.Circle"] = nape_shape_Circle;
nape_shape_Circle.__name__ = true;
nape_shape_Circle.__super__ = nape_shape_Shape;
nape_shape_Circle.prototype = $extend(nape_shape_Shape.prototype,{
	get_radius: function() {
		return this.zpp_inner_zn.radius;
	}
	,set_radius: function(radius) {
		this.zpp_inner.immutable_midstep("Circle::radius");
		if(this.zpp_inner.body != null && this.zpp_inner.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.zpp_inner.body.space != null) throw new js__$Boot_HaxeError("Error: Cannot modifiy radius of Circle contained in static object once added to space");
		if(radius != this.zpp_inner_zn.radius) {
			if(radius != radius) throw new js__$Boot_HaxeError("Error: Circle::radius cannot be NaN");
			if(radius < nape_Config.epsilon) throw new js__$Boot_HaxeError("Error: Circle::radius (" + radius + ") must be > Config.epsilon");
			if(radius > 1e100) throw new js__$Boot_HaxeError("Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX");
			this.zpp_inner_zn.radius = radius;
			this.zpp_inner_zn.invalidate_radius();
		}
		return this.zpp_inner_zn.radius;
	}
	,__class__: nape_shape_Circle
});
var nape_shape_Edge = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_shape_ZPP_$Edge.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate an Edge derp!");
};
$hxClasses["nape.shape.Edge"] = nape_shape_Edge;
nape_shape_Edge.__name__ = true;
nape_shape_Edge.prototype = {
	get_polygon: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		return this.zpp_inner.polygon.outer_zn;
	}
	,get_localNormal: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		if(this.zpp_inner.wrap_lnorm == null) this.zpp_inner.getlnorm();
		return this.zpp_inner.wrap_lnorm;
	}
	,get_worldNormal: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		if(this.zpp_inner.wrap_gnorm == null) this.zpp_inner.getgnorm();
		return this.zpp_inner.wrap_gnorm;
	}
	,get_length: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.length;
	}
	,get_localProjection: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lprojection;
	}
	,get_worldProjection: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		if(this.zpp_inner.polygon.body == null) throw new js__$Boot_HaxeError("Error: Edge world projection only makes sense for Polygons contained within a rigid body");
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gprojection;
	}
	,get_localVertex1: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp0.wrapper();
	}
	,get_localVertex2: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp1.wrapper();
	}
	,get_worldVertex1: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp0.wrapper();
	}
	,get_worldVertex2: function() {
		if(this.zpp_inner.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not current in use");
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp1.wrapper();
	}
	,toString: function() {
		if(this.zpp_inner.polygon == null) return "Edge(object-pooled)"; else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			this.zpp_inner.polygon.validate_gaxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
	,__class__: nape_shape_Edge
};
var nape_shape_EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$EdgeList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Edge" + "Iterator derp!");
};
$hxClasses["nape.shape.EdgeIterator"] = nape_shape_EdgeIterator;
nape_shape_EdgeIterator.__name__ = true;
nape_shape_EdgeIterator.get = function(list) {
	var ret;
	if(nape_shape_EdgeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$EdgeList.internal = true;
		var ret1 = new nape_shape_EdgeIterator();
		zpp_$nape_util_ZPP_$EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_EdgeIterator.zpp_pool;
		nape_shape_EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_EdgeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_shape_EdgeIterator.zpp_pool;
			nape_shape_EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_EdgeIterator
};
var nape_shape_EdgeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$EdgeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.shape.EdgeList"] = nape_shape_EdgeList;
nape_shape_EdgeList.__name__ = true;
nape_shape_EdgeList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_shape_EdgeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_shape_EdgeList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) if(index == this.get_length() - 1) index = index; else index = this.get_length() - 2 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Edge" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Edge" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Edge" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Edge" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Edge" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Edge" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_shape_EdgeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_shape_EdgeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_shape_EdgeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "Edge" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_shape_EdgeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_shape_EdgeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_shape_EdgeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_shape_EdgeIterator.zpp_pool;
			nape_shape_EdgeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_shape_EdgeList
};
var nape_shape_Polygon = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.zpp_internalAlloc = true;
	nape_shape_Shape.call(this);
	nape_shape_Shape.zpp_internalAlloc = false;
	if(localVerts == null) throw new js__$Boot_HaxeError("Error: localVerts cannot be null");
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			if(vite == null) throw new js__$Boot_HaxeError("Error: Array<Vec2> contains null objects");
			if(!js_Boot.__instanceof(vite,nape_geom_Vec2)) throw new js__$Boot_HaxeError("Error: Array<Vec2> contains non Vec2 objects");
			var x = vite;
			if(x != null && x.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x != null && x.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$r = nape_geom_Vec2.get((function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					x.zpp_inner.validate();
					$r = x.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					x.zpp_inner.validate();
					$r = x.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(js_Boot.__instanceof(localVerts,nape_geom_Vec2List)) {
		var lv1 = localVerts;
		var _g1 = lv1.iterator();
		while(_g1.hasNext()) {
			var x1;
			_g1.zpp_critical = false;
			x1 = _g1.zpp_inner.at(_g1.zpp_i++);
			if(x1 == null) throw new js__$Boot_HaxeError("Error: Vec2List contains null objects");
			if(x1 != null && x1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x1 != null && x1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				$r = nape_geom_Vec2.get((function($this) {
					var $r;
					if(x1 != null && x1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					x1.zpp_inner.validate();
					$r = x1.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x1 != null && x1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					x1.zpp_inner.validate();
					$r = x1.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(js_Boot.__instanceof(localVerts,nape_geom_GeomPoly)) {
		var lv2 = localVerts;
		if(lv2 != null && lv2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		var verts = lv2.zpp_inner.vertices;
		if(verts != null) {
			var vite1 = verts;
			do {
				var x2 = nape_geom_Vec2.get(vite1.x,vite1.y,null);
				vite1 = vite1.next;
				((function($this) {
					var $r;
					if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
					$r = $this.zpp_inner_zn.wrap_lverts;
					return $r;
				}(this))).push((function($this) {
					var $r;
					if(x2 != null && x2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					$r = nape_geom_Vec2.get((function($this) {
						var $r;
						if(x2 != null && x2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						x2.zpp_inner.validate();
						$r = x2.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(x2 != null && x2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						x2.zpp_inner.validate();
						$r = x2.zpp_inner.y;
						return $r;
					}($this)),false);
					return $r;
				}(this)));
				x2.dispose();
			} while(vite1 != verts);
		}
	} else throw new js__$Boot_HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv3 = localVerts;
		var i = 0;
		while(i < lv3.length) {
			var cur = lv3[i];
			if(cur.zpp_inner.weak?(function($this) {
				var $r;
				cur.dispose();
				$r = true;
				return $r;
			}(this)):false) {
				lv3.splice(i,1);
				continue;
			}
			i++;
		}
	} else if(js_Boot.__instanceof(localVerts,nape_geom_Vec2List)) {
		var lv4 = localVerts;
		if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
		var ins = lv4.zpp_inner.inner;
		var pre = null;
		var cur1 = ins.head;
		while(cur1 != null) {
			var x3 = cur1.elt;
			if(x3.outer.zpp_inner.weak) {
				cur1 = ins.erase(pre);
				if(x3.outer.zpp_inner.weak) {
					x3.outer.dispose();
					true;
				} else false;
			} else {
				pre = cur1;
				cur1 = cur1.next;
			}
		}
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material(); else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter(); else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw new js__$Boot_HaxeError("Error: Cannot assign null as Shape filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE.zpp_inner);
};
$hxClasses["nape.shape.Polygon"] = nape_shape_Polygon;
nape_shape_Polygon.__name__ = true;
nape_shape_Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) weak = false;
	if(x != x || y != y || width != width || height != height) throw new js__$Boot_HaxeError("Error: Polygon.rect cannot accept NaN arguments");
	return [nape_geom_Vec2.get(x,y,weak),nape_geom_Vec2.get(x + width,y,weak),nape_geom_Vec2.get(x + width,y + height,weak),nape_geom_Vec2.get(x,y + height,weak)];
};
nape_shape_Polygon.box = function(width,height,weak) {
	if(weak == null) weak = false;
	if(width != width || height != height) throw new js__$Boot_HaxeError("Error: Polygon.box cannot accept NaN arguments");
	return nape_shape_Polygon.rect(-width / 2,-height / 2,width,height,weak);
};
nape_shape_Polygon.regular = function(xRadius,yRadius,edgeCount,angleOffset,weak) {
	if(weak == null) weak = false;
	if(angleOffset == null) angleOffset = 0.0;
	if(xRadius != xRadius || yRadius != yRadius || angleOffset != angleOffset) throw new js__$Boot_HaxeError("Error: Polygon.regular cannot accept NaN arguments");
	var ret = [];
	var dangle = Math.PI * 2 / edgeCount;
	var _g = 0;
	while(_g < edgeCount) {
		var i = _g++;
		var ang = i * dangle + angleOffset;
		var x = nape_geom_Vec2.get(Math.cos(ang) * xRadius,Math.sin(ang) * yRadius,weak);
		ret.push(x);
	}
	return ret;
};
nape_shape_Polygon.__super__ = nape_shape_Shape;
nape_shape_Polygon.prototype = $extend(nape_shape_Shape.prototype,{
	get_localVerts: function() {
		if(this.zpp_inner_zn.wrap_lverts == null) this.zpp_inner_zn.getlverts();
		return this.zpp_inner_zn.wrap_lverts;
	}
	,get_worldVerts: function() {
		if(this.zpp_inner_zn.wrap_gverts == null) this.zpp_inner_zn.getgverts();
		return this.zpp_inner_zn.wrap_gverts;
	}
	,get_edges: function() {
		if(this.zpp_inner_zn.wrap_edges == null) this.zpp_inner_zn.getedges();
		return this.zpp_inner_zn.wrap_edges;
	}
	,validity: function() {
		return this.zpp_inner_zn.valid();
	}
	,__class__: nape_shape_Polygon
});
var nape_shape_ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ShapeList.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Shape" + "Iterator derp!");
};
$hxClasses["nape.shape.ShapeIterator"] = nape_shape_ShapeIterator;
nape_shape_ShapeIterator.__name__ = true;
nape_shape_ShapeIterator.get = function(list) {
	var ret;
	if(nape_shape_ShapeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ShapeList.internal = true;
		var ret1 = new nape_shape_ShapeIterator();
		zpp_$nape_util_ZPP_$ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_ShapeIterator.zpp_pool;
		nape_shape_ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_ShapeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_shape_ShapeIterator.zpp_pool;
			nape_shape_ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_ShapeIterator
};
var nape_shape_ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ShapeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.shape.ShapeList"] = nape_shape_ShapeList;
nape_shape_ShapeList.__name__ = true;
nape_shape_ShapeList.fromArray = function(array) {
	if(array == null) throw new js__$Boot_HaxeError("Error: Cannot convert null Array to Nape list");
	var ret = new nape_shape_ShapeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_shape_ShapeList.prototype = {
	get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Shape" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Shape" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Shape" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Shape" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Shape" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Shape" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_shape_ShapeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_shape_ShapeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?(function($this) {
				var $r;
				throw new js__$Boot_HaxeError("Error: " + "Shape" + " is not a copyable type");
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,merge: function(xs) {
		if(xs == null) throw new js__$Boot_HaxeError("Error: Cannot merge with null list");
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot execute null on list elements");
		var it;
		this.zpp_inner.valmod();
		it = nape_shape_ShapeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_shape_ShapeIterator.zpp_pool;
			nape_shape_ShapeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: Cannot select elements of list with null");
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_shape_ShapeList
};
var nape_shape_ShapeType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ShapeType" + " derp!");
};
$hxClasses["nape.shape.ShapeType"] = nape_shape_ShapeType;
nape_shape_ShapeType.__name__ = true;
nape_shape_ShapeType.get_CIRCLE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE;
};
nape_shape_ShapeType.get_POLYGON = function() {
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON;
};
nape_shape_ShapeType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE;
			return $r;
		}(this))) return "CIRCLE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON;
			return $r;
		}(this))) return "POLYGON"; else return "";
	}
	,__class__: nape_shape_ShapeType
};
var nape_shape_ValidationResult = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "ValidationResult" + " derp!");
};
$hxClasses["nape.shape.ValidationResult"] = nape_shape_ValidationResult;
nape_shape_ValidationResult.__name__ = true;
nape_shape_ValidationResult.get_VALID = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
};
nape_shape_ValidationResult.get_DEGENERATE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
};
nape_shape_ValidationResult.get_CONCAVE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE;
};
nape_shape_ValidationResult.get_SELF_INTERSECTING = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING;
};
nape_shape_ValidationResult.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
			return $r;
		}(this))) return "VALID"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
			return $r;
		}(this))) return "DEGENERATE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE;
			return $r;
		}(this))) return "CONCAVE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING;
			return $r;
		}(this))) return "SELF_INTERSECTING"; else return "";
	}
	,__class__: nape_shape_ValidationResult
};
var nape_space_Broadphase = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) throw new js__$Boot_HaxeError("Error: Cannot instantiate " + "Broadphase" + " derp!");
};
$hxClasses["nape.space.Broadphase"] = nape_space_Broadphase;
nape_space_Broadphase.__name__ = true;
nape_space_Broadphase.get_DYNAMIC_AABB_TREE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
};
nape_space_Broadphase.get_SWEEP_AND_PRUNE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE;
};
nape_space_Broadphase.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
			return $r;
		}(this))) return "DYNAMIC_AABB_TREE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE;
			return $r;
		}(this))) return "SWEEP_AND_PRUNE"; else return "";
	}
	,__class__: nape_space_Broadphase
};
var nape_space_Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	if(gravity != null && gravity.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	this.zpp_inner = new zpp_$nape_space_ZPP_$Space(gravity == null?null:gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			gravity.dispose();
			true;
		} else false;
	}
};
$hxClasses["nape.space.Space"] = nape_space_Space;
nape_space_Space.__name__ = true;
nape_space_Space.prototype = {
	get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_gravity: function() {
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		return this.zpp_inner.wrap_gravity;
	}
	,set_gravity: function(gravity) {
		if(gravity != null && gravity.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(gravity == null) throw new js__$Boot_HaxeError("Error: Space::gravity cannot be null");
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
			$r = $this.zpp_inner.wrap_gravity;
			return $r;
		}(this))).set(gravity);
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		return this.zpp_inner.wrap_gravity;
	}
	,get_broadphase: function() {
		if(this.zpp_inner.bphase.is_sweep) {
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
		}
	}
	,get_sortContacts: function() {
		return this.zpp_inner.sortcontacts;
	}
	,set_sortContacts: function(sortContacts) {
		this.zpp_inner.sortcontacts = sortContacts;
		return this.zpp_inner.sortcontacts;
	}
	,get_worldAngularDrag: function() {
		return this.zpp_inner.global_ang_drag;
	}
	,set_worldAngularDrag: function(worldAngularDrag) {
		var d = worldAngularDrag;
		if(d != d) throw new js__$Boot_HaxeError("Error: Space::worldAngularDrag cannot be NaN");
		this.zpp_inner.global_ang_drag = d;
		return this.zpp_inner.global_ang_drag;
	}
	,get_worldLinearDrag: function() {
		return this.zpp_inner.global_lin_drag;
	}
	,set_worldLinearDrag: function(worldLinearDrag) {
		var d = worldLinearDrag;
		if(d != d) throw new js__$Boot_HaxeError("Error: Space::worldLinearDrag cannot be NaN");
		this.zpp_inner.global_lin_drag = d;
		return this.zpp_inner.global_lin_drag;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_liveBodies: function() {
		return this.zpp_inner.wrap_live;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_liveConstraints: function() {
		return this.zpp_inner.wrap_livecon;
	}
	,visitBodies: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: lambda cannot be null for Space::visitBodies");
		var _g = this.zpp_inner.wrap_bodies.iterator();
		while(_g.hasNext()) {
			var b;
			_g.zpp_critical = false;
			b = _g.zpp_inner.at(_g.zpp_i++);
			lambda(b);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c;
			_g1.zpp_critical = false;
			c = _g1.zpp_inner.at(_g1.zpp_i++);
			c.visitBodies(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: lambda cannot be null for Space::visitConstraints");
		var _g = this.zpp_inner.wrap_constraints.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c1;
			_g1.zpp_critical = false;
			c1 = _g1.zpp_inner.at(_g1.zpp_i++);
			c1.visitConstraints(lambda);
		}
	}
	,visitCompounds: function(lambda) {
		if(lambda == null) throw new js__$Boot_HaxeError("Error: lambda cannot be null for Space::visitCompounds");
		var _g = this.zpp_inner.wrap_compounds.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,get_world: function() {
		return this.zpp_inner.__static;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) {
			var ret = new zpp_$nape_dynamics_ZPP_$SpaceArbiterList();
			ret.space = this.zpp_inner;
			this.zpp_inner.wrap_arbiters = ret;
		}
		return this.zpp_inner.wrap_arbiters;
	}
	,get_listeners: function() {
		return this.zpp_inner.wrap_listeners;
	}
	,clear: function() {
		if(this.zpp_inner.midstep) throw new js__$Boot_HaxeError("Error: Space::clear() cannot be called during space step()");
		this.zpp_inner.clear();
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		if(positionIterations == null) positionIterations = 10;
		if(velocityIterations == null) velocityIterations = 10;
		if(deltaTime != deltaTime) throw new js__$Boot_HaxeError("Error: deltaTime cannot be NaN");
		if(deltaTime <= 0) throw new js__$Boot_HaxeError("Error: deltaTime must be strictly positive");
		if(velocityIterations <= 0) throw new js__$Boot_HaxeError("Error: must use atleast one velocity iteration");
		if(positionIterations <= 0) throw new js__$Boot_HaxeError("Error: must use atleast one position iteration");
		this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
	}
	,get_timeStamp: function() {
		return this.zpp_inner.stamp;
	}
	,get_elapsedTime: function() {
		return this.zpp_inner.time;
	}
	,interactionType: function(shape1,shape2) {
		if(shape1 == null || shape2 == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate interaction type for null shapes");
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate interaction type for shapes not part of a Body");
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null).zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null).zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) return null;
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null)) return null;
		var s1 = shape1.zpp_inner;
		var s2 = shape2.zpp_inner;
		var _g = this.zpp_inner.interactionType(s1,s2,s1.body,s2.body);
		switch(_g) {
		case 0:
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
		case 1:
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
		case 2:
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
		default:
			return null;
		}
	}
	,shapesUnderPoint: function(point,filter,output) {
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(point == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate shapes under a null point :)");
		var ret = this.zpp_inner.shapesUnderPoint((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,bodiesUnderPoint: function(point,filter,output) {
		if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(point == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate objects under a null point :)");
		var ret = this.zpp_inner.bodiesUnderPoint((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		if(aabb == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate shapes in a null AABB :)");
		if((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.width();
			return $r;
		}(this)) == 0 || (function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.height();
			return $r;
		}(this)) == 0) throw new js__$Boot_HaxeError("Error: Cannot evaluate shapes in degenerate AABB :/");
		return this.zpp_inner.shapesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		if(aabb == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate objects in a null AABB :)");
		if((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.width();
			return $r;
		}(this)) == 0 || (function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.height();
			return $r;
		}(this)) == 0) throw new js__$Boot_HaxeError("Error: Cannot evaluate objects in degenerate AABB :/");
		return this.zpp_inner.bodiesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		if(position != null && position.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(position == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate shapes at null circle :)");
		if(radius != radius) throw new js__$Boot_HaxeError("Error: Circle radius cannot be NaN");
		if(radius <= 0) throw new js__$Boot_HaxeError("Error: Circle radius must be strictly positive");
		var ret = this.zpp_inner.shapesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,bodiesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		if(position != null && position.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		if(position == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate objects at null circle :)");
		if(radius != radius) throw new js__$Boot_HaxeError("Error: Circle radius cannot be NaN");
		if(radius <= 0) throw new js__$Boot_HaxeError("Error: Circle radius must be strictly positive");
		var ret = this.zpp_inner.bodiesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		if(shape == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate shapes in a null shapes :)");
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw new js__$Boot_HaxeError("Error: Query shape needs to be inside a Body to be well defined :)");
		if(shape.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
			var res = shape.zpp_inner.polygon.valid();
			if(res != (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
				return $r;
			}(this))) throw new js__$Boot_HaxeError("Error: Polygon query shape is invalid : " + res.toString());
		}
		return this.zpp_inner.shapesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		if(shape == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate bodies in a null shapes :)");
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw new js__$Boot_HaxeError("Error: Query shape needs to be inside a Body to be well defined :)");
		if(shape.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
			var res = shape.zpp_inner.polygon.valid();
			if(res != (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
				return $r;
			}(this))) throw new js__$Boot_HaxeError("Error: Polygon query shape is invalid : " + res.toString());
		}
		return this.zpp_inner.bodiesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInBody: function(body,filter,output) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate shapes in null body");
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var _g = body.zpp_inner.wrap_shapes.iterator();
		while(_g.hasNext()) {
			var shape;
			_g.zpp_critical = false;
			shape = _g.zpp_inner.at(_g.zpp_i++);
			var cur = this.shapesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,bodiesInBody: function(body,filter,output) {
		if(body == null) throw new js__$Boot_HaxeError("Error: Cannot evaluate shapes in null body");
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		var _g = body.zpp_inner.wrap_shapes.iterator();
		while(_g.hasNext()) {
			var shape;
			_g.zpp_critical = false;
			shape = _g.zpp_inner.at(_g.zpp_i++);
			var cur = this.bodiesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,convexCast: function(shape,deltaTime,liveSweep,filter) {
		if(liveSweep == null) liveSweep = false;
		if(shape == null) throw new js__$Boot_HaxeError("Error: Cannot cast null shape :)");
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw new js__$Boot_HaxeError("Error: Shape must belong to a body to be cast.");
		if(deltaTime < 0 || deltaTime != deltaTime) throw new js__$Boot_HaxeError("Error: deltaTime must be positive");
		return this.zpp_inner.convexCast(shape.zpp_inner,deltaTime,filter,liveSweep);
	}
	,convexMultiCast: function(shape,deltaTime,liveSweep,filter,output) {
		if(liveSweep == null) liveSweep = false;
		if(shape == null) throw new js__$Boot_HaxeError("Error: Cannot cast null shape :)");
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw new js__$Boot_HaxeError("Error: Shape must belong to a body to be cast.");
		if(deltaTime < 0 || deltaTime != deltaTime) throw new js__$Boot_HaxeError("Error: deltaTime must be positive");
		return this.zpp_inner.convexMultiCast(shape.zpp_inner,deltaTime,filter,liveSweep,output);
	}
	,rayCast: function(ray,inner,filter) {
		if(inner == null) inner = false;
		if(ray == null) throw new js__$Boot_HaxeError("Error: Cannot cast null ray :)");
		return this.zpp_inner.rayCast(ray,inner,filter);
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		if(inner == null) inner = false;
		if(ray == null) throw new js__$Boot_HaxeError("Error: Cannot cast null ray :)");
		return this.zpp_inner.rayMultiCast(ray,inner,filter,output);
	}
	,__class__: nape_space_Space
};
var nape_util_Debug = function() { };
$hxClasses["nape.util.Debug"] = nape_util_Debug;
nape_util_Debug.__name__ = true;
nape_util_Debug.version = function() {
	return "Nape 2.0.19";
};
nape_util_Debug.clearObjectPools = function() {
	while(nape_constraint_ConstraintIterator.zpp_pool != null) {
		var nxt = nape_constraint_ConstraintIterator.zpp_pool.zpp_next;
		nape_constraint_ConstraintIterator.zpp_pool.zpp_next = null;
		nape_constraint_ConstraintIterator.zpp_pool = nxt;
	}
	while(nape_phys_InteractorIterator.zpp_pool != null) {
		var nxt1 = nape_phys_InteractorIterator.zpp_pool.zpp_next;
		nape_phys_InteractorIterator.zpp_pool.zpp_next = null;
		nape_phys_InteractorIterator.zpp_pool = nxt1;
	}
	while(nape_phys_BodyIterator.zpp_pool != null) {
		var nxt2 = nape_phys_BodyIterator.zpp_pool.zpp_next;
		nape_phys_BodyIterator.zpp_pool.zpp_next = null;
		nape_phys_BodyIterator.zpp_pool = nxt2;
	}
	while(nape_phys_CompoundIterator.zpp_pool != null) {
		var nxt3 = nape_phys_CompoundIterator.zpp_pool.zpp_next;
		nape_phys_CompoundIterator.zpp_pool.zpp_next = null;
		nape_phys_CompoundIterator.zpp_pool = nxt3;
	}
	while(nape_callbacks_ListenerIterator.zpp_pool != null) {
		var nxt4 = nape_callbacks_ListenerIterator.zpp_pool.zpp_next;
		nape_callbacks_ListenerIterator.zpp_pool.zpp_next = null;
		nape_callbacks_ListenerIterator.zpp_pool = nxt4;
	}
	while(nape_callbacks_CbTypeIterator.zpp_pool != null) {
		var nxt5 = nape_callbacks_CbTypeIterator.zpp_pool.zpp_next;
		nape_callbacks_CbTypeIterator.zpp_pool.zpp_next = null;
		nape_callbacks_CbTypeIterator.zpp_pool = nxt5;
	}
	while(nape_geom_ConvexResultIterator.zpp_pool != null) {
		var nxt6 = nape_geom_ConvexResultIterator.zpp_pool.zpp_next;
		nape_geom_ConvexResultIterator.zpp_pool.zpp_next = null;
		nape_geom_ConvexResultIterator.zpp_pool = nxt6;
	}
	while(nape_geom_GeomPolyIterator.zpp_pool != null) {
		var nxt7 = nape_geom_GeomPolyIterator.zpp_pool.zpp_next;
		nape_geom_GeomPolyIterator.zpp_pool.zpp_next = null;
		nape_geom_GeomPolyIterator.zpp_pool = nxt7;
	}
	while(nape_geom_Vec2Iterator.zpp_pool != null) {
		var nxt8 = nape_geom_Vec2Iterator.zpp_pool.zpp_next;
		nape_geom_Vec2Iterator.zpp_pool.zpp_next = null;
		nape_geom_Vec2Iterator.zpp_pool = nxt8;
	}
	while(nape_geom_RayResultIterator.zpp_pool != null) {
		var nxt9 = nape_geom_RayResultIterator.zpp_pool.zpp_next;
		nape_geom_RayResultIterator.zpp_pool.zpp_next = null;
		nape_geom_RayResultIterator.zpp_pool = nxt9;
	}
	while(nape_shape_ShapeIterator.zpp_pool != null) {
		var nxt10 = nape_shape_ShapeIterator.zpp_pool.zpp_next;
		nape_shape_ShapeIterator.zpp_pool.zpp_next = null;
		nape_shape_ShapeIterator.zpp_pool = nxt10;
	}
	while(nape_shape_EdgeIterator.zpp_pool != null) {
		var nxt11 = nape_shape_EdgeIterator.zpp_pool.zpp_next;
		nape_shape_EdgeIterator.zpp_pool.zpp_next = null;
		nape_shape_EdgeIterator.zpp_pool = nxt11;
	}
	while(nape_dynamics_ContactIterator.zpp_pool != null) {
		var nxt12 = nape_dynamics_ContactIterator.zpp_pool.zpp_next;
		nape_dynamics_ContactIterator.zpp_pool.zpp_next = null;
		nape_dynamics_ContactIterator.zpp_pool = nxt12;
	}
	while(nape_dynamics_ArbiterIterator.zpp_pool != null) {
		var nxt13 = nape_dynamics_ArbiterIterator.zpp_pool.zpp_next;
		nape_dynamics_ArbiterIterator.zpp_pool.zpp_next = null;
		nape_dynamics_ArbiterIterator.zpp_pool = nxt13;
	}
	while(nape_dynamics_InteractionGroupIterator.zpp_pool != null) {
		var nxt14 = nape_dynamics_InteractionGroupIterator.zpp_pool.zpp_next;
		nape_dynamics_InteractionGroupIterator.zpp_pool.zpp_next = null;
		nape_dynamics_InteractionGroupIterator.zpp_pool = nxt14;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool != null) {
		var nxt15 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = nxt15;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool != null) {
		var nxt16 = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = nxt16;
	}
	while(zpp_$nape_phys_ZPP_$Material.zpp_pool != null) {
		var nxt17 = zpp_$nape_phys_ZPP_$Material.zpp_pool.next;
		zpp_$nape_phys_ZPP_$Material.zpp_pool.next = null;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = nxt17;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool != null) {
		var nxt18 = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = nxt18;
	}
	while(zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool != null) {
		var nxt19 = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool.next;
		zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool.next = null;
		zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = nxt19;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool != null) {
		var nxt20 = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = nxt20;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool != null) {
		var nxt21 = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = nxt21;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool != null) {
		var nxt22 = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = nxt22;
	}
	while(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool != null) {
		var nxt23 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool.next;
		zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool.next = null;
		zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = nxt23;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool != null) {
		var nxt24 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = nxt24;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool != null) {
		var nxt25 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = nxt25;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool != null) {
		var nxt26 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = nxt26;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool != null) {
		var nxt27 = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = nxt27;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool != null) {
		var nxt28 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = nxt28;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool != null) {
		var nxt29 = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = nxt29;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool != null) {
		var nxt30 = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = nxt30;
	}
	while(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool != null) {
		var nxt31 = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool.next;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool.next = null;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = nxt31;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool != null) {
		var nxt32 = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = nxt32;
	}
	while(zpp_$nape_callbacks_ZPP_$Callback.zpp_pool != null) {
		var nxt33 = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool.next;
		zpp_$nape_callbacks_ZPP_$Callback.zpp_pool.next = null;
		zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = nxt33;
	}
	while(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool != null) {
		var nxt34 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool.next;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = nxt34;
	}
	while(zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool != null) {
		var nxt35 = zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool.next;
		zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool = nxt35;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool != null) {
		var nxt36 = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = nxt36;
	}
	while(zpp_$nape_geom_ZPP_$Mat23.zpp_pool != null) {
		var nxt37 = zpp_$nape_geom_ZPP_$Mat23.zpp_pool.next;
		zpp_$nape_geom_ZPP_$Mat23.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$Mat23.zpp_pool = nxt37;
	}
	while(zpp_$nape_geom_ZPP_$CutVert.zpp_pool != null) {
		var nxt38 = zpp_$nape_geom_ZPP_$CutVert.zpp_pool.next;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = nxt38;
	}
	while(zpp_$nape_geom_ZPP_$CutInt.zpp_pool != null) {
		var nxt39 = zpp_$nape_geom_ZPP_$CutInt.zpp_pool.next;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool = nxt39;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool != null) {
		var nxt40 = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = nxt40;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool != null) {
		var nxt41 = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = nxt41;
	}
	while(zpp_$nape_geom_ZPP_$Vec2.zpp_pool != null) {
		var nxt42 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool.next;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = nxt42;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool != null) {
		var nxt43 = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = nxt43;
	}
	while(zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool != null) {
		var nxt44 = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool.next;
		zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = nxt44;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool != null) {
		var nxt45 = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = nxt45;
	}
	while(zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool != null) {
		var nxt46 = zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool.next;
		zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool = nxt46;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool != null) {
		var nxt47 = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = nxt47;
	}
	while(zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool != null) {
		var nxt48 = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool.next;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = nxt48;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool != null) {
		var nxt49 = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = nxt49;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool != null) {
		var nxt50 = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = nxt50;
	}
	while(zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool != null) {
		var nxt51 = zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool = nxt51;
	}
	while(zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool != null) {
		var nxt52 = zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool = nxt52;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool != null) {
		var nxt53 = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = nxt53;
	}
	while(zpp_$nape_geom_ZPP_$AABB.zpp_pool != null) {
		var nxt54 = zpp_$nape_geom_ZPP_$AABB.zpp_pool.next;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = nxt54;
	}
	while(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool != null) {
		var nxt55 = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool.next;
		zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = nxt55;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool != null) {
		var nxt56 = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = nxt56;
	}
	while(zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool != null) {
		var nxt57 = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = nxt57;
	}
	while(zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool != null) {
		var nxt58 = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = nxt58;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool != null) {
		var nxt59 = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = nxt59;
	}
	while(zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool != null) {
		var nxt60 = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool.next;
		zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = nxt60;
	}
	while(zpp_$nape_geom_ZPP_$MarchPair.zpp_pool != null) {
		var nxt61 = zpp_$nape_geom_ZPP_$MarchPair.zpp_pool.next;
		zpp_$nape_geom_ZPP_$MarchPair.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$MarchPair.zpp_pool = nxt61;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool != null) {
		var nxt62 = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = nxt62;
	}
	while(zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool != null) {
		var nxt63 = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = nxt63;
	}
	while(zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool != null) {
		var nxt64 = zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool.next;
		zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool.next = null;
		zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool = nxt64;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool != null) {
		var nxt65 = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = nxt65;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool != null) {
		var nxt66 = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = nxt66;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool != null) {
		var nxt67 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = nxt67;
	}
	while(zpp_$nape_shape_ZPP_$Edge.zpp_pool != null) {
		var nxt68 = zpp_$nape_shape_ZPP_$Edge.zpp_pool.next;
		zpp_$nape_shape_ZPP_$Edge.zpp_pool.next = null;
		zpp_$nape_shape_ZPP_$Edge.zpp_pool = nxt68;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool != null) {
		var nxt69 = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = nxt69;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool != null) {
		var nxt70 = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = nxt70;
	}
	while(zpp_$nape_space_ZPP_$SweepData.zpp_pool != null) {
		var nxt71 = zpp_$nape_space_ZPP_$SweepData.zpp_pool.next;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool = nxt71;
	}
	while(zpp_$nape_space_ZPP_$AABBNode.zpp_pool != null) {
		var nxt72 = zpp_$nape_space_ZPP_$AABBNode.zpp_pool.next;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nxt72;
	}
	while(zpp_$nape_space_ZPP_$AABBPair.zpp_pool != null) {
		var nxt73 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool.next;
		zpp_$nape_space_ZPP_$AABBPair.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$AABBPair.zpp_pool = nxt73;
	}
	while(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool != null) {
		var nxt74 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$Contact.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = nxt74;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool != null) {
		var nxt75 = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = nxt75;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool != null) {
		var nxt76 = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = nxt76;
	}
	while(zpp_$nape_space_ZPP_$Island.zpp_pool != null) {
		var nxt77 = zpp_$nape_space_ZPP_$Island.zpp_pool.next;
		zpp_$nape_space_ZPP_$Island.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$Island.zpp_pool = nxt77;
	}
	while(zpp_$nape_space_ZPP_$Component.zpp_pool != null) {
		var nxt78 = zpp_$nape_space_ZPP_$Component.zpp_pool.next;
		zpp_$nape_space_ZPP_$Component.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$Component.zpp_pool = nxt78;
	}
	while(zpp_$nape_space_ZPP_$CallbackSet.zpp_pool != null) {
		var nxt79 = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool.next;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = nxt79;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool != null) {
		var nxt80 = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = nxt80;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool != null) {
		var nxt81 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = nxt81;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool != null) {
		var nxt82 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = nxt82;
	}
	while(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool != null) {
		var nxt83 = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = nxt83;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool != null) {
		var nxt84 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = nxt84;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool != null) {
		var nxt85 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = nxt85;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool != null) {
		var nxt86 = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = nxt86;
	}
	while(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool != null) {
		var nxt87 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = nxt87;
	}
	while(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool != null) {
		var nxt88 = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = nxt88;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool != null) {
		var nxt89 = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = nxt89;
	}
	while(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool != null) {
		var nxt90 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = nxt90;
	}
	while(zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool != null) {
		var nxt91 = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = nxt91;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool != null) {
		var nxt92 = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = nxt92;
	}
	while(zpp_$nape_util_ZNPNode_$RayResult.zpp_pool != null) {
		var nxt93 = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$RayResult.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = nxt93;
	}
	while(zpp_$nape_util_ZPP_$PubPool.poolGeomPoly != null) {
		var nxt94 = zpp_$nape_util_ZPP_$PubPool.poolGeomPoly.zpp_pool;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly.zpp_pool = null;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = nxt94;
	}
	while(zpp_$nape_util_ZPP_$PubPool.poolVec2 != null) {
		var nxt95 = zpp_$nape_util_ZPP_$PubPool.poolVec2.zpp_pool;
		zpp_$nape_util_ZPP_$PubPool.poolVec2.zpp_pool = null;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = nxt95;
	}
	while(zpp_$nape_util_ZPP_$PubPool.poolVec3 != null) {
		var nxt96 = zpp_$nape_util_ZPP_$PubPool.poolVec3.zpp_pool;
		zpp_$nape_util_ZPP_$PubPool.poolVec3.zpp_pool = null;
		zpp_$nape_util_ZPP_$PubPool.poolVec3 = nxt96;
	}
};
var zpp_$nape_ZPP_$Const = function() { };
$hxClasses["zpp_nape.ZPP_Const"] = zpp_$nape_ZPP_$Const;
zpp_$nape_ZPP_$Const.__name__ = true;
zpp_$nape_ZPP_$Const.POSINF = function() {
	return Infinity;
};
zpp_$nape_ZPP_$Const.NEGINF = function() {
	return -Infinity;
};
var zpp_$nape_ZPP_$ID = function() { };
$hxClasses["zpp_nape.ZPP_ID"] = zpp_$nape_ZPP_$ID;
zpp_$nape_ZPP_$ID.__name__ = true;
zpp_$nape_ZPP_$ID.Constraint = function() {
	return zpp_$nape_ZPP_$ID._Constraint++;
};
zpp_$nape_ZPP_$ID.Interactor = function() {
	return zpp_$nape_ZPP_$ID._Interactor++;
};
zpp_$nape_ZPP_$ID.CbType = function() {
	return zpp_$nape_ZPP_$ID._CbType++;
};
zpp_$nape_ZPP_$ID.CbSet = function() {
	return zpp_$nape_ZPP_$ID._CbSet++;
};
zpp_$nape_ZPP_$ID.Listener = function() {
	return zpp_$nape_ZPP_$ID._Listener++;
};
zpp_$nape_ZPP_$ID.ZPP_SimpleVert = function() {
	return zpp_$nape_ZPP_$ID._ZPP_SimpleVert++;
};
zpp_$nape_ZPP_$ID.ZPP_SimpleSeg = function() {
	return zpp_$nape_ZPP_$ID._ZPP_SimpleSeg++;
};
zpp_$nape_ZPP_$ID.Space = function() {
	return zpp_$nape_ZPP_$ID._Space++;
};
zpp_$nape_ZPP_$ID.InteractionGroup = function() {
	return zpp_$nape_ZPP_$ID._InteractionGroup++;
};
var zpp_$nape_callbacks_ZPP_$Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.index = 0;
	this.space = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
$hxClasses["zpp_nape.callbacks.ZPP_Callback"] = zpp_$nape_callbacks_ZPP_$Callback;
zpp_$nape_callbacks_ZPP_$Callback.__name__ = true;
zpp_$nape_callbacks_ZPP_$Callback.prototype = {
	wrapper_body: function() {
		if(this.outer_body == null) {
			zpp_$nape_callbacks_ZPP_$Callback.internal = true;
			this.outer_body = new nape_callbacks_BodyCallback();
			zpp_$nape_callbacks_ZPP_$Callback.internal = false;
			this.outer_body.zpp_inner = this;
		}
		return this.outer_body;
	}
	,wrapper_con: function() {
		if(this.outer_con == null) {
			zpp_$nape_callbacks_ZPP_$Callback.internal = true;
			this.outer_con = new nape_callbacks_ConstraintCallback();
			zpp_$nape_callbacks_ZPP_$Callback.internal = false;
			this.outer_con.zpp_inner = this;
		}
		return this.outer_con;
	}
	,wrapper_int: function() {
		if(this.outer_int == null) {
			zpp_$nape_callbacks_ZPP_$Callback.internal = true;
			this.outer_int = new nape_callbacks_InteractionCallback();
			zpp_$nape_callbacks_ZPP_$Callback.internal = false;
			this.outer_int.zpp_inner = this;
		}
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
		return this.outer_int;
	}
	,push: function(obj) {
		if(this.prev != null) this.prev.next = obj; else this.next = obj;
		obj.prev = this.prev;
		obj.next = null;
		this.prev = obj;
		this.length++;
	}
	,push_rev: function(obj) {
		if(this.next != null) this.next.prev = obj; else this.prev = obj;
		obj.next = this.next;
		obj.prev = null;
		this.next = obj;
		this.length++;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		if(this.next == null) this.prev = null; else this.next.prev = null;
		this.length--;
		return ret;
	}
	,pop_rev: function() {
		var ret = this.prev;
		this.prev = ret.prev;
		if(this.prev == null) this.next = null; else this.prev.next = null;
		this.length--;
		return ret;
	}
	,empty: function() {
		return this.next == null;
	}
	,clear: function() {
		while(!this.empty()) this.pop();
	}
	,splice: function(o) {
		var ret = o.next;
		if(o.prev == null) {
			this.next = o.next;
			if(this.next != null) this.next.prev = null; else this.prev = null;
		} else {
			o.prev.next = o.next;
			if(o.next != null) o.next.prev = o.prev; else this.prev = o.prev;
		}
		this.length--;
		return ret;
	}
	,rotateL: function() {
		this.push(this.pop());
	}
	,rotateR: function() {
		this.push_rev(this.pop_rev());
	}
	,cycleNext: function(o) {
		if(o.next == null) return this.next; else return o.next;
	}
	,cyclePrev: function(o) {
		if(o.prev == null) return this.prev; else return o.prev;
	}
	,at: function(i) {
		var ret = this.next;
		while(i-- != 0) ret = ret.next;
		return ret;
	}
	,rev_at: function(i) {
		var ret = this.prev;
		while(i-- != 0) ret = ret.prev;
		return ret;
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.body = null;
		this.constraint = null;
		this.listener = null;
		if(this.wrap_arbiters != null) this.wrap_arbiters.zpp_inner.inner = null;
		this.set = null;
	}
	,alloc: function() {
	}
	,genarbs: function() {
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
	}
	,__class__: zpp_$nape_callbacks_ZPP_$Callback
};
var zpp_$nape_callbacks_ZPP_$CbSet = function() {
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_interactors = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.id = zpp_$nape_ZPP_$ID.CbSet();
	this.cbpairs = new zpp_$nape_util_ZNPList_$ZPP_$CbSetPair();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSet"] = zpp_$nape_callbacks_ZPP_$CbSet;
zpp_$nape_callbacks_ZPP_$CbSet.__name__ = true;
zpp_$nape_callbacks_ZPP_$CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) return true;
		if(cb.id < ca.id) return false; else {
			i = i.next;
			j = j.next;
		}
	}
	return j != null && i == null;
};
zpp_$nape_callbacks_ZPP_$CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) ret = new zpp_$nape_callbacks_ZPP_$CbSet(); else {
		ret = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_callbacks_ZPP_$CbSet.compatible = function(i,a,b) {
	return i.options1.compatible(a.cbTypes) && i.options2.compatible(b.cbTypes) || i.options2.compatible(a.cbTypes) && i.options1.compatible(b.cbTypes);
};
zpp_$nape_callbacks_ZPP_$CbSet.empty_intersection = function(a,b) {
	return a.manager.pair(a,b).empty_intersection();
};
zpp_$nape_callbacks_ZPP_$CbSet.single_intersection = function(a,b,i) {
	return a.manager.pair(a,b).single_intersection(i);
};
zpp_$nape_callbacks_ZPP_$CbSet.find_all = function(a,b,event,cb) {
	a.manager.pair(a,b).forall(event,cb);
};
zpp_$nape_callbacks_ZPP_$CbSet.prototype = {
	increment: function() {
		this.count++;
	}
	,decrement: function() {
		return --this.count == 0;
	}
	,invalidate_pairs: function() {
		var cx_ite = this.cbpairs.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cx_ite = cx_ite.next;
		}
	}
	,invalidate_listeners: function() {
		this.zip_listeners = true;
		this.invalidate_pairs();
	}
	,validate_listeners: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
	}
	,realvalidate_listeners: function() {
		this.listeners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.listeners.head;
			var cite = cb.listeners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_$nape_callbacks_ZPP_$Listener.setlt(cx,nite.elt)) {
					if(cx.space == this.manager.space) npre = this.listeners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,invalidate_bodylisteners: function() {
		this.zip_bodylisteners = true;
	}
	,validate_bodylisteners: function() {
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
	}
	,realvalidate_bodylisteners: function() {
		this.bodylisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.bodylisteners.head;
			var cite = cb.bodylisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_$nape_callbacks_ZPP_$Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.bodylisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,invalidate_conlisteners: function() {
		this.zip_conlisteners = true;
	}
	,validate_conlisteners: function() {
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,realvalidate_conlisteners: function() {
		this.conlisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.conlisteners.head;
			var cite = cb.conlisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_$nape_callbacks_ZPP_$Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.conlisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,free: function() {
		this.listeners.clear();
		this.zip_listeners = true;
		this.bodylisteners.clear();
		this.zip_bodylisteners = true;
		this.conlisteners.clear();
		this.zip_conlisteners = true;
		while(!(this.cbTypes.head == null)) {
			var cb = this.cbTypes.pop_unsafe();
			cb.cbsets.remove(this);
		}
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSetPair"] = zpp_$nape_callbacks_ZPP_$CbSetPair;
zpp_$nape_callbacks_ZPP_$CbSetPair.__name__ = true;
zpp_$nape_callbacks_ZPP_$CbSetPair.get = function(a,b) {
	var ret;
	if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) ret = new zpp_$nape_callbacks_ZPP_$CbSetPair(); else {
		ret = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.zip_listeners = true;
	if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
		ret.a = a;
		ret.b = b;
	} else {
		ret.a = b;
		ret.b = a;
	}
	return ret;
};
zpp_$nape_callbacks_ZPP_$CbSetPair.setlt = function(x,y) {
	return zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.a,y.a) || x.a == y.a && zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.b,y.b);
};
zpp_$nape_callbacks_ZPP_$CbSetPair.prototype = {
	free: function() {
		this.a = this.b = null;
		this.listeners.clear();
	}
	,alloc: function() {
		this.zip_listeners = true;
	}
	,compatible: function(i) {
		return i.options1.compatible(this.a.cbTypes) && i.options2.compatible(this.b.cbTypes) || i.options2.compatible(this.a.cbTypes) && i.options1.compatible(this.b.cbTypes);
	}
	,invalidate: function() {
		this.zip_listeners = true;
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.__validate();
		}
	}
	,__validate: function() {
		this.listeners.clear();
		var aite = this.a.listeners.head;
		var bite = this.b.listeners.head;
		while(aite != null && bite != null) {
			var ax = aite.elt;
			var bx = bite.elt;
			if(ax == bx) {
				if(ax.options1.compatible(this.a.cbTypes) && ax.options2.compatible(this.b.cbTypes) || ax.options2.compatible(this.a.cbTypes) && ax.options1.compatible(this.b.cbTypes)) this.listeners.add(ax);
				aite = aite.next;
				bite = bite.next;
			} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) aite = aite.next; else bite = bite.next;
		}
	}
	,empty_intersection: function() {
		return this.listeners.head == null;
	}
	,single_intersection: function(i) {
		var ite = this.listeners.head;
		return ite != null && ite.elt == i && ite.next == null;
	}
	,forall: function(event,cb) {
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.event == event) cb(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionListener"] = zpp_$nape_util_ZNPList_$ZPP_$InteractionListener;
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPList_$ZPP_$BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_BodyListener"] = zpp_$nape_util_ZNPList_$ZPP_$BodyListener;
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ConstraintListener"] = zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener;
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPList_$ZPP_$Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Constraint"] = zpp_$nape_util_ZNPList_$ZPP_$Constraint;
zpp_$nape_util_ZNPList_$ZPP_$Constraint.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Constraint.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPList_$ZPP_$Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Interactor"] = zpp_$nape_util_ZNPList_$ZPP_$Interactor;
zpp_$nape_util_ZNPList_$ZPP_$Interactor.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Interactor.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSet"] = zpp_$nape_util_ZNPList_$ZPP_$CbSet;
zpp_$nape_util_ZNPList_$ZPP_$CbSet.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbSet.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.userData = null;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbType"] = zpp_$nape_callbacks_ZPP_$CbType;
zpp_$nape_callbacks_ZPP_$CbType.__name__ = true;
zpp_$nape_callbacks_ZPP_$CbType.setlt = function(a,b) {
	return a.id < b.id;
};
zpp_$nape_callbacks_ZPP_$CbType.prototype = {
	addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,addint: function(x) {
		var pre = null;
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.listeners.inlined_insert(pre,x);
		this.invalidateint();
	}
	,removeint: function(x) {
		this.listeners.remove(x);
		this.invalidateint();
	}
	,invalidateint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cb.invalidate_pairs();
			cx_ite = cx_ite.next;
		}
	}
	,addbody: function(x) {
		var pre = null;
		var cx_ite = this.bodylisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bodylisteners.inlined_insert(pre,x);
		this.invalidatebody();
	}
	,removebody: function(x) {
		this.bodylisteners.remove(x);
		this.invalidatebody();
	}
	,invalidatebody: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_bodylisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,addconstraint: function(x) {
		var pre = null;
		var cx_ite = this.conlisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.conlisteners.inlined_insert(pre,x);
		this.invalidateconstraint();
	}
	,removeconstraint: function(x) {
		this.conlisteners.remove(x);
		this.invalidateconstraint();
	}
	,invalidateconstraint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_conlisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbType
};
var zpp_$nape_util_ZPP_$Flags = function() { };
$hxClasses["zpp_nape.util.ZPP_Flags"] = zpp_$nape_util_ZPP_$Flags;
zpp_$nape_util_ZPP_$Flags.__name__ = true;
var zpp_$nape_callbacks_ZPP_$Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.Listener();
};
$hxClasses["zpp_nape.callbacks.ZPP_Listener"] = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$Listener.__name__ = true;
zpp_$nape_callbacks_ZPP_$Listener.setlt = function(a,b) {
	return a.precedence > b.precedence || a.precedence == b.precedence && a.id > b.id;
};
zpp_$nape_callbacks_ZPP_$Listener.prototype = {
	swapEvent: function(event) {
	}
	,invalidate_precedence: function() {
	}
	,addedToSpace: function() {
	}
	,removedFromSpace: function() {
	}
	,__class__: zpp_$nape_callbacks_ZPP_$Listener
};
var zpp_$nape_callbacks_ZPP_$BodyListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = zpp_$nape_util_ZPP_$Flags.id_ListenerType_BODY;
	this.options = options.zpp_inner;
};
$hxClasses["zpp_nape.callbacks.ZPP_BodyListener"] = zpp_$nape_callbacks_ZPP_$BodyListener;
zpp_$nape_callbacks_ZPP_$BodyListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$BodyListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$BodyListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	immutable_options: function() {
		if(this.space != null && this.space.midstep) throw new js__$Boot_HaxeError("Error: Cannot change listener type options during space.step()");
	}
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addbody(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.bodylisteners.remove(this);
			cb.invalidatebody();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,swapEvent: function(newev) {
		if(newev != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE && newev != zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP) throw new js__$Boot_HaxeError("Error: BodyListener event must be either WAKE or SLEEP only");
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$BodyListener
});
var zpp_$nape_callbacks_ZPP_$ConstraintListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = zpp_$nape_util_ZPP_$Flags.id_ListenerType_CONSTRAINT;
	this.options = options.zpp_inner;
};
$hxClasses["zpp_nape.callbacks.ZPP_ConstraintListener"] = zpp_$nape_callbacks_ZPP_$ConstraintListener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$ConstraintListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	immutable_options: function() {
		if(this.space != null && this.space.midstep) throw new js__$Boot_HaxeError("Error: Cannot change listener type options during space.step()");
	}
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addconstraint(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.conlisteners.remove(this);
			cb.invalidateconstraint();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,swapEvent: function(newev) {
		if(newev != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE && newev != zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP && newev != zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK) throw new js__$Boot_HaxeError("Error: ConstraintListener event must be either WAKE or SLEEP only");
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$ConstraintListener
});
var zpp_$nape_util_ZNPList_$ZPP_$CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbType"] = zpp_$nape_util_ZNPList_$ZPP_$CbType;
zpp_$nape_util_ZNPList_$ZPP_$CbType.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbType.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbType
};
var zpp_$nape_callbacks_ZPP_$InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
$hxClasses["zpp_nape.callbacks.ZPP_InteractionListener"] = zpp_$nape_callbacks_ZPP_$InteractionListener;
zpp_$nape_callbacks_ZPP_$InteractionListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$InteractionListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$InteractionListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	setInteractionType: function(itype) {
		this.itype = itype;
	}
	,wake: function() {
		this.with_union(function(cb) {
			var cx_ite = cb.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				i.wake();
				cx_ite = cx_ite.next;
			}
		});
	}
	,CbSetset: function(A,B,lambda) {
		var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
		var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
		var W = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.head;
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elt;
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(W.head == null)) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.head;
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elt;
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,CbTypeset: function(A,B,lambda) {
		var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType;
		var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType;
		var W = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(a.id < b.id) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.head;
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elt;
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(W.head == null)) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.head;
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elt;
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,with_uniquesets: function(fresh) {
		var _g = this;
		var set;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) set = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
			set = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = set.next;
			set.next = null;
		}
		null;
		set.lt = zpp_$nape_callbacks_ZPP_$CbSetPair.setlt;
		this.CbTypeset(this.options1.includes,this.options2.includes,function(a,b) {
			_g.CbSetset(a.cbsets,b.cbsets,function(a1,b1) {
				a1.validate();
				b1.validate();
				if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(a1,b1,_g)) set.try_insert(zpp_$nape_callbacks_ZPP_$CbSetPair.get(a1,b1));
			});
		});
		set.clear_with(function(pair) {
			if(fresh) _g.space.freshListenerType(pair.a,pair.b); else _g.space.nullListenerType(pair.a,pair.b);
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o;
		});
		var o1 = set;
		o1.data = null;
		o1.lt = null;
		o1.swapped = null;
		o1.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o1;
	}
	,with_union: function(lambda) {
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				lambda(cb1);
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				lambda(cb1);
				ite1 = ite1.next;
			} else {
				lambda(cb2);
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			lambda(ite1.elt);
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			lambda(ite2.elt);
			ite2 = ite2.next;
		}
	}
	,addedToSpace: function() {
		var _g = this;
		var pre = this.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.addint(_g);
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = $bind(this,this.cbtype_change1);
		this.options2.handler = $bind(this,this.cbtype_change2);
		this.with_uniquesets(true);
	}
	,removedFromSpace: function() {
		var _g = this;
		this.with_uniquesets(false);
		var pre = this.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.listeners.remove(_g);
			cb.invalidateint();
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = null;
		this.options2.handler = null;
	}
	,invalidate_precedence: function() {
		var _g = this;
		if(this.space != null) {
			var pre = this.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE;
			this.with_union(function(cb) {
				cb.listeners.remove(_g);
				cb.invalidateint();
				cb.addint(_g);
				if(pre) {
					var cx_ite = cb.interactors.head;
					while(cx_ite != null) {
						var i = cx_ite.elt;
						i.wake();
						cx_ite = cx_ite.next;
					}
				}
			});
		}
	}
	,cbtype_change1: function(cb,included,added) {
		this.cbtype_change(this.options1,cb,included,added);
	}
	,cbtype_change2: function(cb,included,added) {
		this.cbtype_change(this.options2,cb,included,added);
	}
	,cbtype_change: function(options,cb,included,added) {
		this.removedFromSpace();
		options.effect_change(cb,included,added);
		this.addedToSpace();
		null;
	}
	,swapEvent: function(newev) {
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE) throw new js__$Boot_HaxeError("Error: PreListener event can only be PRE"); else if(newev != zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN && newev != zpp_$nape_util_ZPP_$Flags.id_CbEvent_END && newev != zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING) throw new js__$Boot_HaxeError("Error: InteractionListener event must be either BEGIN, END, ONGOING");
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$InteractionListener
});
var zpp_$nape_callbacks_ZPP_$OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.excludes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.callbacks.ZPP_OptionType"] = zpp_$nape_callbacks_ZPP_$OptionType;
zpp_$nape_callbacks_ZPP_$OptionType.__name__ = true;
zpp_$nape_callbacks_ZPP_$OptionType.argument = function(val) {
	if(val == null) return new nape_callbacks_OptionType(); else if(js_Boot.__instanceof(val,nape_callbacks_OptionType)) return val; else return new nape_callbacks_OptionType().including(val);
};
zpp_$nape_callbacks_ZPP_$OptionType.prototype = {
	setup_includes: function() {
		this.wrap_includes = zpp_$nape_util_ZPP_$CbTypeList.get(this.includes,true);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_$nape_util_ZPP_$CbTypeList.get(this.excludes,true);
	}
	,excluded: function(xs) {
		return this.nonemptyintersection(xs,this.excludes);
	}
	,included: function(xs) {
		return this.nonemptyintersection(xs,this.includes);
	}
	,compatible: function(xs) {
		return this.nonemptyintersection(xs,this.includes) && !this.nonemptyintersection(xs,this.excludes);
	}
	,nonemptyintersection: function(xs,ys) {
		var ret = false;
		var xite = xs.head;
		var eite = ys.head;
		while(eite != null && xite != null) {
			var ex = eite.elt;
			var xi = xite.elt;
			if(ex == xi) {
				ret = true;
				break;
			} else if(ex.id < xi.id) eite = eite.next; else xite = xite.next;
		}
		return ret;
	}
	,effect_change: function(val,included,added) {
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = this.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(val.id < j.id) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				this.includes.inlined_insert(pre,val);
			} else this.includes.remove(val);
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = this.excludes.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if(val.id < j1.id) break;
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			this.excludes.inlined_insert(pre1,val);
		} else this.excludes.remove(val);
	}
	,append_type: function(list,val) {
		if(list == this.includes) {
			if(!this.includes.has(val)) {
				if(!this.excludes.has(val)) {
					if(this.handler != null) this.handler(val,true,true); else this.effect_change(val,true,true);
				} else if(this.handler != null) this.handler(val,false,false); else this.effect_change(val,false,false);
			}
		} else if(!this.excludes.has(val)) {
			if(!this.includes.has(val)) {
				if(this.handler != null) this.handler(val,false,true); else this.effect_change(val,false,true);
			} else if(this.handler != null) this.handler(val,true,false); else this.effect_change(val,true,false);
		}
	}
	,set: function(options) {
		if(options != this) {
			while(!(this.includes.head == null)) this.append_type(this.excludes,this.includes.head.elt);
			while(!(this.excludes.head == null)) this.append_type(this.includes,this.excludes.head.elt);
			var cx_ite = options.excludes.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				this.append_type(this.excludes,i);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = options.includes.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				this.append_type(this.includes,i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		return this;
	}
	,append: function(list,val) {
		if(val == null) throw new js__$Boot_HaxeError("Error: Cannot append null, only CbType and CbType list values");
		if(js_Boot.__instanceof(val,nape_callbacks_CbType)) {
			var cb = val;
			this.append_type(list,cb.zpp_inner);
		} else if(js_Boot.__instanceof(val,nape_callbacks_CbTypeList)) {
			var cbs = val;
			var _g;
			cbs.zpp_inner.valmod();
			_g = nape_callbacks_CbTypeIterator.get(cbs);
			while(_g.hasNext()) {
				var cb1;
				_g.zpp_critical = false;
				cb1 = _g.zpp_inner.at(_g.zpp_i++);
				this.append_type(list,cb1.zpp_inner);
			}
		} else if((val instanceof Array) && val.__enum__ == null) {
			var cbs1 = val;
			var _g1 = 0;
			while(_g1 < cbs1.length) {
				var cb2 = cbs1[_g1];
				++_g1;
				if(!js_Boot.__instanceof(cb2,nape_callbacks_CbType)) throw new js__$Boot_HaxeError("Error: Cannot append non-CbType or CbType list value");
				var cbx = cb2;
				this.append_type(list,cbx.zpp_inner);
			}
		} else throw new js__$Boot_HaxeError("Error: Cannot append non-CbType or CbType list value");
	}
	,__class__: zpp_$nape_callbacks_ZPP_$OptionType
};
var zpp_$nape_constraint_ZPP_$Constraint = function() {
	this.pre_dt = 0.0;
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.userData = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_$nape_ZPP_$ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Infinity;
	this.maxError = Infinity;
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.constraint.ZPP_Constraint"] = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$Constraint.__name__ = true;
zpp_$nape_constraint_ZPP_$Constraint.prototype = {
	clear: function() {
	}
	,immutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) throw new js__$Boot_HaxeError("Error: Constraint::" + name + " cannot be set during space step()");
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_$nape_util_ZPP_$CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
		this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
	}
	,immutable_cbTypes: function() {
		this.immutable_midstep("Constraint::cbTypes");
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.remove(this);
			}
			this.cbTypes.remove(cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.constraints.add(this);
		}
	}
	,dealloc_cbSet: function() {
		if(this.cbSet != null) {
			this.cbSet.constraints.remove(this);
			if(--this.cbSet.count == 0) {
				this.space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,activate: function() {
		if(this.space != null) this.activeInSpace();
	}
	,deactivate: function() {
		if(this.space != null) this.inactiveOrOutSpace();
	}
	,addedToSpace: function() {
		if(this.active) this.activeInSpace();
		this.activeBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.add(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		if(this.active) this.inactiveOrOutSpace();
		this.inactiveBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.remove(this);
			cx_ite = cx_ite.next;
		}
	}
	,activeInSpace: function() {
		this.alloc_cbSet();
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) this.component = new zpp_$nape_space_ZPP_$Component(); else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = false;
		this.component.constraint = this;
	}
	,inactiveOrOutSpace: function() {
		this.dealloc_cbSet();
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
	}
	,activeBodies: function() {
	}
	,inactiveBodies: function() {
	}
	,clearcache: function() {
	}
	,validate: function() {
	}
	,wake_connected: function() {
	}
	,forest: function() {
	}
	,pair_exists: function(id,di) {
		return false;
	}
	,broken: function() {
	}
	,warmStart: function() {
	}
	,preStep: function(dt) {
		return false;
	}
	,applyImpulseVel: function() {
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,wake: function() {
		if(this.space != null) this.space.wake_constraint(this);
	}
	,draw: function(g) {
	}
	,copy: function(dict,todo) {
		return null;
	}
	,copyto: function(ret) {
		var me = this.outer;
		var _g = ((function($this) {
			var $r;
			if(me.zpp_inner.wrap_cbTypes == null) me.zpp_inner.setupcbTypes();
			$r = me.zpp_inner.wrap_cbTypes;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var cb;
			_g.zpp_critical = false;
			cb = _g.zpp_inner.at(_g.zpp_i++);
			((function($this) {
				var $r;
				if(ret.zpp_inner.wrap_cbTypes == null) ret.zpp_inner.setupcbTypes();
				$r = ret.zpp_inner.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		ret.zpp_inner.removeOnBreak = me.zpp_inner.removeOnBreak;
		ret.zpp_inner.removeOnBreak;
		ret.set_breakUnderError(me.zpp_inner.breakUnderError);
		ret.set_breakUnderForce(me.zpp_inner.breakUnderForce);
		ret.set_maxError(me.zpp_inner.maxError);
		ret.set_maxForce(me.zpp_inner.maxForce);
		ret.set_damping(me.zpp_inner.damping);
		ret.set_frequency(me.zpp_inner.frequency);
		ret.set_stiff(me.zpp_inner.stiff);
		ret.set_ignore(me.zpp_inner.ignore);
		ret.set_active(me.zpp_inner.active);
	}
	,__class__: zpp_$nape_constraint_ZPP_$Constraint
};
var zpp_$nape_constraint_ZPP_$AngleJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = Infinity;
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_AngleJoint"] = zpp_$nape_constraint_ZPP_$AngleJoint;
zpp_$nape_constraint_ZPP_$AngleJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$AngleJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$AngleJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	is_slack: function() {
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(0,0,-this.scale * this.jAcc); else return nape_geom_Vec3.get(0,0,this.ratio * this.scale * this.jAcc);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,copy: function(dict,todo) {
		var ret = new nape_constraint_AngleJoint(null,null,this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(this.jointMin > this.jointMax) throw new js__$Boot_HaxeError("Error: AngleJoint must have jointMin <= jointMax");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
		this.slack = false;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		var C;
		var C1 = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C1 -= this.jointMax;
			this.slack = false;
			this.scale = 1.0;
		} else if(C1 < this.jointMin) {
			C1 = this.jointMin - C1;
			this.scale = -1.0;
			this.slack = false;
		} else if(C1 > this.jointMax) {
			C1 -= this.jointMax;
			this.scale = 1.0;
			this.slack = false;
		} else {
			this.scale = 0.0;
			C1 = 0;
			this.slack = true;
		}
		C = C1;
		if(!this.slack) {
			this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) return true;
		if(!this.stiff) {
			if(this.jAcc > this.jMax) this.jAcc = this.jMax; else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.scale * this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			E *= 0.5;
			j = -E * this.kMass;
			if(this.equal || j < 0) {
				this.b1.delta_rot(-this.scale * j * this.b1.iinertia);
				this.b2.delta_rot(this.ratio * this.scale * j * this.b2.iinertia);
			}
		}
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_$nape_constraint_ZPP_$AngleJoint
});
var zpp_$nape_constraint_ZPP_$CopyHelper = function() {
	this.cb = null;
	this.bc = null;
	this.id = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_CopyHelper"] = zpp_$nape_constraint_ZPP_$CopyHelper;
zpp_$nape_constraint_ZPP_$CopyHelper.__name__ = true;
zpp_$nape_constraint_ZPP_$CopyHelper.dict = function(id,bc) {
	var ret = new zpp_$nape_constraint_ZPP_$CopyHelper();
	ret.id = id;
	ret.bc = bc;
	return ret;
};
zpp_$nape_constraint_ZPP_$CopyHelper.todo = function(id,cb) {
	var ret = new zpp_$nape_constraint_ZPP_$CopyHelper();
	ret.id = id;
	ret.cb = cb;
	return ret;
};
zpp_$nape_constraint_ZPP_$CopyHelper.prototype = {
	__class__: zpp_$nape_constraint_ZPP_$CopyHelper
};
var zpp_$nape_constraint_ZPP_$DistanceJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_DistanceJoint"] = zpp_$nape_constraint_ZPP_$DistanceJoint;
zpp_$nape_constraint_ZPP_$DistanceJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$DistanceJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$DistanceJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C = nx * nx + ny * ny;
		if(C < nape_Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(-this.jAcc * this.nx,-this.jAcc * this.ny,-this.cx1 * this.jAcc); else return nape_geom_Vec3.get(this.jAcc * this.nx,this.jAcc * this.ny,this.cx2 * this.jAcc);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,copy: function(dict,todo) {
		var ret = new nape_constraint_DistanceJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: DistanceJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: DistanceJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(this.jointMin > this.jointMax) throw new js__$Boot_HaxeError("Error: DistanceJoint must have jointMin <= jointMax");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var C;
		this.nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C1 = this.nx * this.nx + this.ny * this.ny;
		if(C1 < nape_Config.epsilon) {
			this.nx = 0;
			this.ny = 0;
			C1 = 0;
			this.slack = true;
		} else {
			C1 = Math.sqrt(C1);
			var t = 1.0 / C1;
			this.nx *= t;
			this.ny *= t;
			if(this.equal) {
				C1 -= this.jointMax;
				this.slack = false;
			} else if(C1 < this.jointMin) {
				C1 = this.jointMin - C1;
				this.nx = -this.nx;
				this.ny = -this.ny;
				this.slack = false;
			} else if(C1 > this.jointMax) {
				C1 -= this.jointMax;
				this.slack = false;
			} else {
				this.nx = 0;
				this.ny = 0;
				C1 = 0;
				this.slack = true;
			}
		}
		C = C1;
		if(!this.slack) {
			this.cx1 = this.ny * this.a1relx - this.nx * this.a1rely;
			this.cx2 = this.ny * this.a2relx - this.nx * this.a2rely;
			this.kMass = this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.nx * t;
			this.b1.vely -= this.ny * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.nx * t1;
			this.b2.vely += this.ny * t1;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.nx * t1;
		this.b2.vely += this.ny * t1;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var slack;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + r2x - (this.b1.posx + r1x);
		ny = this.b2.posy + r2y - (this.b1.posy + r1y);
		var C = nx * nx + ny * ny;
		if(C < nape_Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k1 = this.b1.smass + this.b2.smass;
				if(k1 > nape_Config.epsilon) {
					k1 = 0.75 / k1;
					j = -E * k1;
					if(this.equal || j < 0) {
						var t1 = j * this.b1.imass;
						this.b1.posx -= nx * t1;
						this.b1.posy -= ny * t1;
						var t2 = j * this.b2.imass;
						this.b2.posx += nx * t2;
						this.b2.posy += ny * t2;
						nx = this.b2.posx + r2x - (this.b1.posx + r1x);
						ny = this.b2.posy + r2y - (this.b1.posy + r1y);
						var C1 = nx * nx + ny * ny;
						if(C1 < nape_Config.epsilon) {
							nx = 0;
							ny = 0;
							C1 = 0;
							slack = true;
						} else {
							C1 = Math.sqrt(C1);
							var t3 = 1.0 / C1;
							nx *= t3;
							ny *= t3;
							if(this.equal) {
								C1 -= this.jointMax;
								slack = false;
							} else if(C1 < this.jointMin) {
								C1 = this.jointMin - C1;
								nx = -nx;
								ny = -ny;
								slack = false;
							} else if(C1 > this.jointMax) {
								C1 -= this.jointMax;
								slack = false;
							} else {
								nx = 0;
								ny = 0;
								C1 = 0;
								slack = true;
							}
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var k;
			cx1 = ny * r1x - nx * r1y;
			cx2 = ny * r2x - nx * r2y;
			k = this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia;
			if(k != 0) k = 1 / k;
			j = -E * k;
			if(this.equal || j < 0) {
				var t4 = this.b1.imass * j;
				this.b1.posx -= nx * t4;
				this.b1.posy -= ny * t4;
				var t5 = this.b2.imass * j;
				this.b2.posx += nx * t5;
				this.b2.posy += ny * t5;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
			}
		}
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_$nape_constraint_ZPP_$DistanceJoint
});
var zpp_$nape_constraint_ZPP_$LineJoint = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.jointMin = -Infinity;
	this.jointMax = Infinity;
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_LineJoint"] = zpp_$nape_constraint_ZPP_$LineJoint;
zpp_$nape_constraint_ZPP_$LineJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$LineJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$LineJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			var jx = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
			var jy = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
			if(b == this.b1) return nape_geom_Vec3.get(-jx,-jy,this.scale * this.cx1 * jy - this.dot1 * jx); else return nape_geom_Vec3.get(jx,jy,this.scale * this.cx1 * jy - this.dot1 * jx);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_n: function() {
		this.wrap_n.zpp_inner.x = this.nlocalx;
		this.wrap_n.zpp_inner.y = this.nlocaly;
	}
	,invalidate_n: function(x) {
		this.immutable_midstep("Constraint::" + "n");
		this.nlocalx = x.x;
		this.nlocaly = x.y;
		this.zip_n = true;
		this.wake();
	}
	,setup_n: function() {
		this.wrap_n = nape_geom_Vec2.get(this.nlocalx,this.nlocaly,null);
		this.wrap_n.zpp_inner._inuse = true;
		this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
		this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
	}
	,validate_norm: function() {
		if(this.zip_n) {
			this.zip_n = false;
			var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.nlocalx *= t;
			this.nlocaly *= t;
		}
	}
	,copy: function(dict,todo) {
		var ret = new nape_constraint_LineJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_direction(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: DistanceJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(this.jointMin > this.jointMax) throw new js__$Boot_HaxeError("Error: DistanceJoint must have jointMin <= jointMax");
		if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < nape_Config.epsilon) throw new js__$Boot_HaxeError("Error: DistanceJoint direction must be non-degenerate");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.equal = this.jointMin == this.jointMax;
		this.stepped = true;
		this.validate_norm();
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var Cx = 0.0;
		var Cy = 0.0;
		dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
		dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
		Cx = dy * this.nrelx - dx * this.nrely;
		Cy = this.nrelx * dx + this.nrely * dy;
		if(this.equal) {
			Cy -= this.jointMin;
			this.scale = 1.0;
		} else if(Cy > this.jointMax) {
			Cy -= this.jointMax;
			this.scale = 1.0;
		} else if(Cy < this.jointMin) {
			Cy = this.jointMin - Cy;
			this.scale = -1.0;
		} else {
			Cy = 0;
			this.scale = 0;
		}
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + this.a1relx;
		dry = dy + this.a1rely;
		this.dot1 = this.nrelx * drx + this.nrely * dry;
		this.cx1 = dry * this.nrelx - drx * this.nrely;
		this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
		this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
		this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
		this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
		this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
		var flag;
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) return true;
			var biasCoef;
			var X;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X = ig;
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = Cx;
			this.biasy = Cy;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.gamma = 0;
			this.biasx = 0;
			this.biasy = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t1 = this.b2.imass;
		this.b2.velx += J2x * t1;
		this.b2.vely += J2y * t1;
		this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var dvx = 0.0;
		var dvy = 0.0;
		dvx = this.b2.velx - this.b1.velx;
		dvy = this.b2.vely - this.b1.vely;
		dvx += this.b2.kinvelx - this.b1.kinvelx;
		dvy += this.b2.kinvely - this.b1.kinvely;
		Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
		Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.jAccy > 0) this.jAccy = 0;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
		var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
		var t5 = this.b1.imass;
		this.b1.velx -= J2x * t5;
		this.b1.vely -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.velx += J2x * t6;
		this.b2.vely += J2y * t6;
		this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var scale;
		var Ex = 0.0;
		var Ey = 0.0;
		dx = this.b2.posx + r2x - this.b1.posx - r1x;
		dy = this.b2.posy + r2y - this.b1.posy - r1y;
		Ex = dy * nx - dx * ny;
		Ey = nx * dx + ny * dy;
		if(this.equal) {
			Ey -= this.jointMin;
			scale = 1.0;
		} else if(Ey > this.jointMax) {
			Ey -= this.jointMax;
			scale = 1.0;
		} else if(Ey < this.jointMin) {
			Ey = this.jointMin - Ey;
			scale = -1.0;
		} else {
			Ey = 0;
			scale = 0;
		}
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
		var Jx = 0.0;
		var Jy = 0.0;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.8 / k;
				var Jx1 = k * (ny * Ex - scale * nx * Ey);
				var Jy1 = k * (nx * Ex * scale - ny * Ex);
				var t1 = this.b1.imass;
				this.b1.posx -= Jx1 * t1;
				this.b1.posy -= Jy1 * t1;
				var t2 = this.b2.imass;
				this.b2.posx += Jx1 * t2;
				this.b2.posy += Jy1 * t2;
				dx = this.b2.posx + r2x - this.b1.posx - r1x;
				dy = this.b2.posy + r2y - this.b1.posy - r1y;
				Ex = dy * nx - dx * ny;
				Ey = nx * dx + ny * dy;
				if(this.equal) {
					Ey -= this.jointMin;
					scale = 1.0;
				} else if(Ey > this.jointMax) {
					Ey -= this.jointMax;
					scale = 1.0;
				} else if(Ey < this.jointMin) {
					Ey = this.jointMin - Ey;
					scale = -1.0;
				} else {
					Ey = 0;
					scale = 0;
				}
				var t3 = 0.5;
				Ex *= t3;
				Ey *= t3;
			}
		}
		var dot1;
		var dot2;
		var cx1;
		var cx2;
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + r1x;
		dry = dy + r1y;
		dot1 = nx * drx + ny * dry;
		cx1 = dry * nx - drx * ny;
		dot2 = nx * r2x + ny * r2y;
		cx2 = r2y * nx - r2x * ny;
		Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
		Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
		Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
		Jx = -Ex;
		Jy = -Ey;
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t4 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t4;
		}
		if(Jy > 0) Jy = 0;
		var J2x = scale * nx * Jy - ny * Jx;
		var J2y = nx * Jx + scale * ny * Jy;
		var t5 = this.b1.imass;
		this.b1.posx -= J2x * t5;
		this.b1.posy -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.posx += J2x * t6;
		this.b2.posy += J2y * t6;
		this.b1.delta_rot((scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia);
		this.b2.delta_rot((dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_$nape_constraint_ZPP_$LineJoint
});
var zpp_$nape_constraint_ZPP_$MotorJoint = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
$hxClasses["zpp_nape.constraint.ZPP_MotorJoint"] = zpp_$nape_constraint_ZPP_$MotorJoint;
zpp_$nape_constraint_ZPP_$MotorJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$MotorJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$MotorJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(0,0,-this.jAcc); else return nape_geom_Vec3.get(0,0,this.ratio * this.jAcc);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,copy: function(dict,todo) {
		var ret = new nape_constraint_MotorJoint(null,null,this.rate,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: MotorJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		this.kMass = 1.0 / this.kMass;
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		this.b1.angvel -= this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
	}
	,applyImpulseVel: function() {
		var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
		var j = -this.kMass * E;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(this.breakUnderForce) {
			if(this.jAcc > this.jMax || this.jAcc < -this.jMax) return true;
		} else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax; else if(this.jAcc > this.jMax) this.jAcc = this.jMax;
		j = this.jAcc - jOld;
		this.b1.angvel -= this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$MotorJoint
});
var zpp_$nape_constraint_ZPP_$PivotJoint = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_PivotJoint"] = zpp_$nape_constraint_ZPP_$PivotJoint;
zpp_$nape_constraint_ZPP_$PivotJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$PivotJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PivotJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely)); else return nape_geom_Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,copy: function(dict,todo) {
		var ret = new nape_constraint_PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: PivotJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassc = m;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassc += X * this.a1relx;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassc += X1 * this.a2relx;
		}
		var flag;
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			var biasCoef;
			var X2;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassc *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) return true;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.gamma = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var t5 = this.b1.imass;
		this.b1.velx -= Jx * t5;
		this.b1.vely -= Jy * t5;
		var t6 = this.b2.imass;
		this.b2.velx += Jx * t6;
		this.b2.vely += Jy * t6;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		var Jx = 0.0;
		var Jy = 0.0;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t1 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t1 * t1) {
					var t2 = t1 * (1.0 / Math.sqrt(ls));
					Jx *= t2;
					Jy *= t2;
				}
				var t3 = this.b1.imass;
				this.b1.posx -= Jx * t3;
				this.b1.posy -= Jy * t3;
				var t4 = this.b2.imass;
				this.b2.posx += Jx * t4;
				this.b2.posy += Jy * t4;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				var t5 = 0.5;
				Ex *= t5;
				Ey *= t5;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kc = m;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kc += X * r1x;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kc += X1 * r2x;
		}
		Jx = -Ex;
		Jy = -Ey;
		var t6 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t6 * t6) {
			var t7 = t6 * (1.0 / Math.sqrt(ls1));
			Jx *= t7;
			Jy *= t7;
		}
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t8 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t8;
		}
		var t9 = this.b1.imass;
		this.b1.posx -= Jx * t9;
		this.b1.posy -= Jy * t9;
		var t10 = this.b2.imass;
		this.b2.posx += Jx * t10;
		this.b2.posy += Jy * t10;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_$nape_constraint_ZPP_$PivotJoint
});
var zpp_$nape_constraint_ZPP_$PulleyJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_PulleyJoint"] = zpp_$nape_constraint_ZPP_$PulleyJoint;
zpp_$nape_constraint_ZPP_$PulleyJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$PulleyJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PulleyJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			var ret = nape_geom_Vec3.get();
			if(b == this.b1) {
				var _g = ret;
				_g.set_x((function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n12x);
				var _g1 = ret;
				_g1.set_y((function($this) {
					var $r;
					if(_g1 != null && _g1.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g1.zpp_inner.validate();
					$r = _g1.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n12y);
				var _g2 = ret;
				_g2.set_z((function($this) {
					var $r;
					if(_g2 != null && _g2.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g2.zpp_inner.validate();
					$r = _g2.zpp_inner.z;
					return $r;
				}(this)) - this.cx1 * this.jAcc);
			}
			if(b == this.b2) {
				var _g3 = ret;
				_g3.set_x((function($this) {
					var $r;
					if(_g3 != null && _g3.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g3.zpp_inner.validate();
					$r = _g3.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n12x);
				var _g4 = ret;
				_g4.set_y((function($this) {
					var $r;
					if(_g4 != null && _g4.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g4.zpp_inner.validate();
					$r = _g4.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n12y);
				var _g5 = ret;
				_g5.set_z((function($this) {
					var $r;
					if(_g5 != null && _g5.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g5.zpp_inner.validate();
					$r = _g5.zpp_inner.z;
					return $r;
				}(this)) + this.cx2 * this.jAcc);
			}
			if(b == this.b3) {
				var _g6 = ret;
				_g6.set_x((function($this) {
					var $r;
					if(_g6 != null && _g6.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g6.zpp_inner.validate();
					$r = _g6.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n34x);
				var _g7 = ret;
				_g7.set_y((function($this) {
					var $r;
					if(_g7 != null && _g7.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g7.zpp_inner.validate();
					$r = _g7.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n34y);
				var _g8 = ret;
				_g8.set_z((function($this) {
					var $r;
					if(_g8 != null && _g8.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g8.zpp_inner.validate();
					$r = _g8.zpp_inner.z;
					return $r;
				}(this)) - this.cx3 * this.jAcc);
			}
			if(b == this.b4) {
				var _g9 = ret;
				_g9.set_x((function($this) {
					var $r;
					if(_g9 != null && _g9.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g9.zpp_inner.validate();
					$r = _g9.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n34x);
				var _g10 = ret;
				_g10.set_y((function($this) {
					var $r;
					if(_g10 != null && _g10.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g10.zpp_inner.validate();
					$r = _g10.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n34y);
				var _g11 = ret;
				_g11.set_z((function($this) {
					var $r;
					if(_g11 != null && _g11.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
					_g11.zpp_inner.validate();
					$r = _g11.zpp_inner.z;
					return $r;
				}(this)) + this.cx4 * this.jAcc);
			}
			return ret;
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.add(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.remove(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_a3: function() {
		this.wrap_a3.zpp_inner.x = this.a3localx;
		this.wrap_a3.zpp_inner.y = this.a3localy;
	}
	,invalidate_a3: function(x) {
		this.immutable_midstep("Constraint::" + "a3");
		this.a3localx = x.x;
		this.a3localy = x.y;
		this.wake();
	}
	,setup_a3: function() {
		this.wrap_a3 = nape_geom_Vec2.get(this.a3localx,this.a3localy,null);
		this.wrap_a3.zpp_inner._inuse = true;
		this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
		this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
	}
	,validate_a4: function() {
		this.wrap_a4.zpp_inner.x = this.a4localx;
		this.wrap_a4.zpp_inner.y = this.a4localy;
	}
	,invalidate_a4: function(x) {
		this.immutable_midstep("Constraint::" + "a4");
		this.a4localx = x.x;
		this.a4localy = x.y;
		this.wake();
	}
	,setup_a4: function() {
		this.wrap_a4 = nape_geom_Vec2.get(this.a4localx,this.a4localy,null);
		this.wrap_a4.zpp_inner._inuse = true;
		this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
		this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
	}
	,copy: function(dict,todo) {
		var ret = new nape_constraint_PulleyJoint(null,null,null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_anchor3(),this.outer_zn.get_anchor4(),this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		if(dict != null && this.b3 != null) {
			var b4 = null;
			var _g2 = 0;
			while(_g2 < dict.length) {
				var idc2 = dict[_g2];
				++_g2;
				if(idc2.id == this.b3.id) {
					b4 = idc2.bc;
					break;
				}
			}
			if(b4 != null) ret.zpp_inner_zn.b3 = b4.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b3.id,function(b5) {
				ret.zpp_inner_zn.b3 = b5.zpp_inner;
			}));
		}
		if(dict != null && this.b4 != null) {
			var b6 = null;
			var _g3 = 0;
			while(_g3 < dict.length) {
				var idc3 = dict[_g3];
				++_g3;
				if(idc3.id == this.b4.id) {
					b6 = idc3.bc;
					break;
				}
			}
			if(b6 != null) ret.zpp_inner_zn.b4 = b6.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b4.id,function(b7) {
				ret.zpp_inner_zn.b4 = b7.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null || this.b3 == null || this.b4 == null) throw new js__$Boot_HaxeError("Error: PulleyJoint cannot be simulated with null bodies");
		if(this.b1 == this.b2 || this.b3 == this.b4) throw new js__$Boot_HaxeError("Error: PulleyJoint cannot have body1==body2 or body3==body4");
		if(this.b1.space != this.space || this.b2.space != this.space || this.b3.space != this.space || this.b4.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(this.jointMin > this.jointMax) throw new js__$Boot_HaxeError("Error: PulleyJoint must have jointMin <= jointMax");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
		if(!(this.b3.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b4.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
		if(this.b3 != null && this.b3.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b3.wake();
		if(this.b4 != null && this.b4.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b4.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
		if(this.b3.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr2;
			if(this.b3.component == this.b3.component.parent) xr2 = this.b3.component; else {
				var obj4 = this.b3.component;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				xr2 = obj4;
			}
			var yr2;
			if(this.component == this.component.parent) yr2 = this.component; else {
				var obj5 = this.component;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				yr2 = obj5;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		}
		if(this.b4.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr3;
			if(this.b4.component == this.b4.component.parent) xr3 = this.b4.component; else {
				var obj6 = this.b4.component;
				var stack6 = null;
				while(obj6 != obj6.parent) {
					var nxt12 = obj6.parent;
					obj6.parent = stack6;
					stack6 = obj6;
					obj6 = nxt12;
				}
				while(stack6 != null) {
					var nxt13 = stack6.parent;
					stack6.parent = obj6;
					stack6 = nxt13;
				}
				xr3 = obj6;
			}
			var yr3;
			if(this.component == this.component.parent) yr3 = this.component; else {
				var obj7 = this.component;
				var stack7 = null;
				while(obj7 != obj7.parent) {
					var nxt14 = obj7.parent;
					obj7.parent = stack7;
					stack7 = obj7;
					obj7 = nxt14;
				}
				while(stack7 != null) {
					var nxt15 = stack7.parent;
					stack7.parent = obj7;
					stack7 = nxt15;
				}
				yr3 = obj7;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di) || this.b4.id == id && (this.b1.id == di || this.b2.id == di || this.b3.id == di);
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var C;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			this.n12x = t12x * t;
			this.n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			this.n34x = t34x * t1;
			this.n34y = t34y * t1;
			var t2 = this.ratio;
			this.n34x *= t2;
			this.n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(this.n34x * this.n34x + this.n34y * this.n34y);
			this.n34x *= t3;
			this.n34y *= t3;
		}
		var C1 = C12 + this.ratio * C34;
		if(this.equal) {
			C1 -= this.jointMax;
			this.slack = false;
		} else if(C1 < this.jointMin) {
			C1 = this.jointMin - C1;
			this.n12x = -this.n12x;
			this.n12y = -this.n12y;
			this.n34x = -this.n34x;
			this.n34y = -this.n34y;
			this.slack = false;
		} else if(C1 > this.jointMax) {
			C1 -= this.jointMax;
			this.slack = false;
		} else {
			this.n12x = 0;
			this.n12y = 0;
			this.n34x = 0;
			this.n34y = 0;
			C1 = 0;
			this.slack = true;
		}
		C = C1;
		if(!this.slack) {
			this.cx1 = this.n12y * this.a1relx - this.n12x * this.a1rely;
			this.cx2 = this.n12y * this.a2relx - this.n12x * this.a2rely;
			this.cx3 = this.n34y * this.a3relx - this.n34x * this.a3rely;
			this.cx4 = this.n34y * this.a4relx - this.n34x * this.a4rely;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * this.cx1 * this.cx1 + this.b2.sinertia * this.cx2 * this.cx2 + this.b3.sinertia * this.cx3 * this.cx3 + this.b4.sinertia * this.cx4 * this.cx4;
			if(this.b1 == this.b4) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx4 * this.b1.sinertia);
			if(this.b1 == this.b3) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx3 * this.b1.sinertia);
			if(this.b2 == this.b3) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx3 * this.b2.sinertia);
			if(this.b2 == this.b4) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx4 * this.b2.sinertia);
			this.kMass = K;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.n12x * t;
			this.b1.vely -= this.n12y * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.n12x * t1;
			this.b2.vely += this.n12y * t1;
			var t2 = this.b3.imass * this.jAcc;
			this.b3.velx -= this.n34x * t2;
			this.b3.vely -= this.n34y * t2;
			var t3 = this.b4.imass * this.jAcc;
			this.b4.velx += this.n34x * t3;
			this.b4.vely += this.n34y * t3;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
			this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
			this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.n12x * t1;
		this.b2.vely += this.n12y * t1;
		var t2 = this.b3.imass * j;
		this.b3.velx -= this.n34x * t2;
		this.b3.vely -= this.n34y * t2;
		var t3 = this.b4.imass * j;
		this.b4.velx += this.n34x * t3;
		this.b4.vely += this.n34y * t3;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
		this.b4.angvel += this.cx4 * this.b4.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var r3x = 0.0;
		var r3y = 0.0;
		r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		var r4x = 0.0;
		var r4y = 0.0;
		r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var slack;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		n12x = this.n12x;
		n12y = this.n12y;
		n34x = this.n34x;
		n34y = this.n34y;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
		t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
		t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
		t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k1 = this.b1.smass + this.b2.smass;
				if(k1 > nape_Config.epsilon) {
					k1 = 0.75 / k1;
					j = -E * k1;
					if(this.equal || j < 0) {
						var t4 = j * this.b1.imass;
						this.b1.posx -= n12x * t4;
						this.b1.posy -= n12y * t4;
						var t5 = j * this.b2.imass;
						this.b2.posx += n12x * t5;
						this.b2.posy += n12y * t5;
						var t6 = j * this.b3.imass;
						this.b3.posx -= n34x * t6;
						this.b3.posy -= n34y * t6;
						var t7 = j * this.b4.imass;
						this.b4.posx += n34x * t7;
						this.b4.posy += n34y * t7;
						var t12x1 = 0.0;
						var t12y1 = 0.0;
						var t34x1 = 0.0;
						var t34y1 = 0.0;
						t12x1 = this.b2.posx + r2x - (this.b1.posx + r1x);
						t12y1 = this.b2.posy + r2y - (this.b1.posy + r1y);
						t34x1 = this.b4.posx + r4x - (this.b3.posx + r3x);
						t34y1 = this.b4.posy + r4y - (this.b3.posy + r3y);
						var C121 = Math.sqrt(t12x1 * t12x1 + t12y1 * t12y1);
						var C341 = Math.sqrt(t34x1 * t34x1 + t34y1 * t34y1);
						if(C121 != 0) {
							var t8 = 1.0 / C121;
							n12x = t12x1 * t8;
							n12y = t12y1 * t8;
						}
						if(C341 != 0) {
							var t9 = 1.0 / C341;
							n34x = t34x1 * t9;
							n34y = t34y1 * t9;
							var t10 = this.ratio;
							n34x *= t10;
							n34y *= t10;
						} else {
							var t11 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
							n34x *= t11;
							n34y *= t11;
						}
						var C1 = C121 + this.ratio * C341;
						if(this.equal) {
							C1 -= this.jointMax;
							slack = false;
						} else if(C1 < this.jointMin) {
							C1 = this.jointMin - C1;
							n12x = -n12x;
							n12y = -n12y;
							n34x = -n34x;
							n34y = -n34y;
							slack = false;
						} else if(C1 > this.jointMax) {
							C1 -= this.jointMax;
							slack = false;
						} else {
							n12x = 0;
							n12y = 0;
							n34x = 0;
							n34y = 0;
							C1 = 0;
							slack = true;
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var cx3;
			var cx4;
			var k;
			cx1 = n12y * r1x - n12x * r1y;
			cx2 = n12y * r2x - n12x * r2y;
			cx3 = n34y * r3x - n34x * r3y;
			cx4 = n34y * r4x - n34x * r4y;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * cx1 * cx1 + this.b2.sinertia * cx2 * cx2 + this.b3.sinertia * cx3 * cx3 + this.b4.sinertia * cx4 * cx4;
			if(this.b1 == this.b4) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx4 * this.b1.sinertia);
			if(this.b1 == this.b3) K += 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx3 * this.b1.sinertia);
			if(this.b2 == this.b3) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx3 * this.b2.sinertia);
			if(this.b2 == this.b4) K += 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx4 * this.b2.sinertia);
			k = K;
			if(k != 0) k = 1 / k;
			j = -E * k;
			if(this.equal || j < 0) {
				var t12 = this.b1.imass * j;
				this.b1.posx -= n12x * t12;
				this.b1.posy -= n12y * t12;
				var t13 = this.b2.imass * j;
				this.b2.posx += n12x * t13;
				this.b2.posy += n12y * t13;
				var t14 = this.b3.imass * j;
				this.b3.posx -= n34x * t14;
				this.b3.posy -= n34y * t14;
				var t15 = this.b4.imass * j;
				this.b4.posx += n34x * t15;
				this.b4.posy += n34y * t15;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
				this.b3.delta_rot(-cx3 * this.b3.iinertia * j);
				this.b4.delta_rot(cx4 * this.b4.iinertia * j);
			}
		}
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_$nape_constraint_ZPP_$PulleyJoint
});
var zpp_$nape_constraint_ZPP_$UserConstraint = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.bodies = [];
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = [];
	this.bias = [];
	this.L = [];
	this.J = [];
	this.jOld = [];
	this.y = [];
	this.Keff = [];
	this.vec3 = nape_geom_Vec3.get(0,0,0);
	var _g = 0;
	while(_g < dim) {
		var i = _g++;
		this.jAcc[i] = this.bias[i] = this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		var _g1 = 0;
		while(_g1 < dim) {
			var j = _g1++;
			this.L[i * dim + j] = 0.0;
		}
	}
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_UserConstraint"] = zpp_$nape_constraint_ZPP_$UserConstraint;
zpp_$nape_constraint_ZPP_$UserConstraint.__name__ = true;
zpp_$nape_constraint_ZPP_$UserConstraint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$UserConstraint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	bindVec2_invalidate: function(_) {
		this.outer_zn.__invalidate();
	}
	,addBody: function(b) {
		var match = null;
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if(x.body == b) {
				match = x;
				break;
			}
		}
		if(match == null) {
			this.bodies.push(new zpp_$nape_constraint_ZPP_$UserBody(1,b));
			if(this.active && this.space != null) {
				if(b != null) b.constraints.add(this);
			}
		} else match.cnt++;
	}
	,remBody: function(b) {
		var match = null;
		var bl = this.bodies.length | 0;
		var i = 0;
		while(i < bl) {
			var x = this.bodies[i];
			if(x.body == b) {
				x.cnt--;
				if(x.cnt == 0) {
					if(bl > 0) this.bodies[i] = this.bodies[bl - 1];
					this.bodies.pop();
					if(this.active && this.space != null) {
						if(b != null) b.constraints.remove(this);
					}
				}
				match = x;
				break;
			}
			i++;
		}
		return match != null;
	}
	,bodyImpulse: function(b) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.jAcc[i];
		}
		var ret = nape_geom_Vec3.get(0,0,0);
		if(this.stepped) this.outer_zn.__impulse(this.J,b.outer,ret);
		return ret;
	}
	,activeBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.remove(this);
		}
	}
	,copy: function(dict,todo) {
		var ret = this.outer_zn.__copy();
		this.copyto(ret);
		throw new js__$Boot_HaxeError("not done yet");
		return ret;
	}
	,validate: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same sapce to which the constraint has been assigned");
		}
		this.outer_zn.__validate();
	}
	,wake_connected: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) b.body.wake();
		}
	}
	,forest: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
				var xr;
				if(b.body.component == b.body.component.parent) xr = b.body.component; else {
					var obj = b.body.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt1 = stack.parent;
						stack.parent = obj;
						stack = nxt1;
					}
					xr = obj;
				}
				var yr;
				if(this.component == this.component.parent) yr = this.component; else {
					var obj1 = this.component;
					var stack1 = null;
					while(obj1 != obj1.parent) {
						var nxt2 = obj1.parent;
						obj1.parent = stack1;
						stack1 = obj1;
						obj1 = nxt2;
					}
					while(stack1 != null) {
						var nxt3 = stack1.parent;
						stack1.parent = obj1;
						stack1 = nxt3;
					}
					yr = obj1;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		var ret = false;
		var bl = this.bodies.length | 0;
		var _g = 0;
		while(_g < bl) {
			var bi = _g++;
			var b = this.bodies[bi].body;
			var _g1 = bi + 1;
			while(_g1 < bl) {
				var ci = _g1++;
				var c = this.bodies[ci].body;
				if(b.id == id && c.id == di || b.id == di && c.id == id) {
					ret = true;
					break;
				}
			}
			if(ret) break;
		}
		return ret;
	}
	,broken: function() {
		this.outer_zn.__broken();
	}
	,clearcache: function() {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.jAcc[i] = 0.0;
		}
		this.pre_dt = -1.0;
	}
	,lsq: function(v) {
		var sum = 0.0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			sum += v[i] * v[i];
		}
		return sum;
	}
	,_clamp: function(v,max) {
		var x = this.lsq(v);
		if(x > max * max) {
			var scale = max / Math.sqrt(x);
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				v[i] *= scale;
			}
		}
	}
	,solve: function(m) {
		var ind = 0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var j = _g1++;
			var sum = 0.0;
			var _g3 = 0;
			var _g2 = j - 1;
			while(_g3 < _g2) {
				var k = _g3++;
				sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
			}
			var rec = Math.sqrt(m[ind++] - sum);
			this.L[j * this.dim + j] = rec;
			if(rec != 0) {
				rec = 1.0 / rec;
				var _g31 = j + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var i = _g31++;
					var sum1 = 0.0;
					var _g5 = 0;
					var _g4 = j - 1;
					while(_g5 < _g4) {
						var k1 = _g5++;
						sum1 += this.L[i * this.dim + k1] * this.L[j * this.dim + k1];
					}
					this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
				}
			} else {
				var _g32 = j + 1;
				var _g22 = this.dim;
				while(_g32 < _g22) {
					var i1 = _g32++;
					this.L[i1 * this.dim + j] = 0.0;
				}
				ind += this.dim - j - 1;
			}
		}
		return this.L;
	}
	,transform: function(L,x) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			var sum = x[i];
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var _g2 = 0;
				while(_g2 < i) {
					var k = _g2++;
					sum -= L[i * this.dim + k] * this.y[k];
				}
				this.y[i] = sum / lii;
			} else this.y[i] = 0.0;
		}
		var _g11 = 0;
		var _g3 = this.dim;
		while(_g11 < _g3) {
			var ix = _g11++;
			var i1 = this.dim - 1 - ix;
			var lii1 = L[i1 * this.dim + i1];
			if(lii1 != 0) {
				var sum1 = this.y[i1];
				var _g31 = i1 + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var k1 = _g31++;
					sum1 -= L[k1 * this.dim + i1] * x[k1];
				}
				x[i1] = sum1 / lii1;
			} else x[i1] = 0.0;
		}
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.outer_zn.__prepare();
		this.outer_zn.__eff_mass(this.Keff);
		this.L = this.solve(this.Keff);
		if(!this.stiff && !this.velonly) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.soft = ig;
			this.outer_zn.__position(this.bias);
			if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) return true;
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				this.bias[i] *= -biasCoef;
			}
			this._clamp(this.bias,this.maxError);
		} else {
			var _g11 = 0;
			var _g2 = this.dim;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.bias[i1] = 0.0;
			}
			this.gamma = 0.0;
			this.soft = 1.0;
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.jAcc[i2] *= dtratio;
		}
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
	}
	,applyImpulseVel: function() {
		this.outer_zn.__velocity(this.J);
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.bias[i] - this.J[i];
		}
		this.transform(this.L,this.J);
		var _g11 = 0;
		var _g2 = this.dim;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.jOld[i1] = this.jAcc[i1];
			this.jAcc[i1] += this.J[i1] = this.J[i1] * this.soft - this.jAcc[i1] * this.gamma;
		}
		this.outer_zn.__clamp(this.jAcc);
		if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
			if(this.breakUnderForce) return true; else if(!this.stiff) this._clamp(this.jAcc,this.jMax);
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.J[i2] = this.jAcc[i2] - this.jOld[i2];
		}
		var _g4 = 0;
		var _g13 = this.bodies;
		while(_g4 < _g13.length) {
			var bs = _g13[_g4];
			++_g4;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
		return false;
	}
	,applyImpulsePos: function() {
		if(this.velonly) return false;
		this.outer_zn.__prepare();
		this.outer_zn.__position(this.J);
		var lj = this.lsq(this.J);
		if(this.breakUnderError && lj > this.maxError * this.maxError) return true; else if(lj < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] *= -1;
		}
		this.outer_zn.__eff_mass(this.Keff);
		this.transform(this.solve(this.Keff),this.J);
		this.outer_zn.__clamp(this.J);
		var _g2 = 0;
		var _g11 = this.bodies;
		while(_g2 < _g11.length) {
			var bs = _g11[_g2];
			++_g2;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.posx += this.vec3.get_x() * t;
			b.posy += this.vec3.get_y() * t;
			b.delta_rot(this.vec3.get_z() * b.iinertia);
		}
		return false;
	}
	,draw: function(g) {
		this.outer_zn.__draw(g);
	}
	,__class__: zpp_$nape_constraint_ZPP_$UserConstraint
});
var zpp_$nape_constraint_ZPP_$UserBody = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
$hxClasses["zpp_nape.constraint.ZPP_UserBody"] = zpp_$nape_constraint_ZPP_$UserBody;
zpp_$nape_constraint_ZPP_$UserBody.__name__ = true;
zpp_$nape_constraint_ZPP_$UserBody.prototype = {
	__class__: zpp_$nape_constraint_ZPP_$UserBody
};
var zpp_$nape_constraint_ZPP_$WeldJoint = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_WeldJoint"] = zpp_$nape_constraint_ZPP_$WeldJoint;
zpp_$nape_constraint_ZPP_$WeldJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$WeldJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$WeldJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz)); else return nape_geom_Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,copy: function(dict,todo) {
		var ret = new nape_constraint_PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: WeldJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.jAccz = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassd = m;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassd += X * this.a1relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassd += X1 * this.a2relx;
			this.kMassc += -Y1;
			this.kMasse += X1;
			this.kMassf += this.b2.sinertia;
		}
		var flag;
		var det = this.kMassa * (this.kMassd * this.kMassf - this.kMasse * this.kMasse) + this.kMassb * (this.kMassc * this.kMasse - this.kMassb * this.kMassf) + this.kMassc * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
		if(det != det) {
			this.kMassa = 0;
			this.kMassb = 0;
			this.kMassd = 0;
			this.kMassc = 0;
			this.kMasse = 0;
			this.kMassf = 0;
			flag = 7;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassd != 0) this.kMassd = 1 / this.kMassd; else {
				this.kMassd = 0;
				flag1 |= 2;
			}
			if(this.kMassf != 0) this.kMassf = 1 / this.kMassf; else {
				this.kMassf = 0;
				flag1 |= 4;
			}
			this.kMassb = this.kMassc = this.kMasse = 0.0;
			flag = flag1;
		} else {
			det = 1 / det;
			var A = det * (this.kMassd * this.kMassf - this.kMasse * this.kMasse);
			var B = det * (this.kMasse * this.kMassc - this.kMassb * this.kMassf);
			var D = det * (this.kMassa * this.kMassf - this.kMassc * this.kMassc);
			var C = det * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
			var E = det * (this.kMassb * this.kMassc - this.kMassa * this.kMasse);
			var F = det * (this.kMassa * this.kMassd - this.kMassb * this.kMassb);
			this.kMassa = A;
			this.kMassb = B;
			this.kMassd = D;
			this.kMassc = C;
			this.kMasse = E;
			this.kMassf = F;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if((flag & 4) != 0) this.jAccz = 0;
		if(!this.stiff) {
			var biasCoef;
			var X2;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassd *= X2;
			this.kMassc *= X2;
			this.kMasse *= X2;
			this.kMassf *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			this.biasz = this.b2.rot - this.b1.rot - this.phase;
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) return true;
			var t = -biasCoef;
			var t1 = t;
			this.biasx *= t1;
			this.biasy *= t1;
			this.biasz *= t;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				var t4 = t3;
				this.biasx *= t4;
				this.biasy *= t4;
				this.biasz *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.biasz = 0;
			this.gamma = 0;
		}
		var t5 = dtratio;
		var t6 = t5;
		this.jAccx *= t6;
		this.jAccy *= t6;
		this.jAccz *= t5;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		Jz = this.biasz - Ez;
		var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
		var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
		Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
		Jx = X;
		Jy = Y;
		var t = this.gamma;
		var t1 = t;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		Jz -= this.jAccz * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		var jOldz = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		jOldz = this.jAccz;
		var t2 = 1;
		var t3 = t2;
		this.jAccx += Jx * t3;
		this.jAccy += Jy * t3;
		this.jAccz += Jz * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t4 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
			if(ls > t4 * t4) {
				var t5 = t4 * (1.0 / Math.sqrt(ls));
				var t6 = t5;
				this.jAccx *= t6;
				this.jAccy *= t6;
				this.jAccz *= t5;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		Jz = this.jAccz - jOldz;
		var t7 = this.b1.imass;
		this.b1.velx -= Jx * t7;
		this.b1.vely -= Jy * t7;
		var t8 = this.b2.imass;
		this.b2.velx += Jx * t8;
		this.b2.vely += Jy * t8;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		Ez = this.b2.rot - this.b1.rot - this.phase;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) return true;
		var cont = true;
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			cont = false;
			Ex = 0;
			Ey = 0;
		}
		if(Ez * Ez < zpp_$nape_util_ZPP_$Math.sqr(nape_Config.constraintAngularSlop)) {
			if(!cont) return false; else Ez = 0;
		}
		var t = 0.5;
		var t1 = t;
		Ex *= t1;
		Ey *= t1;
		Ez *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t2 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t2 * t2) {
					var t3 = t2 * (1.0 / Math.sqrt(ls));
					Jx *= t3;
					Jy *= t3;
				}
				var t4 = this.b1.imass;
				this.b1.posx -= Jx * t4;
				this.b1.posy -= Jy * t4;
				var t5 = this.b2.imass;
				this.b2.posx += Jx * t5;
				this.b2.posy += Jy * t5;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				Ez = this.b2.rot - this.b1.rot - this.phase;
				var t6 = 0.5;
				var t7 = t6;
				Ex *= t7;
				Ey *= t7;
				Ez *= t6;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kd = 0.0;
		var Kc = 0.0;
		var Ke = 0.0;
		var Kf = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kd = m;
		Kc = 0;
		Ke = 0;
		Kf = 0;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kd += X * r1x;
			Kc += -Y;
			Ke += X;
			Kf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kd += X1 * r2x;
			Kc += -Y1;
			Ke += X1;
			Kf += this.b2.sinertia;
		}
		Jx = -Ex;
		Jy = -Ey;
		Jz = -Ez;
		var t8 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t8 * t8) {
			var t9 = t8 * (1.0 / Math.sqrt(ls1));
			Jx *= t9;
			Jy *= t9;
		}
		zpp_$nape_util_ZPP_$Math.clamp(Jz,-0.25,0.25);
		var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
		if(det != det) Jx = Jy = Jz = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kd != 0) Jy /= Kd; else Jy = 0;
			if(Kf != 0) Jz /= Kf; else Jz = 0;
		} else {
			det = 1 / det;
			var B = Ke * Kc - Kb * Kf;
			var C = Kb * Ke - Kc * Kd;
			var E = Kb * Kc - Ka * Ke;
			var X2 = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
			var Y2 = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
			Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
			Jx = X2;
			Jy = Y2;
		}
		var t10 = this.b1.imass;
		this.b1.posx -= Jx * t10;
		this.b1.posy -= Jy * t10;
		var t11 = this.b2.imass;
		this.b2.posx += Jx * t11;
		this.b2.posy += Jy * t11;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
	}
	,__class__: zpp_$nape_constraint_ZPP_$WeldJoint
});
var zpp_$nape_dynamics_ZPP_$Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.outer = null;
};
$hxClasses["zpp_nape.dynamics.ZPP_Arbiter"] = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$Arbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$Arbiter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = true;
			if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				this.colarb.outer_zn = new nape_dynamics_CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape_dynamics_FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else this.outer = new nape_dynamics_Arbiter();
			this.outer.zpp_inner = this;
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
		}
		return this.outer;
	}
	,inactiveme: function() {
		return !this.active;
	}
	,acting: function() {
		return this.active && (this.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0;
	}
	,swap_features: function() {
		var t = this.b1;
		this.b1 = this.b2;
		this.b2 = t;
		var t1 = this.ws1;
		this.ws1 = this.ws2;
		this.ws2 = t1;
		var t2 = this.colarb.s1;
		this.colarb.s1 = this.colarb.s2;
		this.colarb.s2 = t2;
	}
	,lazyRetire: function(s,b) {
		this.cleared = true;
		if(b == null || this.b2 == b) this.b1.arbiters.inlined_try_remove(this);
		if(b == null || this.b1 == b) this.b2.arbiters.inlined_try_remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
		this.active = false;
		s.f_arbiters.modified = true;
	}
	,sup_assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,sup_retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Arbiter
};
var zpp_$nape_dynamics_ZPP_$SensorArbiter = function() {
	this.next = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR;
	this.sensorarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_SensorArbiter"] = zpp_$nape_dynamics_ZPP_$SensorArbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$SensorArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	alloc: function() {
	}
	,free: function() {
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o;
	}
	,makemutable: function() {
	}
	,makeimmutable: function() {
	}
	,__class__: zpp_$nape_dynamics_ZPP_$SensorArbiter
});
var zpp_$nape_dynamics_ZPP_$FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.wrap_position = null;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_FluidArbiter"] = zpp_$nape_dynamics_ZPP_$FluidArbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$FluidArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	alloc: function() {
	}
	,free: function() {
	}
	,position_validate: function() {
		if(!this.active) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		this.wrap_position.zpp_inner.x = this.centroidx;
		this.wrap_position.zpp_inner.y = this.centroidy;
	}
	,position_invalidate: function(x) {
		this.centroidx = x.x;
		this.centroidy = x.y;
	}
	,getposition: function() {
		this.wrap_position = nape_geom_Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = !this.mutable;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
		this.wrap_position.zpp_inner._invalidate = $bind(this,this.position_invalidate);
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.nx = 0;
		this.ny = 1;
		this.dampx = 0;
		this.dampy = 0;
		this.adamp = 0.0;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o;
		this.pre_dt = -1.0;
	}
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = false;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = true;
	}
	,inject: function(area,cx,cy) {
		this.overlap = area;
		this.centroidx = cx;
		this.centroidy = cy;
	}
	,preStep: function(s,dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.r1x = this.centroidx - this.b1.posx;
		this.r1y = this.centroidy - this.b1.posy;
		this.r2x = this.centroidx - this.b2.posx;
		this.r2y = this.centroidy - this.b2.posy;
		var g1x = 0.0;
		var g1y = 0.0;
		if(this.ws1.fluidEnabled && this.ws1.fluidProperties.wrap_gravity != null) {
			g1x = this.ws1.fluidProperties.gravityx;
			g1y = this.ws1.fluidProperties.gravityy;
		} else {
			g1x = s.gravityx;
			g1y = s.gravityy;
		}
		var g2x = 0.0;
		var g2y = 0.0;
		if(this.ws2.fluidEnabled && this.ws2.fluidProperties.wrap_gravity != null) {
			g2x = this.ws2.fluidProperties.gravityx;
			g2y = this.ws2.fluidProperties.gravityy;
		} else {
			g2x = s.gravityx;
			g2y = s.gravityy;
		}
		var buoyx = 0;
		var buoyy = 0;
		if(this.ws1.fluidEnabled && this.ws2.fluidEnabled) {
			var mass1 = this.overlap * this.ws1.fluidProperties.density;
			var mass2 = this.overlap * this.ws2.fluidProperties.density;
			if(mass1 > mass2) {
				var t = mass1 + mass2;
				buoyx -= g1x * t;
				buoyy -= g1y * t;
			} else if(mass1 < mass2) {
				var t1 = mass1 + mass2;
				buoyx += g2x * t1;
				buoyy += g2y * t1;
			} else {
				var gx = 0.0;
				var gy = 0.0;
				gx = g1x + g2x;
				gy = g1y + g2y;
				var t2 = 0.5;
				gx *= t2;
				gy *= t2;
				if(this.ws1.worldCOMx * gx + this.ws1.worldCOMy * gy > this.ws2.worldCOMx * gx + this.ws2.worldCOMy * gy) {
					var t3 = mass1 + mass2;
					buoyx -= gx * t3;
					buoyy -= gy * t3;
				} else {
					var t4 = mass1 + mass2;
					buoyx += gx * t4;
					buoyy += gy * t4;
				}
			}
		} else if(this.ws1.fluidEnabled) {
			var mass = this.overlap * this.ws1.fluidProperties.density;
			var t5 = mass;
			buoyx -= g1x * t5;
			buoyy -= g1y * t5;
		} else if(this.ws2.fluidEnabled) {
			var mass3 = this.overlap * this.ws2.fluidProperties.density;
			var t6 = mass3;
			buoyx += g2x * t6;
			buoyy += g2y * t6;
		}
		var t7 = dt;
		buoyx *= t7;
		buoyy *= t7;
		this.buoyx = buoyx;
		this.buoyy = buoyy;
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var t8 = this.b1.imass;
			this.b1.velx -= buoyx * t8;
			this.b1.vely -= buoyy * t8;
			this.b1.angvel -= (buoyy * this.r1x - buoyx * this.r1y) * this.b1.iinertia;
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var t9 = this.b2.imass;
			this.b2.velx += buoyx * t9;
			this.b2.vely += buoyy * t9;
			this.b2.angvel += (buoyy * this.r2x - buoyx * this.r2y) * this.b2.iinertia;
		}
		if((!this.ws1.fluidEnabled || this.ws1.fluidProperties.viscosity == 0) && (!this.ws2.fluidEnabled || this.ws2.fluidProperties.viscosity == 0)) {
			this.nodrag = true;
			this.dampx = 0;
			this.dampy = 0;
			this.adamp = 0;
		} else {
			this.nodrag = false;
			var tViscosity = 0.0;
			if(this.ws1.fluidEnabled) {
				this.ws2.validate_angDrag();
				tViscosity += this.ws1.fluidProperties.viscosity * this.ws2.angDrag * this.overlap / this.ws2.area;
			}
			if(this.ws2.fluidEnabled) {
				this.ws1.validate_angDrag();
				tViscosity += this.ws2.fluidProperties.viscosity * this.ws1.angDrag * this.overlap / this.ws1.area;
			}
			if(tViscosity != 0) {
				var iSum = this.b1.sinertia + this.b2.sinertia;
				if(iSum != 0) this.wMass = 1 / iSum; else this.wMass = 0.0;
				var biasCoef;
				tViscosity *= 0.0004;
				var omega = 2 * Math.PI * tViscosity;
				this.agamma = 1 / (dt * omega * (2 + omega * dt));
				var ig = 1 / (1 + this.agamma);
				biasCoef = dt * omega * omega * this.agamma;
				this.agamma *= ig;
				this.wMass *= ig;
			} else {
				this.wMass = 0.0;
				this.agamma = 0.0;
			}
			var vrnx = this.b2.velx + this.b2.kinvelx - this.r2y * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.r1y * (this.b2.angvel + this.b2.kinangvel));
			var vrny = this.b2.vely + this.b2.kinvely + this.r2x * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.r1x * (this.b1.angvel + this.b1.kinangvel));
			if(vrnx * vrnx + vrny * vrny < nape_Config.epsilon * nape_Config.epsilon) {
			} else {
				var d = vrnx * vrnx + vrny * vrny;
				var imag = 1.0 / Math.sqrt(d);
				var t10 = imag;
				vrnx *= t10;
				vrny *= t10;
				this.nx = vrnx;
				this.ny = vrny;
			}
			var tViscosity1 = 0.0;
			if(this.ws1.fluidEnabled) {
				var f = -this.ws1.fluidProperties.viscosity * this.overlap / this.ws2.area;
				if(this.ws2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) tViscosity1 -= f * this.ws2.circle.radius * nape_Config.fluidLinearDrag / (2 * this.ws2.circle.radius * Math.PI); else {
					var poly = this.ws2.polygon;
					var bord = 0.0;
					var acc = 0.0;
					var cx_ite = poly.edges.head;
					while(cx_ite != null) {
						var ex = cx_ite.elt;
						bord += ex.length;
						var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
						if(fact > 0) fact = fact *= -nape_Config.fluidVacuumDrag;
						acc -= fact * 0.5 * nape_Config.fluidLinearDrag;
						cx_ite = cx_ite.next;
					}
					tViscosity1 += acc / bord;
				}
			}
			if(this.ws2.fluidEnabled) {
				var f1 = -this.ws2.fluidProperties.viscosity * this.overlap / this.ws1.area;
				if(this.ws1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) tViscosity1 -= f1 * this.ws1.circle.radius * nape_Config.fluidLinearDrag / (2 * this.ws1.circle.radius * Math.PI); else {
					var poly1 = this.ws1.polygon;
					var bord1 = 0.0;
					var acc1 = 0.0;
					var cx_ite1 = poly1.edges.head;
					while(cx_ite1 != null) {
						var ex1 = cx_ite1.elt;
						bord1 += ex1.length;
						var fact1 = f1 * ex1.length * (ex1.gnormx * this.nx + ex1.gnormy * this.ny);
						if(fact1 > 0) fact1 = fact1 *= -nape_Config.fluidVacuumDrag;
						acc1 -= fact1 * 0.5 * nape_Config.fluidLinearDrag;
						cx_ite1 = cx_ite1.next;
					}
					tViscosity1 += acc1 / bord1;
				}
			}
			if(tViscosity1 != 0) {
				var m = this.b1.smass + this.b2.smass;
				var Ka = 0.0;
				var Kb = 0.0;
				var Kc = 0.0;
				Ka = m;
				Kb = 0;
				Kc = m;
				if(this.b1.sinertia != 0) {
					var X = this.r1x * this.b1.sinertia;
					var Y = this.r1y * this.b1.sinertia;
					Ka += Y * this.r1y;
					Kb += -Y * this.r1x;
					Kc += X * this.r1x;
				}
				if(this.b2.sinertia != 0) {
					var X1 = this.r2x * this.b2.sinertia;
					var Y1 = this.r2y * this.b2.sinertia;
					Ka += Y1 * this.r2y;
					Kb += -Y1 * this.r2x;
					Kc += X1 * this.r2x;
				}
				var det = Ka * Kc - Kb * Kb;
				if(det != det) {
					Ka = Kb = Kc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(Ka != 0) Ka = 1 / Ka; else {
						Ka = 0;
						flag |= 1;
					}
					if(Kc != 0) Kc = 1 / Kc; else {
						Kc = 0;
						flag |= 2;
					}
					Kb = 0;
					flag;
				} else {
					det = 1 / det;
					var t11 = Kc * det;
					Kc = Ka * det;
					Ka = t11;
					Kb *= -det;
					0;
				}
				this.vMassa = Ka;
				this.vMassb = Kb;
				this.vMassc = Kc;
				var biasCoef1;
				var X2;
				var omega1 = 2 * Math.PI * tViscosity1;
				this.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
				var ig1 = 1 / (1 + this.lgamma);
				biasCoef1 = dt * omega1 * omega1 * this.lgamma;
				this.lgamma *= ig1;
				X2 = ig1;
				this.vMassa *= X2;
				this.vMassb *= X2;
				this.vMassc *= X2;
			} else {
				this.vMassa = 0;
				this.vMassb = 0;
				this.vMassc = 0;
				this.lgamma = 0.0;
			}
		}
		var t12 = dtratio;
		this.dampx *= t12;
		this.dampy *= t12;
		this.adamp *= dtratio;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.dampx * t;
		this.b1.vely -= this.dampy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.dampx * t1;
		this.b2.vely += this.dampy * t1;
		this.b1.angvel -= this.b1.iinertia * (this.dampy * this.r1x - this.dampx * this.r1y);
		this.b2.angvel += this.b2.iinertia * (this.dampy * this.r2x - this.dampx * this.r2y);
		this.b1.angvel -= this.adamp * this.b1.iinertia;
		this.b2.angvel += this.adamp * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		if(!this.nodrag) {
			var w1 = this.b1.angvel + this.b1.kinangvel;
			var w2 = this.b2.angvel + this.b2.kinangvel;
			var jx = this.b1.velx + this.b1.kinvelx - this.r1y * w1 - (this.b2.velx + this.b2.kinvelx - this.r2y * w2);
			var jy = this.b1.vely + this.b1.kinvely + this.r1x * w1 - (this.b2.vely + this.b2.kinvely + this.r2x * w2);
			var t = this.vMassa * jx + this.vMassb * jy;
			jy = this.vMassb * jx + this.vMassc * jy;
			jx = t;
			var t1 = this.lgamma;
			jx -= this.dampx * t1;
			jy -= this.dampy * t1;
			var t2 = 1.0;
			this.dampx += jx * t2;
			this.dampy += jy * t2;
			var t3 = this.b1.imass;
			this.b1.velx -= jx * t3;
			this.b1.vely -= jy * t3;
			var t4 = this.b2.imass;
			this.b2.velx += jx * t4;
			this.b2.vely += jy * t4;
			this.b1.angvel -= this.b1.iinertia * (jy * this.r1x - jx * this.r1y);
			this.b2.angvel += this.b2.iinertia * (jy * this.r2x - jx * this.r2y);
			var j_damp = (w1 - w2) * this.wMass - this.adamp * this.agamma;
			this.adamp += j_damp;
			this.b1.angvel -= j_damp * this.b1.iinertia;
			this.b2.angvel += j_damp * this.b2.iinertia;
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$FluidArbiter
});
var zpp_$nape_dynamics_ZPP_$ColArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_normal = null;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.wrap_contacts = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_$nape_dynamics_ZPP_$Contact();
	this.innards = new zpp_$nape_dynamics_ZPP_$IContact();
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.COL;
	this.colarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_ColArbiter"] = zpp_$nape_dynamics_ZPP_$ColArbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$ColArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	normal_validate: function() {
		if(this.cleared) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		this.wrap_normal.zpp_inner.x = this.nx;
		this.wrap_normal.zpp_inner.y = this.ny;
		if(this.ws1.id > this.ws2.id) {
			this.wrap_normal.zpp_inner.x = -this.wrap_normal.zpp_inner.x;
			this.wrap_normal.zpp_inner.y = -this.wrap_normal.zpp_inner.y;
		}
	}
	,getnormal: function() {
		this.wrap_normal = nape_geom_Vec2.get(0,0,null);
		this.wrap_normal.zpp_inner._immutable = true;
		this.wrap_normal.zpp_inner._inuse = true;
		this.wrap_normal.zpp_inner._validate = $bind(this,this.normal_validate);
	}
	,alloc: function() {
	}
	,free: function() {
		this.userdef_dyn_fric = false;
		this.userdef_stat_fric = false;
		this.userdef_restitution = false;
		this.userdef_rfric = false;
		this.__ref_edge1 = this.__ref_edge2 = null;
	}
	,injectContact: function(px,py,nx,ny,dist,hash,posOnly) {
		if(posOnly == null) posOnly = false;
		var c = null;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var cur = cx_ite;
			if(hash == cur.hash) {
				c = cur;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(c == null) {
			if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) c = new zpp_$nape_dynamics_ZPP_$Contact(); else {
				c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
				c.next = null;
			}
			null;
			var ci = c.inner;
			ci.jnAcc = ci.jtAcc = 0;
			c.hash = hash;
			c.fresh = true;
			c.arbiter = this;
			this.jrAcc = 0;
			this.contacts.inlined_add(c);
			this.innards.add(ci);
		} else c.fresh = false;
		c.px = px;
		c.py = py;
		this.nx = nx;
		this.ny = ny;
		c.dist = dist;
		c.stamp = this.stamp;
		c.posOnly = posOnly;
		return c;
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.s1 = s1;
		this.s2 = s2;
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) this.restitution = 0; else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,calcProperties: function() {
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) this.restitution = 0; else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,validate_props: function() {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) this.restitution = 0; else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		while(!(this.contacts.next == null)) {
			var o = this.contacts.inlined_pop_unsafe();
			o.arbiter = null;
			o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
			zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
			this.innards.inlined_pop();
		}
		var o1 = this;
		o1.userdef_dyn_fric = false;
		o1.userdef_stat_fric = false;
		o1.userdef_restitution = false;
		o1.userdef_rfric = false;
		o1.__ref_edge1 = o1.__ref_edge2 = null;
		o1.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o1;
		this.pre_dt = -1.0;
	}
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = false;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = false;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = true;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = true;
	}
	,contacts_adder: function(x) {
		throw new js__$Boot_HaxeError("Error: Cannot add new contacts, information required is far too specific and detailed :)");
		return false;
	}
	,contacts_subber: function(x) {
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c == x.zpp_inner) {
				this.contacts.erase(pre);
				this.innards.erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
				break;
			}
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
	}
	,setupcontacts: function() {
		this.wrap_contacts = zpp_$nape_util_ZPP_$ContactList.get(this.contacts,true);
		this.wrap_contacts.zpp_inner.immutable = !this.mutable;
		this.wrap_contacts.zpp_inner.adder = $bind(this,this.contacts_adder);
		this.wrap_contacts.zpp_inner.dontremove = true;
		this.wrap_contacts.zpp_inner.subber = $bind(this,this.contacts_subber);
	}
	,cleanupContacts: function() {
		var fst = true;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		this.hc2 = false;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape_Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		return fst;
	}
	,preStep: function(dt) {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) this.restitution = 0; else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		var mass_sum = this.b1.smass + this.b2.smass;
		this.hc2 = false;
		var fst = true;
		var statType = !(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC);
		var bias;
		if(statType) {
			if(this.continuous) bias = nape_Config.contactContinuousStaticBiasCoef; else bias = nape_Config.contactStaticBiasCoef;
		} else if(this.continuous) bias = nape_Config.contactContinuousBiasCoef; else bias = nape_Config.contactBiasCoef;
		this.biasCoef = bias;
		this.continuous = false;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape_Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
				ci.r2x = c.px - this.b2.posx;
				ci.r2y = c.py - this.b2.posy;
				ci.r1x = c.px - this.b1.posx;
				ci.r1y = c.py - this.b1.posy;
				var kt = mass_sum + this.b2.sinertia * zpp_$nape_util_ZPP_$Math.sqr(ci.r2x * this.nx + ci.r2y * this.ny);
				kt += this.b1.sinertia * zpp_$nape_util_ZPP_$Math.sqr(ci.r1x * this.nx + ci.r1y * this.ny);
				if(kt < nape_Config.epsilon * nape_Config.epsilon) ci.tMass = 0; else ci.tMass = 1.0 / kt;
				var nt = mass_sum + this.b2.sinertia * zpp_$nape_util_ZPP_$Math.sqr(this.ny * ci.r2x - this.nx * ci.r2y);
				nt += this.b1.sinertia * zpp_$nape_util_ZPP_$Math.sqr(this.ny * ci.r1x - this.nx * ci.r1y);
				if(nt < nape_Config.epsilon * nape_Config.epsilon) ci.nMass = 0; else ci.nMass = 1.0 / nt;
				var vrx = 0.0;
				var vry = 0.0;
				var ang = this.b2.angvel + this.b2.kinangvel;
				vrx = this.b2.velx + this.b2.kinvelx - ci.r2y * ang;
				vry = this.b2.vely + this.b2.kinvely + ci.r2x * ang;
				ang = this.b1.angvel + this.b1.kinangvel;
				vrx -= this.b1.velx + this.b1.kinvelx - ci.r1y * ang;
				vry -= this.b1.vely + this.b1.kinvely + ci.r1x * ang;
				var vdot = this.nx * vrx + this.ny * vry;
				c.elasticity = this.restitution;
				ci.bounce = vdot * c.elasticity;
				if(ci.bounce > -nape_Config.elasticThreshold) ci.bounce = 0;
				vdot = vry * this.nx - vrx * this.ny;
				var thr = nape_Config.staticFrictionThreshold;
				if(vdot * vdot > thr * thr) ci.friction = this.dyn_fric; else ci.friction = this.stat_fric;
				ci.jnAcc *= dtratio;
				ci.jtAcc *= dtratio;
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		this.jrAcc *= dtratio;
		if(!fst) {
			this.rn1a = this.ny * this.c1.r1x - this.nx * this.c1.r1y;
			this.rt1a = this.c1.r1x * this.nx + this.c1.r1y * this.ny;
			this.rn1b = this.ny * this.c1.r2x - this.nx * this.c1.r2y;
			this.rt1b = this.c1.r2x * this.nx + this.c1.r2y * this.ny;
			this.k1x = this.b2.kinvelx - this.c1.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c1.r1y * this.b1.kinangvel);
			this.k1y = this.b2.kinvely + this.c1.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c1.r1x * this.b1.kinangvel);
		}
		if(this.hc2) {
			this.rn2a = this.ny * this.c2.r1x - this.nx * this.c2.r1y;
			this.rt2a = this.c2.r1x * this.nx + this.c2.r1y * this.ny;
			this.rn2b = this.ny * this.c2.r2x - this.nx * this.c2.r2y;
			this.rt2b = this.c2.r2x * this.nx + this.c2.r2y * this.ny;
			this.k2x = this.b2.kinvelx - this.c2.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c2.r1y * this.b1.kinangvel);
			this.k2y = this.b2.kinvely + this.c2.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c2.r1x * this.b1.kinangvel);
			this.kMassa = mass_sum + this.b1.sinertia * this.rn1a * this.rn1a + this.b2.sinertia * this.rn1b * this.rn1b;
			this.kMassb = mass_sum + this.b1.sinertia * this.rn1a * this.rn2a + this.b2.sinertia * this.rn1b * this.rn2b;
			this.kMassc = mass_sum + this.b1.sinertia * this.rn2a * this.rn2a + this.b2.sinertia * this.rn2b * this.rn2b;
			var norm = this.kMassa * this.kMassa + 2 * this.kMassb * this.kMassb + this.kMassc * this.kMassc;
			if(norm < nape_Config.illConditionedThreshold * (this.kMassa * this.kMassc - this.kMassb * this.kMassb)) {
				this.Ka = this.kMassa;
				this.Kb = this.kMassb;
				this.Kc = this.kMassc;
				var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
				if(det != det) {
					this.kMassa = this.kMassb = this.kMassc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
						this.kMassa = 0;
						flag |= 1;
					}
					if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
						this.kMassc = 0;
						flag |= 2;
					}
					this.kMassb = 0;
					flag;
				} else {
					det = 1 / det;
					var t = this.kMassc * det;
					this.kMassc = this.kMassa * det;
					this.kMassa = t;
					this.kMassb *= -det;
					0;
				}
			} else {
				this.hc2 = false;
				if(this.oc2.dist < this.oc1.dist) {
					var t1 = this.c1;
					this.c1 = this.c2;
					this.c2 = t1;
				}
				this.oc2.active = false;
				this.contacts.modified = true;
			}
		}
		this.surfacex = this.b2.svelx;
		this.surfacey = this.b2.svely;
		var t2 = 1.0;
		this.surfacex += this.b1.svelx * t2;
		this.surfacey += this.b1.svely * t2;
		this.surfacex = -this.surfacex;
		this.surfacey = -this.surfacey;
		this.rMass = this.b1.sinertia + this.b2.sinertia;
		if(this.rMass != 0) this.rMass = 1 / this.rMass;
		return fst;
	}
	,warmStart: function() {
		var jx = this.nx * this.c1.jnAcc - this.ny * this.c1.jtAcc;
		var jy = this.ny * this.c1.jnAcc + this.nx * this.c1.jtAcc;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * (jy * this.c1.r1x - jx * this.c1.r1y);
		var t1 = this.b2.imass;
		this.b2.velx += jx * t1;
		this.b2.vely += jy * t1;
		this.b2.angvel += this.b2.iinertia * (jy * this.c1.r2x - jx * this.c1.r2y);
		if(this.hc2) {
			var jx1 = this.nx * this.c2.jnAcc - this.ny * this.c2.jtAcc;
			var jy1 = this.ny * this.c2.jnAcc + this.nx * this.c2.jtAcc;
			var t2 = this.b1.imass;
			this.b1.velx -= jx1 * t2;
			this.b1.vely -= jy1 * t2;
			this.b1.angvel -= this.b1.iinertia * (jy1 * this.c2.r1x - jx1 * this.c2.r1y);
			var t3 = this.b2.imass;
			this.b2.velx += jx1 * t3;
			this.b2.vely += jy1 * t3;
			this.b2.angvel += this.b2.iinertia * (jy1 * this.c2.r2x - jx1 * this.c2.r2y);
		}
		this.b2.angvel += this.jrAcc * this.b2.iinertia;
		this.b1.angvel -= this.jrAcc * this.b1.iinertia;
	}
	,applyImpulseVel: function() {
		var jx;
		var jy;
		var j;
		var jMax;
		var jOld;
		var cjAcc;
		var v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		var v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		j = (v1y * this.nx - v1x * this.ny + this.surfacex) * this.c1.tMass;
		jMax = this.c1.friction * this.c1.jnAcc;
		jOld = this.c1.jtAcc;
		cjAcc = jOld - j;
		if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
		j = cjAcc - jOld;
		this.c1.jtAcc = cjAcc;
		jx = -this.ny * j;
		jy = this.nx * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rt1b * j * this.b2.iinertia;
		this.b1.angvel -= this.rt1a * j * this.b1.iinertia;
		if(this.hc2) {
			var v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			var v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			j = (v2y * this.nx - v2x * this.ny + this.surfacex) * this.c2.tMass;
			jMax = this.c2.friction * this.c2.jnAcc;
			jOld = this.c2.jtAcc;
			cjAcc = jOld - j;
			if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
			j = cjAcc - jOld;
			this.c2.jtAcc = cjAcc;
			jx = -this.ny * j;
			jy = this.nx * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rt2b * j * this.b2.iinertia;
			this.b1.angvel -= this.rt2a * j * this.b1.iinertia;
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			var ax = this.c1.jnAcc;
			var ay = this.c2.jnAcc;
			var jnx = v1x * this.nx + v1y * this.ny + this.surfacey + this.c1.bounce - (this.Ka * ax + this.Kb * ay);
			var jny = v2x * this.nx + v2y * this.ny + this.surfacey + this.c2.bounce - (this.Kb * ax + this.Kc * ay);
			var xx = -(this.kMassa * jnx + this.kMassb * jny);
			var xy = -(this.kMassb * jnx + this.kMassc * jny);
			if(xx >= 0 && xy >= 0) {
				jnx = xx - ax;
				jny = xy - ay;
				this.c1.jnAcc = xx;
				this.c2.jnAcc = xy;
			} else {
				xx = -this.c1.nMass * jnx;
				if(xx >= 0 && this.Kb * xx + jny >= 0) {
					jnx = xx - ax;
					jny = -ay;
					this.c1.jnAcc = xx;
					this.c2.jnAcc = 0;
				} else {
					xy = -this.c2.nMass * jny;
					if(xy >= 0 && this.Kb * xy + jnx >= 0) {
						jnx = -ax;
						jny = xy - ay;
						this.c1.jnAcc = 0;
						this.c2.jnAcc = xy;
					} else if(jnx >= 0 && jny >= 0) {
						jnx = -ax;
						jny = -ay;
						this.c1.jnAcc = this.c2.jnAcc = 0;
					} else {
						jnx = 0;
						jny = 0;
					}
				}
			}
			j = jnx + jny;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += (this.rn1b * jnx + this.rn2b * jny) * this.b2.iinertia;
			this.b1.angvel -= (this.rn1a * jnx + this.rn2a * jny) * this.b1.iinertia;
		} else {
			if(this.radius != 0.0) {
				var dw = this.b2.angvel - this.b1.angvel;
				j = dw * this.rMass;
				jMax = this.rfric * this.c1.jnAcc;
				jOld = this.jrAcc;
				this.jrAcc -= j;
				if(this.jrAcc > jMax) this.jrAcc = jMax; else if(this.jrAcc < -jMax) this.jrAcc = -jMax;
				j = this.jrAcc - jOld;
				this.b2.angvel += j * this.b2.iinertia;
				this.b1.angvel -= j * this.b1.iinertia;
			}
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			j = (this.c1.bounce + (this.nx * v1x + this.ny * v1y) + this.surfacey) * this.c1.nMass;
			jOld = this.c1.jnAcc;
			cjAcc = jOld - j;
			if(cjAcc < 0.0) cjAcc = 0.0;
			j = cjAcc - jOld;
			this.c1.jnAcc = cjAcc;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rn1b * j * this.b2.iinertia;
			this.b1.angvel -= this.rn1a * j * this.b1.iinertia;
		}
	}
	,applyImpulsePos: function() {
		if(this.ptype == 2) {
			var c = this.c1;
			var dx = 0.0;
			var dy = 0.0;
			var r2x = 0.0;
			var r2y = 0.0;
			r2x = this.b2.axisy * c.lr2x - this.b2.axisx * c.lr2y;
			r2y = c.lr2x * this.b2.axisx + c.lr2y * this.b2.axisy;
			var t = 1.0;
			r2x += this.b2.posx * t;
			r2y += this.b2.posy * t;
			var r1x = 0.0;
			var r1y = 0.0;
			r1x = this.b1.axisy * c.lr1x - this.b1.axisx * c.lr1y;
			r1y = c.lr1x * this.b1.axisx + c.lr1y * this.b1.axisy;
			var t1 = 1.0;
			r1x += this.b1.posx * t1;
			r1y += this.b1.posy * t1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = r2x - r1x;
			dy1 = r2y - r1y;
			var dl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			var r = this.radius - nape_Config.collisionSlop;
			var err = dl - r;
			if(dx1 * this.nx + dy1 * this.ny < 0) {
				dx1 = -dx1;
				dy1 = -dy1;
				err -= this.radius;
			}
			if(err < 0) {
				if(dl < nape_Config.epsilon) {
					if(this.b1.smass != 0.0) this.b1.posx += nape_Config.epsilon * 10; else this.b2.posx += nape_Config.epsilon * 10;
				} else {
					var t2 = 1.0 / dl;
					dx1 *= t2;
					dy1 *= t2;
					var px = 0.5 * (r1x + r2x);
					var py = 0.5 * (r1y + r2y);
					var pen = dl - r;
					r1x = px - this.b1.posx;
					r1y = py - this.b1.posy;
					r2x = px - this.b2.posx;
					r2y = py - this.b2.posy;
					var rn1 = dy1 * r1x - dx1 * r1y;
					var rn2 = dy1 * r2x - dx1 * r2y;
					var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
					if(K != 0) {
						var jn = -this.biasCoef * pen / K;
						var Jx = 0.0;
						var Jy = 0.0;
						var t3 = jn;
						Jx = dx1 * t3;
						Jy = dy1 * t3;
						var t4 = this.b1.imass;
						this.b1.posx -= Jx * t4;
						this.b1.posy -= Jy * t4;
						this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
						var t5 = this.b2.imass;
						this.b2.posx += Jx * t5;
						this.b2.posy += Jy * t5;
						this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
					}
				}
			}
		} else {
			var gnormx = 0.0;
			var gnormy = 0.0;
			var gproj;
			var clip1x = 0.0;
			var clip1y = 0.0;
			var clip2x = 0;
			var clip2y = 0;
			if(this.ptype == 0) {
				gnormx = this.b1.axisy * this.lnormx - this.b1.axisx * this.lnormy;
				gnormy = this.lnormx * this.b1.axisx + this.lnormy * this.b1.axisy;
				gproj = this.lproj + (gnormx * this.b1.posx + gnormy * this.b1.posy);
				clip1x = this.b2.axisy * this.c1.lr1x - this.b2.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b2.axisx + this.c1.lr1y * this.b2.axisy;
				var t6 = 1.0;
				clip1x += this.b2.posx * t6;
				clip1y += this.b2.posy * t6;
				if(this.hpc2) {
					clip2x = this.b2.axisy * this.c2.lr1x - this.b2.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b2.axisx + this.c2.lr1y * this.b2.axisy;
					var t7 = 1.0;
					clip2x += this.b2.posx * t7;
					clip2y += this.b2.posy * t7;
				}
			} else {
				gnormx = this.b2.axisy * this.lnormx - this.b2.axisx * this.lnormy;
				gnormy = this.lnormx * this.b2.axisx + this.lnormy * this.b2.axisy;
				gproj = this.lproj + (gnormx * this.b2.posx + gnormy * this.b2.posy);
				clip1x = this.b1.axisy * this.c1.lr1x - this.b1.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b1.axisx + this.c1.lr1y * this.b1.axisy;
				var t8 = 1.0;
				clip1x += this.b1.posx * t8;
				clip1y += this.b1.posy * t8;
				if(this.hpc2) {
					clip2x = this.b1.axisy * this.c2.lr1x - this.b1.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b1.axisx + this.c2.lr1y * this.b1.axisy;
					var t9 = 1.0;
					clip2x += this.b1.posx * t9;
					clip2y += this.b1.posy * t9;
				}
			}
			var err1 = clip1x * gnormx + clip1y * gnormy - gproj - this.radius;
			err1 += nape_Config.collisionSlop;
			var err2 = 0.0;
			if(this.hpc2) {
				err2 = clip2x * gnormx + clip2y * gnormy - gproj - this.radius;
				err2 += nape_Config.collisionSlop;
			}
			if(err1 < 0 || err2 < 0) {
				if(this.rev) {
					gnormx = -gnormx;
					gnormy = -gnormy;
				}
				var c1r1x = 0.0;
				var c1r1y = 0.0;
				c1r1x = clip1x - this.b1.posx;
				c1r1y = clip1y - this.b1.posy;
				var c1r2x = 0.0;
				var c1r2y = 0.0;
				c1r2x = clip1x - this.b2.posx;
				c1r2y = clip1y - this.b2.posy;
				var c2r1x = 0;
				var c2r1y = 0;
				var c2r2x = 0;
				var c2r2y = 0;
				if(this.hpc2) {
					c2r1x = clip2x - this.b1.posx;
					c2r1y = clip2y - this.b1.posy;
					c2r2x = clip2x - this.b2.posx;
					c2r2y = clip2y - this.b2.posy;
					var rn1a = gnormy * c1r1x - gnormx * c1r1y;
					var rn1b = gnormy * c1r2x - gnormx * c1r2y;
					var rn2a = gnormy * c2r1x - gnormx * c2r1y;
					var rn2b = gnormy * c2r2x - gnormx * c2r2y;
					var mass_sum = this.b1.smass + this.b2.smass;
					this.kMassa = mass_sum + this.b1.sinertia * rn1a * rn1a + this.b2.sinertia * rn1b * rn1b;
					this.kMassb = mass_sum + this.b1.sinertia * rn1a * rn2a + this.b2.sinertia * rn1b * rn2b;
					this.kMassc = mass_sum + this.b1.sinertia * rn2a * rn2a + this.b2.sinertia * rn2b * rn2b;
					var Ka = 0.0;
					var Kb = 0.0;
					var Kc = 0.0;
					Ka = this.kMassa;
					Kb = this.kMassb;
					Kc = this.kMassc;
					var bx = err1 * this.biasCoef;
					var by = err2 * this.biasCoef;
					do {
						var xx = 0.0;
						var xy = 0.0;
						xx = bx;
						xy = by;
						xx = -xx;
						xy = -xy;
						var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
						if(det != det) xx = xy = 0; else if(det == 0) {
							if(this.kMassa != 0) xx /= this.kMassa; else xx = 0;
							if(this.kMassc != 0) xy /= this.kMassc; else xy = 0;
						} else {
							det = 1 / det;
							var t10 = det * (this.kMassc * xx - this.kMassb * xy);
							xy = det * (this.kMassa * xy - this.kMassb * xx);
							xx = t10;
						}
						if(xx >= 0 && xy >= 0) {
							var t11 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t11;
							this.b1.posy -= gnormy * t11;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t12 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t12;
							this.b2.posy += gnormy * t12;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = -bx / Ka;
						xy = 0;
						var vn2 = Kb * xx + by;
						if(xx >= 0 && vn2 >= 0) {
							var t13 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t13;
							this.b1.posy -= gnormy * t13;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t14 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t14;
							this.b2.posy += gnormy * t14;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = 0;
						xy = -by / Kc;
						var vn1 = Kb * xy + bx;
						if(xy >= 0 && vn1 >= 0) {
							var t15 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t15;
							this.b1.posy -= gnormy * t15;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t16 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t16;
							this.b2.posy += gnormy * t16;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
					} while(false);
				} else {
					var rn11 = gnormy * c1r1x - gnormx * c1r1y;
					var rn21 = gnormy * c1r2x - gnormx * c1r2y;
					var K1 = this.b2.smass + rn21 * rn21 * this.b2.sinertia + this.b1.smass + rn11 * rn11 * this.b1.sinertia;
					if(K1 != 0) {
						var jn1 = -this.biasCoef * err1 / K1;
						var Jx1 = 0.0;
						var Jy1 = 0.0;
						var t17 = jn1;
						Jx1 = gnormx * t17;
						Jy1 = gnormy * t17;
						var t18 = this.b1.imass;
						this.b1.posx -= Jx1 * t18;
						this.b1.posy -= Jy1 * t18;
						this.b1.delta_rot(-rn11 * this.b1.iinertia * jn1);
						var t19 = this.b2.imass;
						this.b2.posx += Jx1 * t19;
						this.b2.posy += Jy1 * t19;
						this.b2.delta_rot(rn21 * this.b2.iinertia * jn1);
					}
				}
			}
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$ColArbiter
});
var zpp_$nape_dynamics_ZPP_$Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.wrap_position = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$IContact();
};
$hxClasses["zpp_nape.dynamics.ZPP_Contact"] = zpp_$nape_dynamics_ZPP_$Contact;
zpp_$nape_dynamics_ZPP_$Contact.__name__ = true;
zpp_$nape_dynamics_ZPP_$Contact.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Contact.internal = true;
			this.outer = new nape_dynamics_Contact();
			zpp_$nape_dynamics_ZPP_$Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,position_validate: function() {
		if(this.inactiveme()) throw new js__$Boot_HaxeError("Error: Contact not currently in use");
		this.wrap_position.zpp_inner.x = this.px;
		this.wrap_position.zpp_inner.y = this.py;
	}
	,getposition: function() {
		var me = this;
		this.wrap_position = nape_geom_Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = true;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
	}
	,inactiveme: function() {
		return !(this.active && this.arbiter != null && !(!this.arbiter.active));
	}
	,free: function() {
		this.arbiter = null;
	}
	,alloc: function() {
	}
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Contact
};
var zpp_$nape_dynamics_ZPP_$IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_IContact"] = zpp_$nape_dynamics_ZPP_$IContact;
zpp_$nape_dynamics_ZPP_$IContact.__name__ = true;
zpp_$nape_dynamics_ZPP_$IContact.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$IContact
};
var zpp_$nape_dynamics_ZPP_$InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionFilter"] = zpp_$nape_dynamics_ZPP_$InteractionFilter;
zpp_$nape_dynamics_ZPP_$InteractionFilter.__name__ = true;
zpp_$nape_dynamics_ZPP_$InteractionFilter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_dynamics_InteractionFilter();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,feature_cons: function() {
		this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret;
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) ret = new zpp_$nape_dynamics_ZPP_$InteractionFilter(); else {
			ret = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.collisionGroup = this.collisionGroup;
		ret.collisionMask = this.collisionMask;
		ret.sensorGroup = this.sensorGroup;
		ret.sensorMask = this.sensorMask;
		ret.fluidGroup = this.fluidGroup;
		ret.fluidMask = this.fluidMask;
		return ret;
	}
	,shouldCollide: function(x) {
		return (this.collisionMask & x.collisionGroup) != 0 && (x.collisionMask & this.collisionGroup) != 0;
	}
	,shouldSense: function(x) {
		return (this.sensorMask & x.sensorGroup) != 0 && (x.sensorMask & this.sensorGroup) != 0;
	}
	,shouldFlow: function(x) {
		return (this.fluidMask & x.fluidGroup) != 0 && (x.fluidMask & this.fluidGroup) != 0;
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_filter();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$InteractionFilter
};
var zpp_$nape_dynamics_ZPP_$InteractionGroup = function() {
	this.depth = 0;
	this.wrap_interactors = null;
	this.interactors = null;
	this.wrap_groups = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionGroup"] = zpp_$nape_dynamics_ZPP_$InteractionGroup;
zpp_$nape_dynamics_ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_dynamics_ZPP_$InteractionGroup.prototype = {
	setGroup: function(group) {
		if(this.group != group) {
			if(this.group != null) {
				this.group.groups.remove(this);
				this.depth = 0;
				this.group.invalidate(true);
			}
			this.group = group;
			if(group != null) {
				group.groups.add(this);
				this.depth = group.depth + 1;
				group.invalidate(true);
			} else this.invalidate(true);
		}
	}
	,invalidate: function(force) {
		if(force == null) force = false;
		if(!(force || this.ignore)) return;
		var cx_ite = this.interactors.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			if(b.ibody != null) b.ibody.wake(); else if(b.ishape != null) b.ishape.body.wake(); else b.icompound.wake();
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.groups.head;
		while(cx_ite1 != null) {
			var g = cx_ite1.elt;
			g.invalidate(force);
			cx_ite1 = cx_ite1.next;
		}
	}
	,addGroup: function(group) {
		this.groups.add(group);
		group.depth = this.depth + 1;
	}
	,remGroup: function(group) {
		this.groups.remove(group);
		group.depth = 0;
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remInteractor: function(intx,flag) {
		if(flag == null) flag = -1;
		this.interactors.remove(intx);
	}
	,__class__: zpp_$nape_dynamics_ZPP_$InteractionGroup
};
var zpp_$nape_dynamics_ZPP_$SpaceArbiterList = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	nape_dynamics_ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.lengths.push(0);
	}
};
$hxClasses["zpp_nape.dynamics.ZPP_SpaceArbiterList"] = zpp_$nape_dynamics_ZPP_$SpaceArbiterList;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__name__ = true;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__super__ = nape_dynamics_ArbiterList;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.prototype = $extend(nape_dynamics_ArbiterList.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var ind = 0;
			var len = 0;
			var cx_ite = this.space.c_arbiters_true.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) len++;
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len1 = 0;
			var cx_ite1 = this.space.c_arbiters_false.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				if(i1.active) len1++;
				cx_ite1 = cx_ite1.next;
			}
			this.lengths[ind++] = len1;
			this._length += len1;
			var len2 = 0;
			var cx_ite2 = this.space.f_arbiters.head;
			while(cx_ite2 != null) {
				var i2 = cx_ite2.elt;
				if(i2.active) len2++;
				cx_ite2 = cx_ite2.next;
			}
			this.lengths[ind++] = len2;
			this._length += len2;
			var len3 = 0;
			var cx_ite3 = this.space.s_arbiters.head;
			while(cx_ite3 != null) {
				var i3 = cx_ite3.elt;
				if(i3.active) len3++;
				cx_ite3 = cx_ite3.next;
			}
			this.lengths[ind++] = len3;
			this._length += len3;
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		var modified = false;
		if(this.space.c_arbiters_true.modified) {
			modified = true;
			this.space.c_arbiters_true.modified = false;
		}
		if(this.space.c_arbiters_false.modified) {
			modified = true;
			this.space.c_arbiters_false.modified = false;
		}
		if(this.space.f_arbiters.modified) {
			modified = true;
			this.space.f_arbiters.modified = false;
		}
		if(this.space.s_arbiters.modified) {
			modified = true;
			this.space.s_arbiters.modified = false;
		}
		if(modified) {
			this.zip_length = true;
			this._length = 0;
			this.ite_0 = null;
			this.ite_1 = null;
			this.ite_2 = null;
			this.ite_3 = null;
		}
	}
	,push: function(obj) {
		throw new js__$Boot_HaxeError("Error: ArbiterList is immutable");
		return false;
	}
	,pop: function() {
		throw new js__$Boot_HaxeError("Error: ArbiterList is immutable");
		return null;
	}
	,unshift: function(obj) {
		throw new js__$Boot_HaxeError("Error: ArbiterList is immutable");
		return false;
	}
	,shift: function() {
		throw new js__$Boot_HaxeError("Error: ArbiterList is immutable");
		return null;
	}
	,remove: function(obj) {
		throw new js__$Boot_HaxeError("Error: ArbiterList is immutable");
		return false;
	}
	,clear: function() {
		throw new js__$Boot_HaxeError("Error: ArbiterList is immutable");
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		var ret = null;
		var accum_length = 0;
		if(ret == null) {
			if(index < accum_length + this.lengths[0]) {
				var offset = index - accum_length;
				if(offset < this.at_index_0 || this.ite_0 == null) {
					this.at_index_0 = 0;
					this.ite_0 = this.space.c_arbiters_true.head;
					while(true) {
						var x = this.ite_0.elt;
						if(x.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				while(this.at_index_0 != offset) {
					this.at_index_0++;
					this.ite_0 = this.ite_0.next;
					while(true) {
						var x1 = this.ite_0.elt;
						if(x1.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				ret = this.ite_0.elt.wrapper();
			} else accum_length += this.lengths[0];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[1]) {
				var offset1 = index - accum_length;
				if(offset1 < this.at_index_1 || this.ite_1 == null) {
					this.at_index_1 = 0;
					this.ite_1 = this.space.c_arbiters_false.head;
					while(true) {
						var x2 = this.ite_1.elt;
						if(x2.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				while(this.at_index_1 != offset1) {
					this.at_index_1++;
					this.ite_1 = this.ite_1.next;
					while(true) {
						var x3 = this.ite_1.elt;
						if(x3.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				ret = this.ite_1.elt.wrapper();
			} else accum_length += this.lengths[1];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[2]) {
				var offset2 = index - accum_length;
				if(offset2 < this.at_index_2 || this.ite_2 == null) {
					this.at_index_2 = 0;
					this.ite_2 = this.space.f_arbiters.head;
					while(true) {
						var x4 = this.ite_2.elt;
						if(x4.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				while(this.at_index_2 != offset2) {
					this.at_index_2++;
					this.ite_2 = this.ite_2.next;
					while(true) {
						var x5 = this.ite_2.elt;
						if(x5.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				ret = this.ite_2.elt.wrapper();
			} else accum_length += this.lengths[2];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[3]) {
				var offset3 = index - accum_length;
				if(offset3 < this.at_index_3 || this.ite_3 == null) {
					this.at_index_3 = 0;
					this.ite_3 = this.space.s_arbiters.head;
					while(true) {
						var x6 = this.ite_3.elt;
						if(x6.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				while(this.at_index_3 != offset3) {
					this.at_index_3++;
					this.ite_3 = this.ite_3.next;
					while(true) {
						var x7 = this.ite_3.elt;
						if(x7.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				ret = this.ite_3.elt.wrapper();
			} else accum_length += this.lengths[3];
		}
		return ret;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$SpaceArbiterList
});
var zpp_$nape_geom_ZPP_$AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_AABB"] = zpp_$nape_geom_ZPP_$AABB;
zpp_$nape_geom_ZPP_$AABB.__name__ = true;
zpp_$nape_geom_ZPP_$AABB.get = function(minx,miny,maxx,maxy) {
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$AABB(); else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
};
zpp_$nape_geom_ZPP_$AABB.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_geom_AABB();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o.wrap_min = o.wrap_max = null;
			o._invalidate = null;
			o._validate = null;
			o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,alloc: function() {
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this.wrap_min = this.wrap_max = null;
		this._invalidate = null;
		this._validate = null;
	}
	,copy: function() {
		return zpp_$nape_geom_ZPP_$AABB.get(this.minx,this.miny,this.maxx,this.maxy);
	}
	,width: function() {
		return this.maxx - this.minx;
	}
	,height: function() {
		return this.maxy - this.miny;
	}
	,perimeter: function() {
		return (this.maxx - this.minx + (this.maxy - this.miny)) * 2;
	}
	,getmin: function() {
		if(this.wrap_min == null) {
			this.wrap_min = nape_geom_Vec2.get(this.minx,this.miny,null);
			this.wrap_min.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_min.zpp_inner._immutable = true; else this.wrap_min.zpp_inner._invalidate = $bind(this,this.mod_min);
			this.wrap_min.zpp_inner._validate = $bind(this,this.dom_min);
		}
		return this.wrap_min;
	}
	,dom_min: function() {
		if(this._validate != null) this._validate();
		this.wrap_min.zpp_inner.x = this.minx;
		this.wrap_min.zpp_inner.y = this.miny;
	}
	,mod_min: function(min) {
		if(min.x != this.minx || min.y != this.miny) {
			this.minx = min.x;
			this.miny = min.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,getmax: function() {
		if(this.wrap_max == null) {
			this.wrap_max = nape_geom_Vec2.get(this.maxx,this.maxy,null);
			this.wrap_max.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_max.zpp_inner._immutable = true; else this.wrap_max.zpp_inner._invalidate = $bind(this,this.mod_max);
			this.wrap_max.zpp_inner._validate = $bind(this,this.dom_max);
		}
		return this.wrap_max;
	}
	,dom_max: function() {
		if(this._validate != null) this._validate();
		this.wrap_max.zpp_inner.x = this.maxx;
		this.wrap_max.zpp_inner.y = this.maxy;
	}
	,mod_max: function(max) {
		if(max.x != this.maxx || max.y != this.maxy) {
			this.maxx = max.x;
			this.maxy = max.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,intersectX: function(x) {
		return !(x.minx > this.maxx || this.minx > x.maxx);
	}
	,intersectY: function(x) {
		return !(x.miny > this.maxy || this.miny > x.maxy);
	}
	,intersect: function(x) {
		return x.miny <= this.maxy && this.miny <= x.maxy && x.minx <= this.maxx && this.minx <= x.maxx;
	}
	,combine: function(x) {
		if(x.minx < this.minx) this.minx = x.minx;
		if(x.maxx > this.maxx) this.maxx = x.maxx;
		if(x.miny < this.miny) this.miny = x.miny;
		if(x.maxy > this.maxy) this.maxy = x.maxy;
	}
	,contains: function(x) {
		return x.minx >= this.minx && x.miny >= this.miny && x.maxx <= this.maxx && x.maxy <= this.maxy;
	}
	,containsPoint: function(v) {
		return v.x >= this.minx && v.x <= this.maxx && v.y >= this.miny && v.y <= this.maxy;
	}
	,setCombine: function(a,b) {
		if(a.minx < b.minx) this.minx = a.minx; else this.minx = b.minx;
		if(a.miny < b.miny) this.miny = a.miny; else this.miny = b.miny;
		if(a.maxx > b.maxx) this.maxx = a.maxx; else this.maxx = b.maxx;
		if(a.maxy > b.maxy) this.maxy = a.maxy; else this.maxy = b.maxy;
	}
	,setExpand: function(a,fatten) {
		this.minx = a.minx - fatten;
		this.miny = a.miny - fatten;
		this.maxx = a.maxx + fatten;
		this.maxy = a.maxy + fatten;
	}
	,setExpandPoint: function(x,y) {
		if(x < this.minx) this.minx = x;
		if(x > this.maxx) this.maxx = x;
		if(y < this.miny) this.miny = y;
		if(y > this.maxy) this.maxy = y;
	}
	,toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$AABB
};
var zpp_$nape_util_ZNPList_$ZPP_$Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Vec2"] = zpp_$nape_util_ZNPList_$ZPP_$Vec2;
zpp_$nape_util_ZNPList_$ZPP_$Vec2.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Vec2.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Collide = function() { };
$hxClasses["zpp_nape.geom.ZPP_Collide"] = zpp_$nape_geom_ZPP_$Collide;
zpp_$nape_geom_ZPP_$Collide.__name__ = true;
zpp_$nape_geom_ZPP_$Collide.circleContains = function(c,p) {
	var dx = 0.0;
	var dy = 0.0;
	dx = p.x - c.worldCOMx;
	dy = p.y - c.worldCOMy;
	return dx * dx + dy * dy < c.radius * c.radius;
};
zpp_$nape_geom_ZPP_$Collide.polyContains = function(s,p) {
	var retvar;
	retvar = true;
	var cx_ite = s.edges.head;
	while(cx_ite != null) {
		var a = cx_ite.elt;
		if(a.gnormx * p.x + a.gnormy * p.y <= a.gprojection) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_$nape_geom_ZPP_$Collide.shapeContains = function(s,p) {
	if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) return zpp_$nape_geom_ZPP_$Collide.circleContains(s.circle,p); else return zpp_$nape_geom_ZPP_$Collide.polyContains(s.polygon,p);
};
zpp_$nape_geom_ZPP_$Collide.bodyContains = function(b,p) {
	var retvar;
	retvar = false;
	var cx_ite = b.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(zpp_$nape_geom_ZPP_$Collide.shapeContains(s,p)) {
			retvar = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_$nape_geom_ZPP_$Collide.containTest = function(s1,s2) {
	if(s1.aabb.contains(s2.aabb)) if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
		if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			var minDist = s1.circle.radius + -s2.circle.radius;
			var px = 0.0;
			var py = 0.0;
			px = s2.circle.worldCOMx - s1.circle.worldCOMx;
			py = s2.circle.worldCOMy - s1.circle.worldCOMy;
			var distSqr = px * px + py * py;
			return distSqr <= minDist * minDist;
		} else {
			var retvar;
			retvar = true;
			var cx_ite = s2.polygon.gverts.next;
			while(cx_ite != null) {
				var p = cx_ite;
				if((function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = p.x - s1.circle.worldCOMx;
						py1 = p.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this))) {
					cx_ite = cx_ite.next;
					continue;
				} else {
					retvar = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			return retvar;
		}
	} else if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
		var retvar1;
		retvar1 = true;
		var cx_ite1 = s1.polygon.edges.head;
		while(cx_ite1 != null) {
			var a = cx_ite1.elt;
			if(a.gnormx * s2.circle.worldCOMx + a.gnormy * s2.circle.worldCOMy + s2.circle.radius <= a.gprojection) {
				cx_ite1 = cx_ite1.next;
				continue;
			} else {
				retvar1 = false;
				break;
			}
			cx_ite1 = cx_ite1.next;
		}
		return retvar1;
	} else {
		var retvar2;
		retvar2 = true;
		var cx_ite2 = s1.polygon.edges.head;
		while(cx_ite2 != null) {
			var a1 = cx_ite2.elt;
			if((function($this) {
				var $r;
				var max = -1e+100;
				{
					var cx_ite3 = s2.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v = cx_ite3;
						var k = a1.gnormx * v.x + a1.gnormy * v.y;
						if(k > max) max = k;
						cx_ite3 = cx_ite3.next;
					}
				}
				$r = max <= a1.gprojection;
				return $r;
			}(this))) {
				cx_ite2 = cx_ite2.next;
				continue;
			} else {
				retvar2 = false;
				break;
			}
			cx_ite2 = cx_ite2.next;
		}
		return retvar2;
	} else return false;
};
zpp_$nape_geom_ZPP_$Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
		if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
			var cont = true;
			var max = -1e+100;
			var maxmin = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					if(min - ax.gprojection <= max) break;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) min1 = k1;
						if(min1 - ax1.gprojection <= max) break;
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 >= 0) {
						cont = false;
						break;
					}
					if(min1 > max) {
						max = min1;
						axis2 = ax1;
						maxi = 2;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(!cont) return false; else {
					var q1;
					var q2;
					var ax2;
					var scale;
					if(maxi == 1) {
						q1 = s1.polygon;
						q2 = s2.polygon;
						ax2 = axis1;
						scale = 1.0;
					} else {
						q1 = s2.polygon;
						q2 = s1.polygon;
						ax2 = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite4 = q2.edges.head;
					while(cx_ite4 != null) {
						var axis = cx_ite4.elt;
						var k2 = ax2.gnormx * axis.gnormx + ax2.gnormy * axis.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = axis;
						}
						cx_ite4 = cx_ite4.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax2.gnormy * c0x - ax2.gnormx * c0y;
					var d1 = ax2.gnormy * c1x - ax2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax2.tp1 - d0) * den;
					if(t > nape_Config.epsilon) {
						var t2 = t;
						c0x += dvx * t2;
						c0y += dvy * t2;
					}
					var t1 = (-ax2.tp0 - d1) * den;
					if(t1 < -nape_Config.epsilon) {
						var t3 = t1;
						c1x += dvx * t3;
						c1y += dvy * t3;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t4 = scale;
					nx = ax2.gnormx * t4;
					ny = ax2.gnormy * t4;
					arb.lnormx = ax2.lnormx;
					arb.lnormy = ax2.lnormy;
					arb.lproj = ax2.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					if(arb.rev) arb.ptype = 1; else arb.ptype = 0;
					var c0d = c0x * ax2.gnormx + c0y * ax2.gnormy - ax2.gprojection;
					var c1d = c1x * ax2.gnormx + c1y * ax2.gnormy - ax2.gprojection;
					if(c0d > 0 && c1d > 0) return false; else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var con = arb.injectContact(c0x - ax2.gnormx * c0d * 0.5,c0y - ax2.gnormy * c0d * 0.5,nx,ny,c0d,arb.rev?1:0,c0d > 0);
						var t5 = 1.0;
						c0x -= q2.body.posx * t5;
						c0y -= q2.body.posy * t5;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						con = arb.injectContact(c1x - ax2.gnormx * c1d * 0.5,c1y - ax2.gnormy * c1d * 0.5,nx,ny,c1d,arb.rev?0:1,c1d > 0);
						var t6 = 1.0;
						c1x -= q2.body.posx * t6;
						c1y -= q2.body.posy * t6;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax2;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax2;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else return false;
		} else {
			var max1 = -1e+100;
			var minmax = -1e+100;
			var cont1 = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite5 = s2.polygon.edges.head;
			while(cx_ite5 != null) {
				var a = cx_ite5.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max1) {
					max1 = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite5 = cx_ite5.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var co;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					if(distSqr > minDist * minDist) co = null; else if(distSqr < nape_Config.epsilon * nape_Config.epsilon) co = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0,null); else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist1;
						if(invDist < nape_Config.epsilon) dist1 = 1e100; else dist1 = 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist1 - minDist,0,null); else co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist1 - minDist,0,null);
					}
					if(co != null) {
						var con1 = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con1.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr2x = s1.circle.localCOMx;
							con1.lr2y = s1.circle.localCOMy;
						} else {
							con1.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr1x = s1.circle.localCOMx;
							con1.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var co1;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px1 * px1 + py1 * py1;
					if(distSqr1 > minDist1 * minDist1) co1 = null; else if(distSqr1 < nape_Config.epsilon * nape_Config.epsilon) co1 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist1,0,null); else {
						var invDist1 = 1.0 / Math.sqrt(distSqr1);
						var dist2;
						if(invDist1 < nape_Config.epsilon) dist2 = 1e100; else dist2 = 1.0 / invDist1;
						var df1 = 0.5 + (s1.circle.radius - 0.5 * minDist1) * invDist1;
						if(rev) co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,-px1 * invDist1,-py1 * invDist1,dist2 - minDist1,0,null); else co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,px1 * invDist1,py1 * invDist1,dist2 - minDist1,0,null);
					}
					if(co1 != null) {
						var con2 = co1.inner;
						arb.ptype = 2;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = v11.x - s2.polygon.body.posx;
						vy1 = v11.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con2.lr1x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr1y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr2x = s1.circle.localCOMx;
							con2.lr2y = s1.circle.localCOMy;
						} else {
							con2.lr2x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr2y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr1x = s1.circle.localCOMx;
							con2.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co1 != null;
				} else {
					var nx1 = 0.0;
					var ny1 = 0.0;
					var t7 = s1.circle.radius + max1 * 0.5;
					nx1 = a0.gnormx * t7;
					ny1 = a0.gnormy * t7;
					var px2 = 0.0;
					var py2 = 0.0;
					px2 = s1.circle.worldCOMx - nx1;
					py2 = s1.circle.worldCOMy - ny1;
					var con3;
					if(rev) con3 = arb.injectContact(px2,py2,a0.gnormx,a0.gnormy,max1,0,null); else con3 = arb.injectContact(px2,py2,-a0.gnormx,-a0.gnormy,max1,0,null);
					if(rev) arb.ptype = 0; else arb.ptype = 1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con3.inner.lr1x = s1.circle.localCOMx;
					con3.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else return false;
		}
	} else {
		var co2;
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px3 = 0.0;
		var py3 = 0.0;
		px3 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py3 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px3 * px3 + py3 * py3;
		if(distSqr2 > minDist2 * minDist2) co2 = null; else if(distSqr2 < nape_Config.epsilon * nape_Config.epsilon) co2 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist2,0,null); else {
			var invDist2 = 1.0 / Math.sqrt(distSqr2);
			var dist3;
			if(invDist2 < nape_Config.epsilon) dist3 = 1e100; else dist3 = 1.0 / invDist2;
			var df2 = 0.5 + (s1.circle.radius - 0.5 * minDist2) * invDist2;
			if(rev) co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,-px3 * invDist2,-py3 * invDist2,dist3 - minDist2,0,null); else co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,px3 * invDist2,py3 * invDist2,dist3 - minDist2,0,null);
		}
		if(co2 != null) {
			var con4 = co2.inner;
			if(rev) {
				con4.lr1x = s2.circle.localCOMx;
				con4.lr1y = s2.circle.localCOMy;
				con4.lr2x = s1.circle.localCOMx;
				con4.lr2y = s1.circle.localCOMy;
			} else {
				con4.lr1x = s1.circle.localCOMx;
				con4.lr1y = s1.circle.localCOMy;
				con4.lr2x = s2.circle.localCOMx;
				con4.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else return false;
	}
};
zpp_$nape_geom_ZPP_$Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_$nape_geom_ZPP_$Collide.testCollide(s1,s2);
};
zpp_$nape_geom_ZPP_$Collide.testCollide = function(s1,s2) {
	if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
		var cont = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(cont) {
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			return cont;
		} else return false;
	} else {
		var a0 = null;
		var vi = null;
		var cont1 = true;
		var max = -1e+100;
		var vite = s2.polygon.gverts.next;
		var cx_ite4 = s2.polygon.edges.head;
		while(cx_ite4 != null) {
			var a = cx_ite4.elt;
			var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
			if(dist > 0) {
				cont1 = false;
				break;
			}
			if(dist > max) {
				max = dist;
				a0 = a;
				vi = vite;
			}
			vite = vite.next;
			cx_ite4 = cx_ite4.next;
		}
		if(cont1) {
			var v0 = vi;
			var v11;
			if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
				var minDist = s1.circle.radius;
				var px = 0.0;
				var py = 0.0;
				px = v0.x - s1.circle.worldCOMx;
				py = v0.y - s1.circle.worldCOMy;
				var distSqr = px * px + py * py;
				return distSqr <= minDist * minDist;
			} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
				var minDist1 = s1.circle.radius;
				var px1 = 0.0;
				var py1 = 0.0;
				px1 = v11.x - s1.circle.worldCOMx;
				py1 = v11.y - s1.circle.worldCOMy;
				var distSqr1 = px1 * px1 + py1 * py1;
				return distSqr1 <= minDist1 * minDist1;
			} else return true;
		} else return false;
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px2 = 0.0;
		var py2 = 0.0;
		px2 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py2 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px2 * px2 + py2 * py2;
		return distSqr2 <= minDist2 * minDist2;
	}
};
zpp_$nape_geom_ZPP_$Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
		var out1 = [];
		var out2 = [];
		var cont = true;
		var total = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var ind = 0;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				if(k >= ax.gprojection + nape_Config.epsilon) {
					out2[ind] = true;
					total = false;
				}
				ind++;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(total) {
			s2.polygon.validate_worldCOM();
			arb.overlap = s2.polygon.area;
			arb.centroidx = s2.polygon.worldCOMx;
			arb.centroidy = s2.polygon.worldCOMy;
			null;
			return true;
		} else if(cont) {
			total = true;
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var ind1 = 0;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					if(k1 >= ax1.gprojection + nape_Config.epsilon) {
						out1[ind1] = true;
						total = false;
					}
					ind1++;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			if(total) {
				s1.polygon.validate_worldCOM();
				arb.overlap = s1.polygon.area;
				arb.centroidx = s1.polygon.worldCOMx;
				arb.centroidy = s1.polygon.worldCOMy;
				null;
				return true;
			} else if(cont) {
				while(!(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null)) {
					var p = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
					if(!p._inuse) {
						var o = p;
						if(o.outer != null) {
							o.outer.zpp_inner = null;
							o.outer = null;
						}
						o._isimmutable = null;
						o._validate = null;
						o._invalidate = null;
						o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
					}
				}
				var fst_vert = null;
				var poly1 = false;
				var ite1 = s1.polygon.gverts.next;
				var ind11 = 0;
				var ite2 = s2.polygon.gverts.next;
				var ind2 = 0;
				var _g1 = 0;
				var _g = s2.polygon.edgeCnt;
				while(_g1 < _g) {
					var i = _g1++;
					if(!out2[i]) {
						ind2 = i;
						break;
					} else ite2 = ite2.next;
				}
				if(ite2 == null) {
					ite2 = s2.polygon.gverts.next;
					poly1 = true;
					var _g11 = 0;
					var _g2 = s1.polygon.edgeCnt;
					while(_g11 < _g2) {
						var i1 = _g11++;
						if(!out1[i1]) {
							ind11 = i1;
							break;
						} else ite1 = ite1.next;
					}
					if(ite1 == null) ite1 = s1.polygon.gverts.next; else {
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite1);
						fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
					}
				} else {
					zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite2);
					fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
				}
				var cnt = 1;
				if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) {
					var cx_cont = true;
					var cx_itei = s1.polygon.gverts.next;
					var u = cx_itei;
					var cx_itej = cx_itei.next;
					while(cx_itej != null) {
						var v2 = cx_itej;
						var min2 = 2.0;
						var cx_cont1 = true;
						var cx_itei1 = s2.polygon.gverts.next;
						var a = cx_itei1;
						var cx_itej1 = cx_itei1.next;
						while(cx_itej1 != null) {
							var b = cx_itej1;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v2.x - u.x;
									_vy = v2.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape_Config.epsilon && txx < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape_Config.epsilon && sxx < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t < min2) {
									min2 = t;
									ite2 = cx_itei1;
								}
							}
							cx_itei1 = cx_itej1;
							a = b;
							cx_itej1 = cx_itej1.next;
						}
						if(cx_cont1) do {
							cx_itej1 = s2.polygon.gverts.next;
							var b1 = cx_itej1;
							var t1 = 0.0;
							if((function($this) {
								var $r;
								var _sx1 = 0.0;
								var _sy1 = 0.0;
								{
									_sx1 = u.x - a.x;
									_sy1 = u.y - a.y;
								}
								var _vx1 = 0.0;
								var _vy1 = 0.0;
								{
									_vx1 = v2.x - u.x;
									_vy1 = v2.y - u.y;
								}
								var _qx1 = 0.0;
								var _qy1 = 0.0;
								{
									_qx1 = b1.x - a.x;
									_qy1 = b1.y - a.y;
								}
								var den1 = _vy1 * _qx1 - _vx1 * _qy1;
								$r = den1 * den1 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den1 = 1 / den1;
									var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
									$r = txx1 > nape_Config.epsilon && txx1 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
										$r = sxx1 > nape_Config.epsilon && sxx1 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t1 = txx1;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t1 < min2) {
									min2 = t1;
									ite2 = cx_itei1;
								}
							}
						} while(false);
						if(min2 != 2.0) {
							var cx = 0.0;
							var cy = 0.0;
							var T = min2;
							cx = u.x + (v2.x - u.x) * T;
							cy = u.y + (v2.y - u.y) * T;
							fst_vert = zpp_$nape_geom_ZPP_$Vec2.get(cx,cy,null);
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							cx_cont = false;
							break;
						}
						cx_itei = cx_itej;
						u = v2;
						cx_itej = cx_itej.next;
					}
					if(cx_cont) do {
						cx_itej = s1.polygon.gverts.next;
						var v3 = cx_itej;
						var min3 = 2.0;
						var cx_cont2 = true;
						var cx_itei2 = s2.polygon.gverts.next;
						var a1 = cx_itei2;
						var cx_itej2 = cx_itei2.next;
						while(cx_itej2 != null) {
							var b2 = cx_itej2;
							var t2 = 0.0;
							if((function($this) {
								var $r;
								var _sx2 = 0.0;
								var _sy2 = 0.0;
								{
									_sx2 = u.x - a1.x;
									_sy2 = u.y - a1.y;
								}
								var _vx2 = 0.0;
								var _vy2 = 0.0;
								{
									_vx2 = v3.x - u.x;
									_vy2 = v3.y - u.y;
								}
								var _qx2 = 0.0;
								var _qy2 = 0.0;
								{
									_qx2 = b2.x - a1.x;
									_qy2 = b2.y - a1.y;
								}
								var den2 = _vy2 * _qx2 - _vx2 * _qy2;
								$r = den2 * den2 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den2 = 1 / den2;
									var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
									$r = txx2 > nape_Config.epsilon && txx2 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
										$r = sxx2 > nape_Config.epsilon && sxx2 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t2 = txx2;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t2 < min3) {
									min3 = t2;
									ite2 = cx_itei2;
								}
							}
							cx_itei2 = cx_itej2;
							a1 = b2;
							cx_itej2 = cx_itej2.next;
						}
						if(cx_cont2) do {
							cx_itej2 = s2.polygon.gverts.next;
							var b3 = cx_itej2;
							var t3 = 0.0;
							if((function($this) {
								var $r;
								var _sx3 = 0.0;
								var _sy3 = 0.0;
								{
									_sx3 = u.x - a1.x;
									_sy3 = u.y - a1.y;
								}
								var _vx3 = 0.0;
								var _vy3 = 0.0;
								{
									_vx3 = v3.x - u.x;
									_vy3 = v3.y - u.y;
								}
								var _qx3 = 0.0;
								var _qy3 = 0.0;
								{
									_qx3 = b3.x - a1.x;
									_qy3 = b3.y - a1.y;
								}
								var den3 = _vy3 * _qx3 - _vx3 * _qy3;
								$r = den3 * den3 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den3 = 1 / den3;
									var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
									$r = txx3 > nape_Config.epsilon && txx3 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
										$r = sxx3 > nape_Config.epsilon && sxx3 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t3 = txx3;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t3 < min3) {
									min3 = t3;
									ite2 = cx_itei2;
								}
							}
						} while(false);
						if(min3 != 2.0) {
							var cx1 = 0.0;
							var cy1 = 0.0;
							var T1 = min3;
							cx1 = u.x + (v3.x - u.x) * T1;
							cy1 = u.y + (v3.y - u.y) * T1;
							fst_vert = zpp_$nape_geom_ZPP_$Vec2.get(cx1,cy1,null);
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							break;
						}
					} while(false);
					cnt = 2;
				}
				while(true) if(poly1) {
					ite1 = ite1.next;
					ind11++;
					if(ite1 == null) {
						ite1 = s1.polygon.gverts.next;
						ind11 = 0;
					}
					if(!out1[ind11]) {
						var ex = ite1;
						if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(ex.x,ex.y,fst_vert.x,fst_vert.y) < nape_Config.epsilon) break;
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex);
						if(fst_vert == null) fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a2 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						var b4 = ite1;
						var u1 = ite2;
						var itm = ite2.next;
						if(itm == null) itm = s2.polygon.gverts.next;
						var max = -1.0;
						var itmo = null;
						var indo = 0;
						var icnt = 0;
						var beg_ite = itm;
						var cx_ite4 = itm;
						do {
							var v5 = cx_ite4;
							var t4 = 0.0;
							if((function($this) {
								var $r;
								var _sx4 = 0.0;
								var _sy4 = 0.0;
								{
									_sx4 = u1.x - a2.x;
									_sy4 = u1.y - a2.y;
								}
								var _vx4 = 0.0;
								var _vy4 = 0.0;
								{
									_vx4 = v5.x - u1.x;
									_vy4 = v5.y - u1.y;
								}
								var _qx4 = 0.0;
								var _qy4 = 0.0;
								{
									_qx4 = b4.x - a2.x;
									_qy4 = b4.y - a2.y;
								}
								var den4 = _vy4 * _qx4 - _vx4 * _qy4;
								$r = den4 * den4 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den4 = 1 / den4;
									var txx4 = (_qy4 * _sx4 - _qx4 * _sy4) * den4;
									$r = txx4 > nape_Config.epsilon && txx4 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx4 = (_vy4 * _sx4 - _vx4 * _sy4) * den4;
										$r = sxx4 > nape_Config.epsilon && sxx4 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t4 = txx4;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t4 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t4;
										cx_ite4 = beg_ite;
										break;
									} else max = t4;
								}
							}
							u1 = v5;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						} while(false);
						while(cx_ite4 != beg_ite) {
							var v6 = cx_ite4;
							var t5 = 0.0;
							if((function($this) {
								var $r;
								var _sx5 = 0.0;
								var _sy5 = 0.0;
								{
									_sx5 = u1.x - a2.x;
									_sy5 = u1.y - a2.y;
								}
								var _vx5 = 0.0;
								var _vy5 = 0.0;
								{
									_vx5 = v6.x - u1.x;
									_vy5 = v6.y - u1.y;
								}
								var _qx5 = 0.0;
								var _qy5 = 0.0;
								{
									_qx5 = b4.x - a2.x;
									_qy5 = b4.y - a2.y;
								}
								var den5 = _vy5 * _qx5 - _vx5 * _qy5;
								$r = den5 * den5 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den5 = 1 / den5;
									var txx5 = (_qy5 * _sx5 - _qx5 * _sy5) * den5;
									$r = txx5 > nape_Config.epsilon && txx5 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx5 = (_vy5 * _sx5 - _vx5 * _sy5) * den5;
										$r = sxx5 > nape_Config.epsilon && sxx5 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t5 = txx5;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t5 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t5;
										cx_ite4 = beg_ite;
										break;
									} else max = t5;
								}
							}
							u1 = v6;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						}
						if(itmo == null) break;
						var u2 = itmo;
						var itm2 = itmo.next;
						if(itm2 == null) itm2 = s2.polygon.gverts.next;
						var v4 = itm2;
						var cx2 = 0.0;
						var cy2 = 0.0;
						var T2 = max;
						cx2 = u2.x + (v4.x - u2.x) * T2;
						cy2 = u2.y + (v4.y - u2.y) * T2;
						if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(cx2,cy2,fst_vert.x,fst_vert.y) < nape_Config.epsilon) break;
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx2,cy2,null));
						if(fst_vert == null) fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						ite2 = itmo;
						ind2 = indo;
						poly1 = !poly1;
						cnt = 2;
					}
				} else {
					ite2 = ite2.next;
					ind2++;
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						ind2 = 0;
					}
					if(!out2[ind2]) {
						var ex1 = ite2;
						if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(ex1.x,ex1.y,fst_vert.x,fst_vert.y) < nape_Config.epsilon) break;
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex1);
						if(fst_vert == null) fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a3 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						var b5 = ite2;
						var u3 = ite1;
						var itm1 = ite1.next;
						if(itm1 == null) itm1 = s1.polygon.gverts.next;
						var max1 = -1.0;
						var itmo1 = null;
						var indo1 = 0;
						var icnt1 = 0;
						var beg_ite1 = itm1;
						var cx_ite5 = itm1;
						do {
							var v8 = cx_ite5;
							var t6 = 0.0;
							if((function($this) {
								var $r;
								var _sx6 = 0.0;
								var _sy6 = 0.0;
								{
									_sx6 = u3.x - a3.x;
									_sy6 = u3.y - a3.y;
								}
								var _vx6 = 0.0;
								var _vy6 = 0.0;
								{
									_vx6 = v8.x - u3.x;
									_vy6 = v8.y - u3.y;
								}
								var _qx6 = 0.0;
								var _qy6 = 0.0;
								{
									_qx6 = b5.x - a3.x;
									_qy6 = b5.y - a3.y;
								}
								var den6 = _vy6 * _qx6 - _vx6 * _qy6;
								$r = den6 * den6 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den6 = 1 / den6;
									var txx6 = (_qy6 * _sx6 - _qx6 * _sy6) * den6;
									$r = txx6 > nape_Config.epsilon && txx6 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx6 = (_vy6 * _sx6 - _vx6 * _sy6) * den6;
										$r = sxx6 > nape_Config.epsilon && sxx6 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t6 = txx6;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t6 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t6;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t6;
								}
							}
							u3 = v8;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						} while(false);
						while(cx_ite5 != beg_ite1) {
							var v9 = cx_ite5;
							var t7 = 0.0;
							if((function($this) {
								var $r;
								var _sx7 = 0.0;
								var _sy7 = 0.0;
								{
									_sx7 = u3.x - a3.x;
									_sy7 = u3.y - a3.y;
								}
								var _vx7 = 0.0;
								var _vy7 = 0.0;
								{
									_vx7 = v9.x - u3.x;
									_vy7 = v9.y - u3.y;
								}
								var _qx7 = 0.0;
								var _qy7 = 0.0;
								{
									_qx7 = b5.x - a3.x;
									_qy7 = b5.y - a3.y;
								}
								var den7 = _vy7 * _qx7 - _vx7 * _qy7;
								$r = den7 * den7 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den7 = 1 / den7;
									var txx7 = (_qy7 * _sx7 - _qx7 * _sy7) * den7;
									$r = txx7 > nape_Config.epsilon && txx7 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx7 = (_vy7 * _sx7 - _vx7 * _sy7) * den7;
										$r = sxx7 > nape_Config.epsilon && sxx7 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t7 = txx7;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t7 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t7;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t7;
								}
							}
							u3 = v9;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						}
						if(itmo1 == null) break;
						var u4 = itmo1;
						var itm21 = itmo1.next;
						if(itm21 == null) itm21 = s1.polygon.gverts.next;
						var v7 = itm21;
						var cx3 = 0.0;
						var cy3 = 0.0;
						var T3 = max1;
						cx3 = u4.x + (v7.x - u4.x) * T3;
						cy3 = u4.y + (v7.y - u4.y) * T3;
						if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(cx3,cy3,fst_vert.x,fst_vert.y) < nape_Config.epsilon) break;
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx3,cy3,null));
						if(fst_vert == null) fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						ite1 = itmo1;
						ind11 = indo1;
						poly1 = !poly1;
						cnt = 2;
					}
				}
				if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
					var area = 0.0;
					var COMx = 0.0;
					var COMy = 0.0;
					COMx = 0;
					COMy = 0;
					area = 0.0;
					var cx_ite6 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
					var u5 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					var v10 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					while(cx_ite6 != null) {
						var w2 = cx_ite6.elt;
						area += v10.x * (w2.y - u5.y);
						var cf = w2.y * v10.x - w2.x * v10.y;
						COMx += (v10.x + w2.x) * cf;
						COMy += (v10.y + w2.y) * cf;
						u5 = v10;
						v10 = w2;
						cx_ite6 = cx_ite6.next;
					}
					cx_ite6 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
					var w = cx_ite6.elt;
					area += v10.x * (w.y - u5.y);
					var cf1 = w.y * v10.x - w.x * v10.y;
					COMx += (v10.x + w.x) * cf1;
					COMy += (v10.y + w.y) * cf1;
					u5 = v10;
					v10 = w;
					cx_ite6 = cx_ite6.next;
					var w1 = cx_ite6.elt;
					area += v10.x * (w1.y - u5.y);
					var cf2 = w1.y * v10.x - w1.x * v10.y;
					COMx += (v10.x + w1.x) * cf2;
					COMy += (v10.y + w1.y) * cf2;
					area *= 0.5;
					var ia = 1 / (6 * area);
					var t8 = ia;
					COMx *= t8;
					COMy *= t8;
					arb.overlap = -area;
					arb.centroidx = COMx;
					arb.centroidy = COMy;
					null;
					return true;
				} else return false;
			} else return false;
		} else return false;
	} else {
		var inte = [];
		var total1 = true;
		var a0 = null;
		var vi = null;
		var max2 = -1e+100;
		var cont1 = true;
		var vite = s2.polygon.gverts.next;
		var ind3 = 0;
		var cx_ite7 = s2.polygon.edges.head;
		while(cx_ite7 != null) {
			var a4 = cx_ite7.elt;
			var dist = a4.gnormx * s1.circle.worldCOMx + a4.gnormy * s1.circle.worldCOMy;
			if(dist > a4.gprojection + s1.circle.radius) {
				cont1 = false;
				break;
			} else if(dist + s1.circle.radius > a4.gprojection + nape_Config.epsilon) {
				total1 = false;
				inte[ind3] = true;
			}
			dist -= a4.gprojection + s1.circle.radius;
			if(dist > max2) {
				max2 = dist;
				a0 = a4;
				vi = vite;
			}
			vite = vite.next;
			ind3++;
			cx_ite7 = cx_ite7.next;
		}
		if(cont1) {
			if(total1) {
				arb.overlap = s1.circle.area;
				arb.centroidx = s1.circle.worldCOMx;
				arb.centroidy = s1.circle.worldCOMy;
				null;
				return true;
			} else {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
					var $r;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					{
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
					}
					var distSqr = px * px + py * py;
					$r = distSqr <= minDist * minDist;
					return $r;
				}(this)):dt >= v11.y * a0.gnormx - v11.x * a0.gnormy?(function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = v11.x - s1.circle.worldCOMx;
						py1 = v11.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this)):true) {
					var ins = [];
					var ind4 = 0;
					var total2 = true;
					var vi1 = null;
					var vind = 0;
					var cx_ite8 = s2.polygon.gverts.next;
					while(cx_ite8 != null) {
						var v12 = cx_ite8;
						var dist1 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(v12.x,v12.y,s1.circle.worldCOMx,s1.circle.worldCOMy);
						if(!(ins[ind4] = dist1 <= s1.circle.radius * s1.circle.radius)) total2 = false; else {
							vind = ind4;
							vi1 = cx_ite8;
						}
						ind4++;
						cx_ite8 = cx_ite8.next;
					}
					if(total2) {
						s2.polygon.validate_worldCOM();
						arb.overlap = s2.polygon.area;
						arb.centroidx = s2.polygon.worldCOMx;
						arb.centroidy = s2.polygon.worldCOMy;
						null;
						return true;
					} else {
						while(!(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null)) {
							var p1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
							if(!p1._inuse) {
								var o1 = p1;
								if(o1.outer != null) {
									o1.outer.zpp_inner = null;
									o1.outer = null;
								}
								o1._isimmutable = null;
								o1._validate = null;
								o1._invalidate = null;
								o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
								zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
							}
						}
						zpp_$nape_geom_ZPP_$Collide.flowsegs.clear();
						var fst_vert1 = null;
						var state = 1;
						if(vi1 == null) {
							vi1 = s2.polygon.gverts.next;
							state = 2;
						} else zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert1 = vi1);
						while(state != 0) if(state == 1) {
							vi1 = vi1.next;
							if(vi1 == null) vi1 = s2.polygon.gverts.next;
							vind++;
							if(vind >= s2.polygon.edgeCnt) vind = 0;
							if(ins[vind]) {
								if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,vi1.x,vi1.y) < nape_Config.epsilon) break;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(vi1);
							} else {
								var u6 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
								var v13 = vi1;
								var tval;
								var vx = 0.0;
								var vy = 0.0;
								vx = v13.x - u6.x;
								vy = v13.y - u6.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = u6.x - s1.circle.worldCOMx;
								qy = u6.y - s1.circle.worldCOMy;
								var A = vx * vx + vy * vy;
								var B = 2 * (qx * vx + qy * vy);
								var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
								var D = Math.sqrt(B * B - 4 * A * C);
								A = 1 / (2 * A);
								var t9 = (-B - D) * A;
								if(t9 < nape_Config.epsilon) tval = (-B + D) * A; else tval = t9;
								var cx4 = 0.0;
								var cy4 = 0.0;
								var T4 = tval;
								cx4 = u6.x + (v13.x - u6.x) * T4;
								cy4 = u6.y + (v13.y - u6.y) * T4;
								if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx4,cy4) < nape_Config.epsilon) break;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx4,cy4,null));
								state = 2;
							}
						} else if(state == 2) {
							var vi2 = vi1.next;
							if(vi2 == null) vi2 = s2.polygon.gverts.next;
							var u7 = vi1;
							state = 0;
							var beg_ite2 = vi2;
							var cx_ite9 = vi2;
							do {
								var v14 = cx_ite9;
								var vind2 = vind + 1;
								if(vind2 == s2.polygon.edgeCnt) vind2 = 0;
								if(inte[vind]) {
									if(ins[vind2]) {
										var tval1;
										var vx1 = 0.0;
										var vy1 = 0.0;
										vx1 = v14.x - u7.x;
										vy1 = v14.y - u7.y;
										var qx1 = 0.0;
										var qy1 = 0.0;
										qx1 = u7.x - s1.circle.worldCOMx;
										qy1 = u7.y - s1.circle.worldCOMy;
										var A1 = vx1 * vx1 + vy1 * vy1;
										var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
										var C1 = qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius;
										var D1 = Math.sqrt(B1 * B1 - 4 * A1 * C1);
										A1 = 1 / (2 * A1);
										var t10 = (-B1 - D1) * A1;
										if(t10 < nape_Config.epsilon) tval1 = (-B1 + D1) * A1; else tval1 = t10;
										var cx5 = 0.0;
										var cy5 = 0.0;
										var T5 = tval1;
										cx5 = u7.x + (v14.x - u7.x) * T5;
										cy5 = u7.y + (v14.y - u7.y) * T5;
										if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx5,cy5) < nape_Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp = zpp_$nape_geom_ZPP_$Vec2.get(cx5,cy5,null);
										zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
										zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp);
										zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t0 = 0.0;
										var t11 = 0.0;
										var two;
										var vx2 = 0.0;
										var vy2 = 0.0;
										vx2 = v14.x - u7.x;
										vy2 = v14.y - u7.y;
										var qx2 = 0.0;
										var qy2 = 0.0;
										qx2 = u7.x - s1.circle.worldCOMx;
										qy2 = u7.y - s1.circle.worldCOMy;
										var A2 = vx2 * vx2 + vy2 * vy2;
										var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
										var C2 = qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius;
										var D2 = B2 * B2 - 4 * A2 * C2;
										if(D2 * D2 < nape_Config.epsilon) {
											if(D2 < 0) t0 = 10.0; else t0 = t11 = -B2 / (2 * A2);
											two = false;
										} else {
											D2 = Math.sqrt(D2);
											A2 = 1 / (2 * A2);
											t0 = (-B2 - D2) * A2;
											t11 = (-B2 + D2) * A2;
											two = true;
										}
										if(t0 < 1 - nape_Config.epsilon && t11 > nape_Config.epsilon) {
											var cx6 = 0.0;
											var cy6 = 0.0;
											var T6 = t0;
											cx6 = u7.x + (v14.x - u7.x) * T6;
											cy6 = u7.y + (v14.y - u7.y) * T6;
											if(fst_vert1 != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx6,cy6) < nape_Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp1 = zpp_$nape_geom_ZPP_$Vec2.get(cx6,cy6,null);
											if(!(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null)) {
												zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
												zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp1);
											}
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp1);
											if(fst_vert1 == null) fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
											if(two) {
												var cx7 = 0.0;
												var cy7 = 0.0;
												var T7 = t11;
												cx7 = u7.x + (v14.x - u7.x) * T7;
												cy7 = u7.y + (v14.y - u7.y) * T7;
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx7,cy7,null));
											}
										}
									}
								}
								u7 = v14;
								vi1 = cx_ite9;
								vind = vind2;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							} while(false);
							while(cx_ite9 != beg_ite2) {
								var v15 = cx_ite9;
								var vind21 = vind + 1;
								if(vind21 == s2.polygon.edgeCnt) vind21 = 0;
								if(inte[vind]) {
									if(ins[vind21]) {
										var tval2;
										var vx3 = 0.0;
										var vy3 = 0.0;
										vx3 = v15.x - u7.x;
										vy3 = v15.y - u7.y;
										var qx3 = 0.0;
										var qy3 = 0.0;
										qx3 = u7.x - s1.circle.worldCOMx;
										qy3 = u7.y - s1.circle.worldCOMy;
										var A3 = vx3 * vx3 + vy3 * vy3;
										var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
										var C3 = qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius;
										var D3 = Math.sqrt(B3 * B3 - 4 * A3 * C3);
										A3 = 1 / (2 * A3);
										var t12 = (-B3 - D3) * A3;
										if(t12 < nape_Config.epsilon) tval2 = (-B3 + D3) * A3; else tval2 = t12;
										var cx8 = 0.0;
										var cy8 = 0.0;
										var T8 = tval2;
										cx8 = u7.x + (v15.x - u7.x) * T8;
										cy8 = u7.y + (v15.y - u7.y) * T8;
										if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx8,cy8) < nape_Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp2 = zpp_$nape_geom_ZPP_$Vec2.get(cx8,cy8,null);
										zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
										zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp2);
										zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp2);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t01 = 0.0;
										var t13 = 0.0;
										var two1;
										var vx4 = 0.0;
										var vy4 = 0.0;
										vx4 = v15.x - u7.x;
										vy4 = v15.y - u7.y;
										var qx4 = 0.0;
										var qy4 = 0.0;
										qx4 = u7.x - s1.circle.worldCOMx;
										qy4 = u7.y - s1.circle.worldCOMy;
										var A4 = vx4 * vx4 + vy4 * vy4;
										var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
										var C4 = qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius;
										var D4 = B4 * B4 - 4 * A4 * C4;
										if(D4 * D4 < nape_Config.epsilon) {
											if(D4 < 0) t01 = 10.0; else t01 = t13 = -B4 / (2 * A4);
											two1 = false;
										} else {
											D4 = Math.sqrt(D4);
											A4 = 1 / (2 * A4);
											t01 = (-B4 - D4) * A4;
											t13 = (-B4 + D4) * A4;
											two1 = true;
										}
										if(t01 < 1 - nape_Config.epsilon && t13 > nape_Config.epsilon) {
											var cx9 = 0.0;
											var cy9 = 0.0;
											var T9 = t01;
											cx9 = u7.x + (v15.x - u7.x) * T9;
											cy9 = u7.y + (v15.y - u7.y) * T9;
											if(fst_vert1 != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx9,cy9) < nape_Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp3 = zpp_$nape_geom_ZPP_$Vec2.get(cx9,cy9,null);
											if(!(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null)) {
												zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
												zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp3);
											}
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp3);
											if(fst_vert1 == null) fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
											if(two1) {
												var cx10 = 0.0;
												var cy10 = 0.0;
												var T10 = t13;
												cx10 = u7.x + (v15.x - u7.x) * T10;
												cy10 = u7.y + (v15.y - u7.y) * T10;
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx10,cy10,null));
											}
										}
									}
								}
								u7 = v15;
								vi1 = cx_ite9;
								vind = vind21;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							}
						}
						if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) return false; else if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next == null) {
							var all = true;
							var cx_ite10 = s2.polygon.edges.head;
							while(cx_ite10 != null) {
								var e = cx_ite10.elt;
								var dist2 = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
								if(dist2 > e.gprojection) {
									all = false;
									break;
								}
								cx_ite10 = cx_ite10.next;
							}
							if(all) {
								arb.overlap = s1.circle.area;
								arb.centroidx = s1.circle.worldCOMx;
								arb.centroidy = s1.circle.worldCOMy;
								null;
								return true;
							} else return false;
						} else {
							var COMx1 = 0;
							var COMy1 = 0;
							var area1 = 0.0;
							if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
								var parea = 0.0;
								var pCOMx = 0.0;
								var pCOMy = 0.0;
								pCOMx = 0;
								pCOMy = 0;
								parea = 0.0;
								var cx_ite11 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
								var u8 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								var v16 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								while(cx_ite11 != null) {
									var w5 = cx_ite11.elt;
									parea += v16.x * (w5.y - u8.y);
									var cf3 = w5.y * v16.x - w5.x * v16.y;
									pCOMx += (v16.x + w5.x) * cf3;
									pCOMy += (v16.y + w5.y) * cf3;
									u8 = v16;
									v16 = w5;
									cx_ite11 = cx_ite11.next;
								}
								cx_ite11 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
								var w3 = cx_ite11.elt;
								parea += v16.x * (w3.y - u8.y);
								var cf4 = w3.y * v16.x - w3.x * v16.y;
								pCOMx += (v16.x + w3.x) * cf4;
								pCOMy += (v16.y + w3.y) * cf4;
								u8 = v16;
								v16 = w3;
								cx_ite11 = cx_ite11.next;
								var w4 = cx_ite11.elt;
								parea += v16.x * (w4.y - u8.y);
								var cf5 = w4.y * v16.x - w4.x * v16.y;
								pCOMx += (v16.x + w4.x) * cf5;
								pCOMy += (v16.y + w4.y) * cf5;
								parea *= 0.5;
								var ia1 = 1 / (6 * parea);
								var t14 = ia1;
								pCOMx *= t14;
								pCOMy *= t14;
								var t15 = -parea;
								COMx1 += pCOMx * t15;
								COMy1 += pCOMy * t15;
								area1 -= parea;
							} else {
								zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
								zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.elt);
							}
							while(!(zpp_$nape_geom_ZPP_$Collide.flowsegs.head == null)) {
								var u9 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
								var v17 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
								var dx = 0.0;
								var dy = 0.0;
								dx = v17.x - u9.x;
								dy = v17.y - u9.y;
								var nx = 0.0;
								var ny = 0.0;
								nx = dx;
								ny = dy;
								var d = nx * nx + ny * ny;
								var imag = 1.0 / Math.sqrt(d);
								var t16 = imag;
								nx *= t16;
								ny *= t16;
								var t17 = nx;
								nx = -ny;
								ny = t17;
								var cx11 = 0.0;
								var cy11 = 0.0;
								cx11 = u9.x + v17.x;
								cy11 = u9.y + v17.y;
								var t18 = 0.5;
								cx11 *= t18;
								cy11 *= t18;
								var t19 = 1.0;
								cx11 -= s1.circle.worldCOMx * t19;
								cy11 -= s1.circle.worldCOMy * t19;
								var xd = nx * cx11 + ny * cy11;
								var carea = 0.0;
								var ccom = 0.0;
								var X = xd;
								var cos = X / s1.circle.radius;
								var sin = Math.sqrt(1 - cos * cos);
								var theta = Math.acos(cos);
								carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
								ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
								cx11 = s1.circle.worldCOMx;
								cy11 = s1.circle.worldCOMy;
								var t20 = ccom;
								cx11 += nx * t20;
								cy11 += ny * t20;
								var t21 = carea;
								COMx1 += cx11 * t21;
								COMy1 += cy11 * t21;
								area1 += carea;
							}
							var t22 = 1.0 / area1;
							COMx1 *= t22;
							COMy1 *= t22;
							arb.overlap = area1;
							arb.centroidx = COMx1;
							arb.centroidy = COMy1;
							null;
							return true;
						}
					}
				} else return false;
			}
		} else return false;
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) return false; else if(ds < nape_Config.epsilon * nape_Config.epsilon) {
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
				null;
			}
			return true;
		} else {
			var d1 = Math.sqrt(ds);
			var id = 1 / d1;
			var x1 = 0.5 * (d1 - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				var x2 = d1 - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
					null;
				} else {
					var area11 = 0.0;
					var y1 = 0.0;
					var area2 = 0.0;
					var y2 = 0.0;
					var X1 = x1;
					var cos1 = X1 / c1.radius;
					var sin1 = Math.sqrt(1 - cos1 * cos1);
					var theta1 = Math.acos(cos1);
					area11 = c1.radius * (c1.radius * theta1 - X1 * sin1);
					y1 = 0.66666666666666663 * c1.radius * sin1 * sin1 * sin1 / (theta1 - cos1 * sin1);
					var X2 = x2;
					var cos2 = X2 / c2.radius;
					var sin2 = Math.sqrt(1 - cos2 * cos2);
					var theta2 = Math.acos(cos2);
					area2 = c2.radius * (c2.radius * theta2 - X2 * sin2);
					y2 = 0.66666666666666663 * c2.radius * sin2 * sin2 * sin2 / (theta2 - cos2 * sin2);
					var tarea = area11 + area2;
					var ya = (y1 * area11 + (d1 - y2) * area2) / tarea * id;
					arb.overlap = tarea;
					arb.centroidx = c1.worldCOMx + deltax * ya;
					arb.centroidy = c1.worldCOMy + deltay * ya;
					null;
				}
			}
			return true;
		}
	}
};
var zpp_$nape_geom_ZPP_$Convex = function() { };
$hxClasses["zpp_nape.geom.ZPP_Convex"] = zpp_$nape_geom_ZPP_$Convex;
zpp_$nape_geom_ZPP_$Convex.__name__ = true;
zpp_$nape_geom_ZPP_$Convex.isinner = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = a.x - b.x;
	uy = a.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	return vy * ux - vx * uy >= 0;
};
zpp_$nape_geom_ZPP_$Convex.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			nite = nite.next;
		} while(nite != L);
	}
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var pright = p1.prev;
			var ppre = null;
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var pdiag = cx_ite.elt;
				var pleft;
				if(cx_ite.next == null) pleft = p1.next; else pleft = cx_ite.next.elt;
				if(!zpp_$nape_geom_ZPP_$Convex.isinner(pleft,p1,pright)) {
					ppre = cx_ite;
					pright = pdiag;
					cx_ite = cx_ite.next;
					continue;
				}
				var removable = true;
				var q = pdiag;
				var qright = q.prev;
				var qpre = null;
				var cx_ite1 = q.diagonals.head;
				while(cx_ite1 != null) {
					var qdiag = cx_ite1.elt;
					if(qdiag == p1) {
						var qleft;
						if(cx_ite1.next == null) qleft = q.next; else qleft = cx_ite1.next.elt;
						removable = zpp_$nape_geom_ZPP_$Convex.isinner(qleft,q,qright);
						break;
					}
					qright = qdiag;
					qpre = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				if(removable) {
					cx_ite = p1.diagonals.erase(ppre);
					q.diagonals.erase(qpre);
					continue;
				}
				pright = pdiag;
				ppre = cx_ite;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
};
var zpp_$nape_geom_ZPP_$ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.ray = null;
	this.position = null;
	this.convex = null;
	this.shape = null;
	this.normal = null;
};
$hxClasses["zpp_nape.geom.ZPP_ConvexRayResult"] = zpp_$nape_geom_ZPP_$ConvexRayResult;
zpp_$nape_geom_ZPP_$ConvexRayResult.__name__ = true;
zpp_$nape_geom_ZPP_$ConvexRayResult.getRay = function(normal,time,inner,shape) {
	var ret;
	if(zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool == null) {
		zpp_$nape_geom_ZPP_$ConvexRayResult.internal = true;
		ret = new nape_geom_RayResult();
		ret.zpp_inner = new zpp_$nape_geom_ZPP_$ConvexRayResult();
		ret.zpp_inner.ray = ret;
		zpp_$nape_geom_ZPP_$ConvexRayResult.internal = false;
	} else {
		ret = zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool.ray;
		zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool = zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool.next;
		ret.zpp_inner.next = null;
	}
	var zinner = ret.zpp_inner;
	zinner.normal = normal;
	normal.zpp_inner._immutable = true;
	zinner.toiDistance = time;
	zinner.inner = inner;
	zinner.shape = shape;
	return ret;
};
zpp_$nape_geom_ZPP_$ConvexRayResult.getConvex = function(normal,position,toiDistance,shape) {
	var ret;
	if(zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool == null) {
		zpp_$nape_geom_ZPP_$ConvexRayResult.internal = true;
		ret = new nape_geom_ConvexResult();
		ret.zpp_inner = new zpp_$nape_geom_ZPP_$ConvexRayResult();
		ret.zpp_inner.convex = ret;
		zpp_$nape_geom_ZPP_$ConvexRayResult.internal = false;
	} else {
		ret = zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool.convex;
		zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool = zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool.next;
		ret.zpp_inner.next = null;
	}
	var inner = ret.zpp_inner;
	inner.normal = normal;
	inner.position = position;
	normal.zpp_inner._immutable = true;
	position.zpp_inner._immutable = true;
	inner.toiDistance = toiDistance;
	inner.shape = shape;
	return ret;
};
zpp_$nape_geom_ZPP_$ConvexRayResult.prototype = {
	disposed: function() {
		if(this.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
	}
	,free: function() {
		this.normal.zpp_inner._immutable = false;
		this.normal.dispose();
		if(this.position != null) {
			this.position.zpp_inner._immutable = false;
			this.position.dispose();
		}
		this.shape = null;
		this.toiDistance = 0.0;
		if(this.convex != null) {
			this.next = zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool;
			zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool = this;
		} else {
			this.next = zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool;
			zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool = this;
		}
	}
	,__class__: zpp_$nape_geom_ZPP_$ConvexRayResult
};
var zpp_$nape_geom_ZPP_$CutVert = function() {
	this.used = false;
	this.rank = 0;
	this.parent = null;
	this.positive = false;
	this.value = 0.0;
	this.vert = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.next = null;
	this.prev = null;
};
$hxClasses["zpp_nape.geom.ZPP_CutVert"] = zpp_$nape_geom_ZPP_$CutVert;
zpp_$nape_geom_ZPP_$CutVert.__name__ = true;
zpp_$nape_geom_ZPP_$CutVert.path = function(poly) {
	var ret;
	if(zpp_$nape_geom_ZPP_$CutVert.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$CutVert(); else {
		ret = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vert = poly;
	ret.parent = ret;
	ret.rank = 0;
	ret.used = false;
	return ret;
};
zpp_$nape_geom_ZPP_$CutVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.vert = null;
		this.parent = null;
	}
	,__class__: zpp_$nape_geom_ZPP_$CutVert
};
var zpp_$nape_geom_ZPP_$CutInt = function() {
	this.path1 = null;
	this.start = null;
	this.end = null;
	this.path0 = null;
	this.vertex = false;
	this.virtualint = false;
	this.time = 0.0;
	this.next = null;
};
$hxClasses["zpp_nape.geom.ZPP_CutInt"] = zpp_$nape_geom_ZPP_$CutInt;
zpp_$nape_geom_ZPP_$CutInt.__name__ = true;
zpp_$nape_geom_ZPP_$CutInt.get = function(time,end,start,path0,path1,virtualint,vertex) {
	if(vertex == null) vertex = false;
	if(virtualint == null) virtualint = false;
	var ret;
	if(zpp_$nape_geom_ZPP_$CutInt.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$CutInt(); else {
		ret = zpp_$nape_geom_ZPP_$CutInt.zpp_pool;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.virtualint = virtualint;
	ret.end = end;
	ret.start = start;
	ret.path0 = path0;
	ret.path1 = path1;
	ret.time = time;
	ret.vertex = vertex;
	return ret;
};
zpp_$nape_geom_ZPP_$CutInt.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.end = this.start = null;
		this.path0 = this.path1 = null;
	}
	,__class__: zpp_$nape_geom_ZPP_$CutInt
};
var zpp_$nape_geom_ZPP_$Cutter = function() { };
$hxClasses["zpp_nape.geom.ZPP_Cutter"] = zpp_$nape_geom_ZPP_$Cutter;
zpp_$nape_geom_ZPP_$Cutter.__name__ = true;
zpp_$nape_geom_ZPP_$Cutter.run = function(P,_start,_end,bstart,bend,output) {
	var px = 0.0;
	var py = 0.0;
	if(_start != null && _start.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	_start.zpp_inner.validate();
	px = _start.zpp_inner.x;
	if(_start != null && _start.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	_start.zpp_inner.validate();
	py = _start.zpp_inner.y;
	var dx = 0.0;
	var dy = 0.0;
	dx = (function($this) {
		var $r;
		if(_end != null && _end.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.x;
		return $r;
	}(this)) - px;
	dy = (function($this) {
		var $r;
		if(_end != null && _end.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.y;
		return $r;
	}(this)) - py;
	var min;
	if(bstart) min = 0; else min = -Infinity;
	var max;
	if(bend) max = 1; else {
		max = Infinity;
	}
	var crx = -(py * dx - px * dy);
	var verts = null;
	var clashes = false;
	var p = P;
	do {
		var c;
		if(zpp_$nape_geom_ZPP_$CutVert.zpp_pool == null) c = new zpp_$nape_geom_ZPP_$CutVert(); else {
			c = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
			zpp_$nape_geom_ZPP_$CutVert.zpp_pool = c.next;
			c.next = null;
		}
		null;
		c.vert = p;
		c.posx = c.vert.x;
		c.posy = c.vert.y;
		c.value = c.posy * dx - c.posx * dy + crx;
		c.positive = c.value > 0;
		if(c.value == 0) clashes = true;
		var obj = c;
		if(verts == null) verts = obj.prev = obj.next = obj; else {
			obj.prev = verts;
			obj.next = verts.next;
			verts.next.prev = obj;
			verts.next = obj;
		}
		verts = obj;
		p = p.next;
	} while(p != P);
	if(clashes) {
		var start1 = null;
		var F = verts;
		var L = verts;
		if(F != null) {
			var nite = F;
			do {
				var p2 = nite;
				if(p2.value != 0.0) {
					start1 = p2;
					break;
				}
				nite = nite.next;
			} while(nite != L);
		}
		var nx = 0.0;
		var ny = 0.0;
		nx = dx;
		ny = dy;
		var d = nx * nx + ny * ny;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		nx *= t;
		ny *= t;
		var t1 = nx;
		nx = -ny;
		ny = t1;
		var pre = null;
		var p1 = start1;
		do {
			if(p1.value != 0.0 && (pre == null || p1 == pre.next)) {
				pre = p1;
				p1 = p1.next;
				continue;
			}
			var prod = pre.value * p1.value;
			if(prod == 0) {
				p1 = p1.next;
				continue;
			}
			var a = pre.next;
			var positive;
			if(prod > 0) positive = pre.positive; else {
				var b = a.next;
				var midx = 0.0;
				var midy = 0.0;
				midx = a.posx + b.posx;
				midy = a.posy + b.posy;
				var t2 = 0.5;
				midx *= t2;
				midy *= t2;
				var x = midx + nx * 1e-8;
				var y = midy + ny * 1e-8;
				var ret1 = false;
				var F1 = P;
				var L1 = P;
				if(F1 != null) {
					var nite1 = F1;
					do {
						var p3 = nite1;
						var q = p3.prev;
						if((p3.y < y && q.y >= y || q.y < y && p3.y >= y) && (p3.x <= x || q.x <= x)) {
							if(p3.x + (y - p3.y) / (q.y - p3.y) * (q.x - p3.x) < x) ret1 = !ret1;
						}
						nite1 = nite1.next;
					} while(nite1 != L1);
				}
				positive = ret1;
			}
			var F2 = a;
			var L2 = p1;
			if(F2 != null) {
				var nite2 = F2;
				do {
					var q1 = nite2;
					q1.positive = positive;
					nite2 = nite2.next;
				} while(nite2 != L2);
			}
			pre = p1;
			p1 = p1.next;
		} while(p1 != start1);
		do {
			if(p1.value != 0.0 && (pre == null || p1 == pre.next)) {
				pre = p1;
				p1 = p1.next;
				continue;
			}
			var prod1 = pre.value * p1.value;
			if(prod1 == 0) {
				p1 = p1.next;
				continue;
			}
			var a1 = pre.next;
			var positive1;
			if(prod1 > 0) positive1 = pre.positive; else {
				var b1 = a1.next;
				var midx1 = 0.0;
				var midy1 = 0.0;
				midx1 = a1.posx + b1.posx;
				midy1 = a1.posy + b1.posy;
				var t3 = 0.5;
				midx1 *= t3;
				midy1 *= t3;
				var x1 = midx1 + nx * 1e-8;
				var y1 = midy1 + ny * 1e-8;
				var ret2 = false;
				var F3 = P;
				var L3 = P;
				if(F3 != null) {
					var nite3 = F3;
					do {
						var p4 = nite3;
						var q2 = p4.prev;
						if((p4.y < y1 && q2.y >= y1 || q2.y < y1 && p4.y >= y1) && (p4.x <= x1 || q2.x <= x1)) {
							if(p4.x + (y1 - p4.y) / (q2.y - p4.y) * (q2.x - p4.x) < x1) ret2 = !ret2;
						}
						nite3 = nite3.next;
					} while(nite3 != L3);
				}
				positive1 = ret2;
			}
			var F4 = a1;
			var L4 = p1;
			if(F4 != null) {
				var nite4 = F4;
				do {
					var q3 = nite4;
					q3.positive = positive1;
					nite4 = nite4.next;
				} while(nite4 != L4);
			}
			pre = p1;
			p1 = p1.next;
		} while(false);
	}
	if(zpp_$nape_geom_ZPP_$Cutter.ints == null) zpp_$nape_geom_ZPP_$Cutter.ints = new zpp_$nape_util_ZNPList_$ZPP_$CutInt();
	if(zpp_$nape_geom_ZPP_$Cutter.paths == null) zpp_$nape_geom_ZPP_$Cutter.paths = new zpp_$nape_util_ZNPList_$ZPP_$CutVert();
	var start = null;
	var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get(verts.posx,verts.posy);
	if(start == null) start = obj1.prev = obj1.next = obj1; else {
		obj1.next = start;
		obj1.prev = start.prev;
		start.prev.next = obj1;
		start.prev = obj1;
	}
	obj1;
	var origin = start;
	var firstpath = zpp_$nape_geom_ZPP_$CutVert.path(start);
	zpp_$nape_geom_ZPP_$Cutter.paths.add(firstpath);
	var i = verts;
	do {
		var j = i.next;
		var pj = zpp_$nape_geom_ZPP_$GeomVert.get(j.posx,j.posy);
		if(i.positive == j.positive) {
			var obj2 = pj;
			if(start == null) start = obj2.prev = obj2.next = obj2; else {
				obj2.next = start;
				obj2.prev = start.prev;
				start.prev.next = obj2;
				start.prev = obj2;
			}
			obj2;
		} else {
			var ux = 0.0;
			var uy = 0.0;
			ux = j.posx - i.posx;
			uy = j.posy - i.posy;
			var denom = dy * ux - dx * uy;
			denom = 1 / denom;
			var pax = 0.0;
			var pay = 0.0;
			pax = px - i.posx;
			pay = py - i.posy;
			var s = (uy * pax - ux * pay) * denom;
			if(s < min || s > max) {
				zpp_$nape_geom_ZPP_$Cutter.ints.add(zpp_$nape_geom_ZPP_$CutInt.get(s,null,null,null,null,true,null));
				var obj3 = pj;
				if(start == null) start = obj3.prev = obj3.next = obj3; else {
					obj3.next = start;
					obj3.prev = start.prev;
					start.prev.next = obj3;
					start.prev = obj3;
				}
				obj3;
			} else if(i.value == 0) {
				var endof1 = start.prev;
				start = null;
				var obj4 = zpp_$nape_geom_ZPP_$GeomVert.get(endof1.x,endof1.y);
				if(start == null) start = obj4.prev = obj4.next = obj4; else {
					obj4.next = start;
					obj4.prev = start.prev;
					start.prev.next = obj4;
					start.prev = obj4;
				}
				obj4;
				var obj5 = pj;
				if(start == null) start = obj5.prev = obj5.next = obj5; else {
					obj5.next = start;
					obj5.prev = start.prev;
					start.prev.next = obj5;
					start.prev = obj5;
				}
				obj5;
				var prepath = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.paths.add(zpp_$nape_geom_ZPP_$CutVert.path(start));
				var postpath = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.ints.add(zpp_$nape_geom_ZPP_$CutInt.get(s,endof1,start,prepath,postpath,true,null));
			} else if(j.value == 0) {
				var obj6 = pj;
				if(start == null) start = obj6.prev = obj6.next = obj6; else {
					obj6.next = start;
					obj6.prev = start.prev;
					start.prev.next = obj6;
					start.prev = obj6;
				}
				obj6;
				var endof2 = start.prev;
				start = null;
				var obj7 = zpp_$nape_geom_ZPP_$GeomVert.get(j.posx,j.posy);
				if(start == null) start = obj7.prev = obj7.next = obj7; else {
					obj7.next = start;
					obj7.prev = start.prev;
					start.prev.next = obj7;
					start.prev = obj7;
				}
				obj7;
				var prepath1 = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.paths.add(zpp_$nape_geom_ZPP_$CutVert.path(start));
				var postpath1 = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.ints.add(zpp_$nape_geom_ZPP_$CutInt.get(s,endof2,start,prepath1,postpath1,true,null));
			} else {
				var t4 = (dy * pax - dx * pay) * denom;
				var qx = 0.0;
				var qy = 0.0;
				qx = i.posx;
				qy = i.posy;
				var t5 = t4;
				qx += ux * t5;
				qy += uy * t5;
				var obj8 = zpp_$nape_geom_ZPP_$GeomVert.get(qx,qy);
				if(start == null) start = obj8.prev = obj8.next = obj8; else {
					obj8.next = start;
					obj8.prev = start.prev;
					start.prev.next = obj8;
					start.prev = obj8;
				}
				obj8;
				var endof3 = start.prev;
				start = null;
				var obj9 = zpp_$nape_geom_ZPP_$GeomVert.get(qx,qy);
				if(start == null) start = obj9.prev = obj9.next = obj9; else {
					obj9.next = start;
					obj9.prev = start.prev;
					start.prev.next = obj9;
					start.prev = obj9;
				}
				obj9;
				var obj10 = pj;
				if(start == null) start = obj10.prev = obj10.next = obj10; else {
					obj10.next = start;
					obj10.prev = start.prev;
					start.prev.next = obj10;
					start.prev = obj10;
				}
				obj10;
				var prepath2 = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.paths.add(zpp_$nape_geom_ZPP_$CutVert.path(start));
				var postpath2 = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.ints.add(zpp_$nape_geom_ZPP_$CutInt.get(s,endof3,start,prepath2,postpath2,false,null));
			}
		}
		i = i.next;
	} while(i != verts);
	var endof = start.prev;
	endof.next.prev = origin.prev;
	origin.prev.next = endof.next;
	endof.next = origin;
	origin.prev = endof;
	var lastpath = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
	var xr;
	if(firstpath == firstpath.parent) xr = firstpath; else {
		var obj11 = firstpath;
		var stack = null;
		while(obj11 != obj11.parent) {
			var nxt = obj11.parent;
			obj11.parent = stack;
			stack = obj11;
			obj11 = nxt;
		}
		while(stack != null) {
			var nxt1 = stack.parent;
			stack.parent = obj11;
			stack = nxt1;
		}
		xr = obj11;
	}
	var yr;
	if(lastpath == lastpath.parent) yr = lastpath; else {
		var obj12 = lastpath;
		var stack1 = null;
		while(obj12 != obj12.parent) {
			var nxt2 = obj12.parent;
			obj12.parent = stack1;
			stack1 = obj12;
			obj12 = nxt2;
		}
		while(stack1 != null) {
			var nxt3 = stack1.parent;
			stack1.parent = obj12;
			stack1 = nxt3;
		}
		yr = obj12;
	}
	if(xr != yr) {
		if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
			yr.parent = xr;
			xr.rank++;
		}
	}
	var xxlist = zpp_$nape_geom_ZPP_$Cutter.ints;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt4 = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt4 = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else if(left.elt.time < right.elt.time) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else {
						nxt4 = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt4; else head = nxt4;
					tail = nxt4;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	while(!(zpp_$nape_geom_ZPP_$Cutter.ints.head == null)) {
		var i1 = zpp_$nape_geom_ZPP_$Cutter.ints.pop_unsafe();
		var j1 = zpp_$nape_geom_ZPP_$Cutter.ints.pop_unsafe();
		if(!i1.virtualint && !j1.virtualint) {
			i1.end.next.prev = j1.start.prev;
			j1.start.prev.next = i1.end.next;
			i1.end.next = j1.start;
			j1.start.prev = i1.end;
			j1.end.next.prev = i1.start.prev;
			i1.start.prev.next = j1.end.next;
			j1.end.next = i1.start;
			i1.start.prev = j1.end;
			var xr1;
			if(i1.path0 == i1.path0.parent) xr1 = i1.path0; else {
				var obj13 = i1.path0;
				var stack2 = null;
				while(obj13 != obj13.parent) {
					var nxt5 = obj13.parent;
					obj13.parent = stack2;
					stack2 = obj13;
					obj13 = nxt5;
				}
				while(stack2 != null) {
					var nxt6 = stack2.parent;
					stack2.parent = obj13;
					stack2 = nxt6;
				}
				xr1 = obj13;
			}
			var yr1;
			if(j1.path1 == j1.path1.parent) yr1 = j1.path1; else {
				var obj14 = j1.path1;
				var stack3 = null;
				while(obj14 != obj14.parent) {
					var nxt7 = obj14.parent;
					obj14.parent = stack3;
					stack3 = obj14;
					obj14 = nxt7;
				}
				while(stack3 != null) {
					var nxt8 = stack3.parent;
					stack3.parent = obj14;
					stack3 = nxt8;
				}
				yr1 = obj14;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
			var xr2;
			if(i1.path1 == i1.path1.parent) xr2 = i1.path1; else {
				var obj15 = i1.path1;
				var stack4 = null;
				while(obj15 != obj15.parent) {
					var nxt9 = obj15.parent;
					obj15.parent = stack4;
					stack4 = obj15;
					obj15 = nxt9;
				}
				while(stack4 != null) {
					var nxt10 = stack4.parent;
					stack4.parent = obj15;
					stack4 = nxt10;
				}
				xr2 = obj15;
			}
			var yr2;
			if(j1.path0 == j1.path0.parent) yr2 = j1.path0; else {
				var obj16 = j1.path0;
				var stack5 = null;
				while(obj16 != obj16.parent) {
					var nxt11 = obj16.parent;
					obj16.parent = stack5;
					stack5 = obj16;
					obj16 = nxt11;
				}
				while(stack5 != null) {
					var nxt12 = stack5.parent;
					stack5.parent = obj16;
					stack5 = nxt12;
				}
				yr2 = obj16;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		} else if(i1.virtualint && !j1.virtualint) {
			if(j1.end != null && j1.end.prev == j1.end) {
				j1.end.next = j1.end.prev = null;
				var o = j1.end;
				if(o.wrap != null) {
					o.wrap.zpp_inner._inuse = false;
					o.wrap.dispose();
					o.wrap = null;
				}
				o.prev = o.next = null;
				o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
				zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
				j1.end = null;
			} else {
				var retnodes = j1.end.prev;
				j1.end.prev.next = j1.end.next;
				j1.end.next.prev = j1.end.prev;
				j1.end.next = j1.end.prev = null;
				var o1 = j1.end;
				if(o1.wrap != null) {
					o1.wrap.zpp_inner._inuse = false;
					o1.wrap.dispose();
					o1.wrap = null;
				}
				o1.prev = o1.next = null;
				o1.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
				zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o1;
				j1.end = null;
				j1.end = retnodes;
			}
			if(!j1.vertex) {
				if(j1.end != j1.path0.vert) {
					j1.start.x = j1.end.x;
					j1.start.y = j1.end.y;
					if(j1.end != null && j1.end.prev == j1.end) {
						j1.end.next = j1.end.prev = null;
						var o2 = j1.end;
						if(o2.wrap != null) {
							o2.wrap.zpp_inner._inuse = false;
							o2.wrap.dispose();
							o2.wrap = null;
						}
						o2.prev = o2.next = null;
						o2.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o2;
						j1.end = null;
					} else {
						var retnodes1 = j1.end.prev;
						j1.end.prev.next = j1.end.next;
						j1.end.next.prev = j1.end.prev;
						j1.end.next = j1.end.prev = null;
						var o3 = j1.end;
						if(o3.wrap != null) {
							o3.wrap.zpp_inner._inuse = false;
							o3.wrap.dispose();
							o3.wrap = null;
						}
						o3.prev = o3.next = null;
						o3.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o3;
						j1.end = null;
						j1.end = retnodes1;
					}
				} else {
					var n = j1.start.next;
					j1.start.x = n.x;
					j1.start.y = n.y;
					if(n != null && n.prev == n) {
						n.next = n.prev = null;
						var o4 = n;
						if(o4.wrap != null) {
							o4.wrap.zpp_inner._inuse = false;
							o4.wrap.dispose();
							o4.wrap = null;
						}
						o4.prev = o4.next = null;
						o4.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o4;
						n = null;
					} else {
						n.prev.next = n.next;
						n.next.prev = n.prev;
						n.next = n.prev = null;
						var o5 = n;
						if(o5.wrap != null) {
							o5.wrap.zpp_inner._inuse = false;
							o5.wrap.dispose();
							o5.wrap = null;
						}
						o5.prev = o5.next = null;
						o5.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o5;
					}
				}
			}
			j1.end.next.prev = j1.start.prev;
			j1.start.prev.next = j1.end.next;
			j1.end.next = j1.start;
			j1.start.prev = j1.end;
			var xr3;
			if(j1.path0 == j1.path0.parent) xr3 = j1.path0; else {
				var obj17 = j1.path0;
				var stack6 = null;
				while(obj17 != obj17.parent) {
					var nxt13 = obj17.parent;
					obj17.parent = stack6;
					stack6 = obj17;
					obj17 = nxt13;
				}
				while(stack6 != null) {
					var nxt14 = stack6.parent;
					stack6.parent = obj17;
					stack6 = nxt14;
				}
				xr3 = obj17;
			}
			var yr3;
			if(j1.path1 == j1.path1.parent) yr3 = j1.path1; else {
				var obj18 = j1.path1;
				var stack7 = null;
				while(obj18 != obj18.parent) {
					var nxt15 = obj18.parent;
					obj18.parent = stack7;
					stack7 = obj18;
					obj18 = nxt15;
				}
				while(stack7 != null) {
					var nxt16 = stack7.parent;
					stack7.parent = obj18;
					stack7 = nxt16;
				}
				yr3 = obj18;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		} else if(j1.virtualint && !i1.virtualint) {
			if(i1.end != null && i1.end.prev == i1.end) {
				i1.end.next = i1.end.prev = null;
				var o6 = i1.end;
				if(o6.wrap != null) {
					o6.wrap.zpp_inner._inuse = false;
					o6.wrap.dispose();
					o6.wrap = null;
				}
				o6.prev = o6.next = null;
				o6.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
				zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o6;
				i1.end = null;
			} else {
				var retnodes2 = i1.end.prev;
				i1.end.prev.next = i1.end.next;
				i1.end.next.prev = i1.end.prev;
				i1.end.next = i1.end.prev = null;
				var o7 = i1.end;
				if(o7.wrap != null) {
					o7.wrap.zpp_inner._inuse = false;
					o7.wrap.dispose();
					o7.wrap = null;
				}
				o7.prev = o7.next = null;
				o7.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
				zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o7;
				i1.end = null;
				i1.end = retnodes2;
			}
			if(!i1.vertex) {
				if(i1.end != i1.path0.vert) {
					i1.start.x = i1.end.x;
					i1.start.y = i1.end.y;
					if(i1.end != null && i1.end.prev == i1.end) {
						i1.end.next = i1.end.prev = null;
						var o8 = i1.end;
						if(o8.wrap != null) {
							o8.wrap.zpp_inner._inuse = false;
							o8.wrap.dispose();
							o8.wrap = null;
						}
						o8.prev = o8.next = null;
						o8.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o8;
						i1.end = null;
					} else {
						var retnodes3 = i1.end.prev;
						i1.end.prev.next = i1.end.next;
						i1.end.next.prev = i1.end.prev;
						i1.end.next = i1.end.prev = null;
						var o9 = i1.end;
						if(o9.wrap != null) {
							o9.wrap.zpp_inner._inuse = false;
							o9.wrap.dispose();
							o9.wrap = null;
						}
						o9.prev = o9.next = null;
						o9.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o9;
						i1.end = null;
						i1.end = retnodes3;
					}
				} else {
					var n1 = i1.start.next;
					i1.start.x = n1.x;
					i1.start.y = n1.y;
					if(n1 != null && n1.prev == n1) {
						n1.next = n1.prev = null;
						var o10 = n1;
						if(o10.wrap != null) {
							o10.wrap.zpp_inner._inuse = false;
							o10.wrap.dispose();
							o10.wrap = null;
						}
						o10.prev = o10.next = null;
						o10.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o10;
						n1 = null;
					} else {
						n1.prev.next = n1.next;
						n1.next.prev = n1.prev;
						n1.next = n1.prev = null;
						var o11 = n1;
						if(o11.wrap != null) {
							o11.wrap.zpp_inner._inuse = false;
							o11.wrap.dispose();
							o11.wrap = null;
						}
						o11.prev = o11.next = null;
						o11.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o11;
					}
				}
			}
			i1.end.next.prev = i1.start.prev;
			i1.start.prev.next = i1.end.next;
			i1.end.next = i1.start;
			i1.start.prev = i1.end;
			var xr4;
			if(i1.path0 == i1.path0.parent) xr4 = i1.path0; else {
				var obj19 = i1.path0;
				var stack8 = null;
				while(obj19 != obj19.parent) {
					var nxt17 = obj19.parent;
					obj19.parent = stack8;
					stack8 = obj19;
					obj19 = nxt17;
				}
				while(stack8 != null) {
					var nxt18 = stack8.parent;
					stack8.parent = obj19;
					stack8 = nxt18;
				}
				xr4 = obj19;
			}
			var yr4;
			if(i1.path1 == i1.path1.parent) yr4 = i1.path1; else {
				var obj20 = i1.path1;
				var stack9 = null;
				while(obj20 != obj20.parent) {
					var nxt19 = obj20.parent;
					obj20.parent = stack9;
					stack9 = obj20;
					obj20 = nxt19;
				}
				while(stack9 != null) {
					var nxt20 = stack9.parent;
					stack9.parent = obj20;
					stack9 = nxt20;
				}
				yr4 = obj20;
			}
			if(xr4 != yr4) {
				if(xr4.rank < yr4.rank) xr4.parent = yr4; else if(xr4.rank > yr4.rank) yr4.parent = xr4; else {
					yr4.parent = xr4;
					xr4.rank++;
				}
			}
		}
		var o12 = i1;
		o12.end = o12.start = null;
		o12.path0 = o12.path1 = null;
		o12.next = zpp_$nape_geom_ZPP_$CutInt.zpp_pool;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool = o12;
		var o13 = j1;
		o13.end = o13.start = null;
		o13.path0 = o13.path1 = null;
		o13.next = zpp_$nape_geom_ZPP_$CutInt.zpp_pool;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool = o13;
	}
	var ret;
	if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
	var cx_ite = zpp_$nape_geom_ZPP_$Cutter.paths.head;
	while(cx_ite != null) {
		var p5 = cx_ite.elt;
		var poly;
		if(p5 == p5.parent) poly = p5; else {
			var obj21 = p5;
			var stack10 = null;
			while(obj21 != obj21.parent) {
				var nxt21 = obj21.parent;
				obj21.parent = stack10;
				stack10 = obj21;
				obj21 = nxt21;
			}
			while(stack10 != null) {
				var nxt22 = stack10.parent;
				stack10.parent = obj21;
				stack10 = nxt22;
			}
			poly = obj21;
		}
		if(poly.used) {
			cx_ite = cx_ite.next;
			continue;
		}
		poly.used = true;
		var p6 = poly.vert;
		var skip = true;
		while(poly.vert != null && (skip || p6 != poly.vert)) {
			skip = false;
			if(p6.x == p6.next.x && p6.y == p6.next.y) {
				if(p6 == poly.vert) {
					if(p6.next == p6) poly.vert = null; else poly.vert = p6.next;
					skip = true;
				}
				if(p6 != null && p6.prev == p6) {
					p6.next = p6.prev = null;
					p6 = p6 = null;
				} else {
					var retnodes4 = p6.next;
					p6.prev.next = p6.next;
					p6.next.prev = p6.prev;
					p6.next = p6.prev = null;
					p6 = null;
					p6 = retnodes4;
				}
			} else p6 = p6.next;
		}
		if(poly.vert != null) {
			var gp = nape_geom_GeomPoly.get();
			gp.zpp_inner.vertices = poly.vert;
			if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
		}
		cx_ite = cx_ite.next;
	}
	while(!(zpp_$nape_geom_ZPP_$Cutter.paths.head == null)) {
		var p7 = zpp_$nape_geom_ZPP_$Cutter.paths.pop_unsafe();
		var o14 = p7;
		o14.vert = null;
		o14.parent = null;
		o14.next = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = o14;
	}
	while(!(verts == null)) if(verts != null && verts.prev == verts) {
		verts.next = verts.prev = null;
		var o15 = verts;
		o15.vert = null;
		o15.parent = null;
		o15.next = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = o15;
		verts = verts = null;
	} else {
		var retnodes5 = verts.next;
		verts.prev.next = verts.next;
		verts.next.prev = verts.prev;
		verts.next = verts.prev = null;
		var o16 = verts;
		o16.vert = null;
		o16.parent = null;
		o16.next = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = o16;
		verts = null;
		verts = retnodes5;
	}
	return ret;
};
var zpp_$nape_geom_ZPP_$Geom = function() { };
$hxClasses["zpp_nape.geom.ZPP_Geom"] = zpp_$nape_geom_ZPP_$Geom;
zpp_$nape_geom_ZPP_$Geom.__name__ = true;
zpp_$nape_geom_ZPP_$Geom.validateShape = function(s) {
	if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.body.validate_axis();
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
		}
	}
};
var zpp_$nape_geom_ZPP_$GeomVert = function() {
	this.forced = false;
	this.wrap = null;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_GeomVert"] = zpp_$nape_geom_ZPP_$GeomVert;
zpp_$nape_geom_ZPP_$GeomVert.__name__ = true;
zpp_$nape_geom_ZPP_$GeomVert.get = function(x,y) {
	var ret;
	if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$GeomVert(); else {
		ret = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.forced = false;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_$nape_geom_ZPP_$GeomVert.prototype = {
	free: function() {
		if(this.wrap != null) {
			this.wrap.zpp_inner._inuse = false;
			this.wrap.dispose();
			this.wrap = null;
		}
		this.prev = this.next = null;
	}
	,alloc: function() {
		this.forced = false;
	}
	,wrapper: function() {
		if(this.wrap == null) {
			this.wrap = nape_geom_Vec2.get(this.x,this.y,null);
			this.wrap.zpp_inner._inuse = true;
			this.wrap.zpp_inner._invalidate = $bind(this,this.modwrap);
			this.wrap.zpp_inner._validate = $bind(this,this.getwrap);
		}
		return this.wrap;
	}
	,modwrap: function(n) {
		this.x = n.x;
		this.y = n.y;
	}
	,getwrap: function() {
		this.wrap.zpp_inner.x = this.x;
		this.wrap.zpp_inner.y = this.y;
	}
	,__class__: zpp_$nape_geom_ZPP_$GeomVert
};
var zpp_$nape_geom_ZPP_$GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
$hxClasses["zpp_nape.geom.ZPP_GeomPoly"] = zpp_$nape_geom_ZPP_$GeomPoly;
zpp_$nape_geom_ZPP_$GeomPoly.__name__ = true;
zpp_$nape_geom_ZPP_$GeomPoly.prototype = {
	__class__: zpp_$nape_geom_ZPP_$GeomPoly
};
var zpp_$nape_geom_ZPP_$GeomVertexIterator = function() {
	this.next = null;
	this.outer = null;
	this.forward = false;
	this.first = false;
	this.start = null;
	this.ptr = null;
	zpp_$nape_geom_ZPP_$GeomVertexIterator.internal = true;
	this.outer = new nape_geom_GeomVertexIterator();
	zpp_$nape_geom_ZPP_$GeomVertexIterator.internal = false;
};
$hxClasses["zpp_nape.geom.ZPP_GeomVertexIterator"] = zpp_$nape_geom_ZPP_$GeomVertexIterator;
zpp_$nape_geom_ZPP_$GeomVertexIterator.__name__ = true;
zpp_$nape_geom_ZPP_$GeomVertexIterator.get = function(poly,forward) {
	var ret;
	if(zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$GeomVertexIterator(); else {
		ret = zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.outer.zpp_inner = ret;
	ret.ptr = poly;
	ret.forward = forward;
	ret.start = poly;
	ret.first = poly != null;
	return ret.outer;
};
zpp_$nape_geom_ZPP_$GeomVertexIterator.prototype = {
	free: function() {
		this.outer.zpp_inner = null;
		this.ptr = this.start = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$GeomVertexIterator
};
var zpp_$nape_geom_ZPP_$MarchSpan = function() {
	this.next = null;
	this.out = false;
	this.rank = 0;
	this.parent = null;
	this.parent = this;
};
$hxClasses["zpp_nape.geom.ZPP_MarchSpan"] = zpp_$nape_geom_ZPP_$MarchSpan;
zpp_$nape_geom_ZPP_$MarchSpan.__name__ = true;
zpp_$nape_geom_ZPP_$MarchSpan.prototype = {
	free: function() {
		this.parent = this;
	}
	,alloc: function() {
		this.out = false;
		this.rank = 0;
	}
	,__class__: zpp_$nape_geom_ZPP_$MarchSpan
};
var zpp_$nape_geom_ZPP_$MarchPair = function() {
	this.next = null;
	this.spanr = null;
	this.span2 = null;
	this.span1 = null;
	this.pd = null;
	this.okeyr = 0;
	this.keyr = 0;
	this.pr = null;
	this.okey2 = 0;
	this.key2 = 0;
	this.p2 = null;
	this.okey1 = 0;
	this.key1 = 0;
	this.p1 = null;
};
$hxClasses["zpp_nape.geom.ZPP_MarchPair"] = zpp_$nape_geom_ZPP_$MarchPair;
zpp_$nape_geom_ZPP_$MarchPair.__name__ = true;
zpp_$nape_geom_ZPP_$MarchPair.prototype = {
	free: function() {
		this.p1 = this.p2 = this.pr = this.pd = null;
		this.span1 = this.span2 = this.spanr = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$MarchPair
};
var zpp_$nape_geom_ZPP_$MarchingSquares = function() {
};
$hxClasses["zpp_nape.geom.ZPP_MarchingSquares"] = zpp_$nape_geom_ZPP_$MarchingSquares;
zpp_$nape_geom_ZPP_$MarchingSquares.__name__ = true;
zpp_$nape_geom_ZPP_$MarchingSquares.run = function(iso,bx0,by0,bx1,by1,cell,quality,combine,ret) {
	var xp;
	xp = (bx1 - bx0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.x;
		return $r;
	}(this));
	var xn = xp | 0;
	var yp;
	yp = (by1 - by0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.y;
		return $r;
	}(this));
	var yn = yp | 0;
	if(xp != xn) xn++;
	if(yp != yn) yn++;
	if(combine) {
		if(zpp_$nape_geom_ZPP_$MarchingSquares.map == null) zpp_$nape_geom_ZPP_$MarchingSquares.map = new zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair(xn,yn); else zpp_$nape_geom_ZPP_$MarchingSquares.map.resize(xn,yn,null);
	}
	if(zpp_$nape_geom_ZPP_$MarchingSquares.isos == null) zpp_$nape_geom_ZPP_$MarchingSquares.isos = new zpp_$nape_util_ZNPArray2_$Float(xn + 1,yn + 1); else zpp_$nape_geom_ZPP_$MarchingSquares.isos.resize(xn + 1,yn + 1,0);
	var _g1 = 0;
	var _g = yn + 1;
	while(_g1 < _g) {
		var y = _g1++;
		var yc;
		if(y == 0) yc = by0; else if(y <= yn) yc = by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * y; else yc = by1;
		var _g3 = 0;
		var _g2 = xn + 1;
		while(_g3 < _g2) {
			var x = _g3++;
			var xc;
			if(x == 0) xc = bx0; else if(x <= xn) xc = bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * x; else xc = bx1;
			zpp_$nape_geom_ZPP_$MarchingSquares.isos.set(x,y,iso(xc,yc));
		}
	}
	if(zpp_$nape_geom_ZPP_$MarchingSquares.ints == null) zpp_$nape_geom_ZPP_$MarchingSquares.ints = new zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert(xn + 1,(yn << 1) + 1); else zpp_$nape_geom_ZPP_$MarchingSquares.ints.resize(xn + 1,(yn << 1) + 1,null);
	var spans = null;
	if(combine) {
		if(zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool == null) spans = new zpp_$nape_geom_ZPP_$MarchSpan(); else {
			spans = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool;
			zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = spans.next;
			spans.next = null;
		}
		spans.out = false;
		spans.rank = 0;
	}
	var py = by0;
	var _g4 = 0;
	while(_g4 < yn) {
		var y1 = _g4++;
		var y0 = py;
		var y11;
		if(y1 == yn - 1) y11 = by1; else y11 = by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * (y1 + 1);
		py = y11;
		var px = bx0;
		var pre = null;
		var _g11 = 0;
		while(_g11 < xn) {
			var x1 = _g11++;
			var x0 = px;
			var x11;
			if(x1 == xn - 1) x11 = bx1; else x11 = bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * (x1 + 1);
			px = x11;
			var fstx = x1 == 0 || !combine;
			var fsty = y1 == 0 || !combine;
			var sndx = x1 == xn - 1 || !combine;
			var sndy = y1 == yn - 1 || !combine;
			var pp = zpp_$nape_geom_ZPP_$MarchingSquares.me.marchSquare(iso,zpp_$nape_geom_ZPP_$MarchingSquares.isos,zpp_$nape_geom_ZPP_$MarchingSquares.ints,x0,y0,x11,y11,x1,y1,fstx,fsty,sndx,sndy,quality);
			if(pp == null) {
				pre = null;
				continue;
			}
			if(combine) {
				var pd;
				if(pp.p2 != null && pp.okey2 != 14) pd = pp.p2; else pd = pp.p1;
				if(((pd == pp.p2?pp.okey2:pp.okey1) & 128) == 0) pp.pd = pd.prev; else pp.pd = pd.prev.prev;
				zpp_$nape_geom_ZPP_$MarchingSquares.map.set(x1,y1,pp);
				if(pre != null && zpp_$nape_geom_ZPP_$MarchingSquares.me.combLeft(pp.key1)) {
					zpp_$nape_geom_ZPP_$MarchingSquares.me.combLR(pre,pp);
					pp.span1 = pre.spanr;
				} else {
					if(zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool == null) pp.span1 = new zpp_$nape_geom_ZPP_$MarchSpan(); else {
						pp.span1 = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool;
						zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = pp.span1.next;
						pp.span1.next = null;
					}
					pp.span1.alloc();
					pp.span1.next = spans;
					spans = pp.span1;
				}
				if(pp.p2 != null) {
					if(zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool == null) pp.span2 = new zpp_$nape_geom_ZPP_$MarchSpan(); else {
						pp.span2 = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool;
						zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = pp.span2.next;
						pp.span2.next = null;
					}
					pp.span2.alloc();
					pp.span2.next = spans;
					spans = pp.span2;
					pp.spanr = pp.span2;
				} else pp.spanr = pp.span1;
				if(zpp_$nape_geom_ZPP_$MarchingSquares.me.combRight(pp.keyr)) pre = pp; else pre = null;
			} else {
				zpp_$nape_geom_ZPP_$MarchingSquares.me.output(ret,pp.p1);
				if(pp.p2 != null) zpp_$nape_geom_ZPP_$MarchingSquares.me.output(ret,pp.p2);
				var o = pp;
				o.p1 = o.p2 = o.pr = o.pd = null;
				o.span1 = o.span2 = o.spanr = null;
				o.next = zpp_$nape_geom_ZPP_$MarchPair.zpp_pool;
				zpp_$nape_geom_ZPP_$MarchPair.zpp_pool = o;
			}
		}
	}
	if(!combine) return;
	var _g5 = 1;
	while(_g5 < yn) {
		var y2 = _g5++;
		var pre1 = null;
		var _g12 = 0;
		while(_g12 < xn) {
			var x2 = _g12++;
			var b = zpp_$nape_geom_ZPP_$MarchingSquares.map.get(x2,y2);
			if(b == null) {
				pre1 = null;
				continue;
			}
			var bkey;
			if(b.p2 != null && b.okey2 == 14) bkey = b.okey2; else bkey = b.okey1;
			if(!zpp_$nape_geom_ZPP_$MarchingSquares.me.combUp(bkey)) {
				pre1 = null;
				continue;
			}
			var a = zpp_$nape_geom_ZPP_$MarchingSquares.map.get(x2,y2 - 1);
			if(a == null) {
				pre1 = null;
				continue;
			}
			var akey;
			if(a.p2 != null && a.okey2 == 56) akey = a.okey2; else akey = a.okey1;
			if(!zpp_$nape_geom_ZPP_$MarchingSquares.me.combDown(akey)) {
				pre1 = null;
				continue;
			}
			var ad;
			if(a.p2 != null && a.okey2 == 56) ad = a.span2; else ad = a.span1;
			var bu;
			if(b.p2 != null && b.okey2 == 14) bu = b.span2; else bu = b.span1;
			if((ad == ad.parent?ad:(function($this) {
				var $r;
				var obj = ad;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				$r = obj;
				return $r;
			}(this))) == (bu == bu.parent?bu:(function($this) {
				var $r;
				var obj1 = bu;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				$r = obj1;
				return $r;
			}(this)))) {
				if(pre1 != bu) zpp_$nape_geom_ZPP_$MarchingSquares.me.combUD_virtual(a,b);
			} else {
				var xr;
				if(ad == ad.parent) xr = ad; else {
					var obj2 = ad;
					var stack2 = null;
					while(obj2 != obj2.parent) {
						var nxt4 = obj2.parent;
						obj2.parent = stack2;
						stack2 = obj2;
						obj2 = nxt4;
					}
					while(stack2 != null) {
						var nxt5 = stack2.parent;
						stack2.parent = obj2;
						stack2 = nxt5;
					}
					xr = obj2;
				}
				var yr;
				if(bu == bu.parent) yr = bu; else {
					var obj3 = bu;
					var stack3 = null;
					while(obj3 != obj3.parent) {
						var nxt6 = obj3.parent;
						obj3.parent = stack3;
						stack3 = obj3;
						obj3 = nxt6;
					}
					while(stack3 != null) {
						var nxt7 = stack3.parent;
						stack3.parent = obj3;
						stack3 = nxt7;
					}
					yr = obj3;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
				zpp_$nape_geom_ZPP_$MarchingSquares.me.combUD(a,b);
			}
			var key;
			if(bu == b.span2) key = b.okey2; else key = b.okey1;
			if((key & 4) != 0) pre1 = bu; else pre1 = null;
		}
	}
	var _g6 = 0;
	while(_g6 < yn) {
		var y3 = _g6++;
		var _g13 = 0;
		while(_g13 < xn) {
			var x3 = _g13++;
			var p = zpp_$nape_geom_ZPP_$MarchingSquares.map.get(x3,y3);
			if(p == null) continue;
			var root;
			if(p.span1 == p.span1.parent) root = p.span1; else {
				var obj4 = p.span1;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(!root.out) {
				root.out = true;
				zpp_$nape_geom_ZPP_$MarchingSquares.me.output(ret,p.p1);
			}
			if(p.p2 != null) {
				if(p.span2 == p.span2.parent) root = p.span2; else {
					var obj5 = p.span2;
					var stack5 = null;
					while(obj5 != obj5.parent) {
						var nxt10 = obj5.parent;
						obj5.parent = stack5;
						stack5 = obj5;
						obj5 = nxt10;
					}
					while(stack5 != null) {
						var nxt11 = stack5.parent;
						stack5.parent = obj5;
						stack5 = nxt11;
					}
					root = obj5;
				}
				if(!root.out) {
					root.out = true;
					zpp_$nape_geom_ZPP_$MarchingSquares.me.output(ret,p.p2);
				}
			}
			var o1 = p;
			o1.p1 = o1.p2 = o1.pr = o1.pd = null;
			o1.span1 = o1.span2 = o1.spanr = null;
			o1.next = zpp_$nape_geom_ZPP_$MarchPair.zpp_pool;
			zpp_$nape_geom_ZPP_$MarchPair.zpp_pool = o1;
			zpp_$nape_geom_ZPP_$MarchingSquares.map.set(x3,y3,null);
		}
	}
	while(spans != null) {
		var t = spans;
		spans = t.next;
		var o2 = t;
		o2.parent = o2;
		o2.next = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool;
		zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = o2;
	}
};
zpp_$nape_geom_ZPP_$MarchingSquares.ISO = function(iso,x,y) {
	return iso(x,y);
};
zpp_$nape_geom_ZPP_$MarchingSquares.prototype = {
	output: function(ret,poly) {
		if(poly == null || poly.next == poly || poly.next == poly.prev?true:(function($this) {
			var $r;
			var a;
			{
				var area = 0.0;
				var F = poly;
				var L = poly;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
				a = area * 0.5;
			}
			$r = a * a < nape_Config.epsilon * nape_Config.epsilon;
			return $r;
		}(this))) {
			while(!(poly == null)) if(poly != null && poly.prev == poly) {
				poly.next = poly.prev = null;
				poly = poly = null;
			} else {
				var retnodes = poly.next;
				poly.prev.next = poly.next;
				poly.next.prev = poly.prev;
				poly.next = poly.prev = null;
				poly = null;
				poly = retnodes;
			}
			return;
		}
		var gp = nape_geom_GeomPoly.get();
		gp.zpp_inner.vertices = poly;
		if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
	}
	,linkright: function(poly,key) {
		var kind = key & 7;
		if(kind == 0) return poly; else if(kind == 3) return poly.next.next; else return poly.next;
	}
	,linkleft: function(poly,key) {
		if((key & 1) == 0) return poly.prev; else return poly;
	}
	,linkdown: function(poly,key) {
		if((key & 128) == 0) return poly.prev; else return poly.prev.prev;
	}
	,linkup: function(poly,key) {
		return poly;
	}
	,combLR: function(a,b) {
		var ap = this.linkright(a.pr,a.okeyr);
		var bp = this.linkleft(b.p1,b.okey1);
		var ap2 = ap.next;
		var bp2 = bp.prev;
		if((a.keyr & 4) != 0) {
			if(b.pr == b.p1) b.pr = ap.prev;
			b.p1 = ap.prev;
			ap.prev.next = bp.next;
			bp.next.prev = ap.prev;
			var o = ap;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		} else {
			ap.next = bp.next;
			bp.next.prev = ap;
		}
		var o1 = bp;
		if(o1.wrap != null) {
			o1.wrap.zpp_inner._inuse = false;
			o1.wrap.dispose();
			o1.wrap = null;
		}
		o1.prev = o1.next = null;
		o1.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o1;
		if((a.keyr & 16) != 0) {
			b.pd = ap2.next;
			ap2.next.prev = bp2.prev;
			bp2.prev.next = ap2.next;
			var o2 = ap2;
			if(o2.wrap != null) {
				o2.wrap.zpp_inner._inuse = false;
				o2.wrap.dispose();
				o2.wrap = null;
			}
			o2.prev = o2.next = null;
			o2.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o2;
		} else {
			ap2.prev = bp2.prev;
			bp2.prev.next = ap2;
		}
		var o3 = bp2;
		if(o3.wrap != null) {
			o3.wrap.zpp_inner._inuse = false;
			o3.wrap.dispose();
			o3.wrap = null;
		}
		o3.prev = o3.next = null;
		o3.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o3;
	}
	,combUD: function(a,b) {
		var ad;
		if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
		var bu;
		if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		bp.next = ap.next;
		ap.next.prev = bp;
		var o = ap;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		bp2.prev = ap2.prev;
		ap2.prev.next = bp2;
		if(ap2 == a.p1) a.p1 = bp2;
		var o1 = ap2;
		if(o1.wrap != null) {
			o1.wrap.zpp_inner._inuse = false;
			o1.wrap.dispose();
			o1.wrap = null;
		}
		o1.prev = o1.next = null;
		o1.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o1;
	}
	,combUD_virtual: function(a,b) {
		var ad;
		if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
		var bu;
		if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		ap.forced = bp.forced = ap2.forced = bp2.forced = true;
	}
	,combLeft: function(key) {
		var flag = key & 1 | (key & 192) >> 5;
		return this.comb(flag);
	}
	,combRight: function(key) {
		var flag = (key & 28) >> 2;
		return this.comb(flag);
	}
	,combUp: function(key) {
		var flag = key & 7;
		return this.comb(flag);
	}
	,combDown: function(key) {
		var flag = (key & 112) >> 4;
		return this.comb(flag);
	}
	,comb: function(flag) {
		var cnt = 0;
		if((flag & 1) != 0) cnt++;
		if((flag & 2) != 0) cnt++;
		if((flag & 4) != 0) cnt++;
		return cnt >= 2;
	}
	,marchSquare: function(iso,isos,ints,x0,y0,x1,y1,xn,yn,fstx,fsty,sndx,sndy,quality) {
		var key = 0;
		var v0 = isos.list[yn * isos.width + xn];
		if(v0 < 0) key |= 8;
		var v1 = isos.list[yn * isos.width + (xn + 1)];
		if(v1 < 0) key |= 4;
		var v2 = isos.list[(yn + 1) * isos.width + (xn + 1)];
		if(v2 < 0) key |= 2;
		var v3 = isos.list[(yn + 1) * isos.width + xn];
		if(v3 < 0) key |= 1;
		if(key == 0) return null; else {
			var ret;
			if(zpp_$nape_geom_ZPP_$MarchPair.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$MarchPair(); else {
				ret = zpp_$nape_geom_ZPP_$MarchPair.zpp_pool;
				zpp_$nape_geom_ZPP_$MarchPair.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			if(key != 10 && key != 5) {
				var val = zpp_$nape_geom_ZPP_$MarchingSquares.look_march[key];
				ret.okey1 = val;
				var _g = 0;
				while(_g < 8) {
					var i = _g++;
					if((val & 1 << i) != 0) {
						var p = null;
						if(i == 0) {
							p = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
							if(fstx || fsty) p.forced = true;
						} else if(i == 2) {
							p = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
							if(sndx || fsty) p.forced = true;
						} else if(i == 4) {
							p = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
							if(sndx || sndy) p.forced = true;
						} else if(i == 6) {
							p = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
							if(fstx || sndy) p.forced = true;
						} else if(i == 1) {
							p = ints.list[(yn << 1) * ints.width + xn];
							if(p == null) {
								p = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
								ints.list[(yn << 1) * ints.width + xn] = p;
							} else p = zpp_$nape_geom_ZPP_$GeomVert.get(p.x,p.y);
							if(fsty) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
							}
						} else if(i == 5) {
							p = ints.list[((yn << 1) + 2) * ints.width + xn];
							if(p == null) {
								p = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
								ints.list[((yn << 1) + 2) * ints.width + xn] = p;
							} else p = zpp_$nape_geom_ZPP_$GeomVert.get(p.x,p.y);
							if(sndy) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
							}
						} else if(i == 3) {
							p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							if(p == null) {
								p = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
							} else p = zpp_$nape_geom_ZPP_$GeomVert.get(p.x,p.y);
							if(sndx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
							}
						} else {
							p = ints.list[((yn << 1) + 1) * ints.width + xn];
							if(p == null) {
								p = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + xn] = p;
							} else p = zpp_$nape_geom_ZPP_$GeomVert.get(p.x,p.y);
							if(fstx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
							}
						}
						var obj = p;
						if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
							obj.prev = ret.p1;
							obj.next = ret.p1.next;
							ret.p1.next.prev = obj;
							ret.p1.next = obj;
						}
						ret.p1 = obj;
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val;
				if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
					val = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val == 0) ret = null; else {
					ret.pr = ret.p1;
					ret.okeyr = ret.okey1;
					ret.keyr = ret.key1;
				}
			} else {
				var mid = iso(0.5 * (x0 + x1),0.5 * (y0 + y1)) < 0;
				if(key == 10) {
					if(mid) {
						var val1 = 187;
						ret.okey1 = val1;
						var _g1 = 0;
						while(_g1 < 8) {
							var i1 = _g1++;
							if((val1 & 1 << i1) != 0) {
								var p1 = null;
								if(i1 == 0) {
									p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
									if(fstx || fsty) p1.forced = true;
								} else if(i1 == 2) {
									p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
									if(sndx || fsty) p1.forced = true;
								} else if(i1 == 4) {
									p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
									if(sndx || sndy) p1.forced = true;
								} else if(i1 == 6) {
									p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
									if(fstx || sndy) p1.forced = true;
								} else if(i1 == 1) {
									p1 = ints.list[(yn << 1) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p1;
									} else p1 = zpp_$nape_geom_ZPP_$GeomVert.get(p1.x,p1.y);
									if(fsty) p1.forced = true;
									if(p1.x == x0 || p1.x == x1) {
										if(p1.x == x0 && (val1 & 1) != 0 || p1.x == x1 && (val1 & 4) != 0) val1 ^= 2;
									}
								} else if(i1 == 5) {
									p1 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p1;
									} else p1 = zpp_$nape_geom_ZPP_$GeomVert.get(p1.x,p1.y);
									if(sndy) p1.forced = true;
									if(p1.x == x0 || p1.x == x1) {
										if(p1.x == x0 && (val1 & 64) != 0 || p1.x == x1 && (val1 & 16) != 0) val1 ^= 32;
									}
								} else if(i1 == 3) {
									p1 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p1 == null) {
										p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p1;
									} else p1 = zpp_$nape_geom_ZPP_$GeomVert.get(p1.x,p1.y);
									if(sndx) p1.forced = true;
									if(p1.y == y0 || p1.y == y1) {
										if(p1.y == y0 && (val1 & 4) != 0 || p1.y == y1 && (val1 & 16) != 0) val1 ^= 8;
									}
								} else {
									p1 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p1;
									} else p1 = zpp_$nape_geom_ZPP_$GeomVert.get(p1.x,p1.y);
									if(fstx) p1.forced = true;
									if(p1.y == y0 || p1.y == y1) {
										if(p1.y == y0 && (val1 & 1) != 0 || p1.y == y1 && (val1 & 64) != 0) val1 ^= 128;
									}
								}
								var obj1 = p1;
								if(ret.p1 == null) ret.p1 = obj1.prev = obj1.next = obj1; else {
									obj1.prev = ret.p1;
									obj1.next = ret.p1.next;
									ret.p1.next.prev = obj1;
									ret.p1.next = obj1;
								}
								ret.p1 = obj1;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val1;
						if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
							val1 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val1 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					} else {
						var val2 = 131;
						ret.okey1 = val2;
						var _g2 = 0;
						while(_g2 < 8) {
							var i2 = _g2++;
							if((val2 & 1 << i2) != 0) {
								var p2 = null;
								if(i2 == 0) {
									p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
									if(fstx || fsty) p2.forced = true;
								} else if(i2 == 2) {
									p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
									if(sndx || fsty) p2.forced = true;
								} else if(i2 == 4) {
									p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
									if(sndx || sndy) p2.forced = true;
								} else if(i2 == 6) {
									p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
									if(fstx || sndy) p2.forced = true;
								} else if(i2 == 1) {
									p2 = ints.list[(yn << 1) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p2;
									} else p2 = zpp_$nape_geom_ZPP_$GeomVert.get(p2.x,p2.y);
									if(fsty) p2.forced = true;
									if(p2.x == x0 || p2.x == x1) {
										if(p2.x == x0 && (val2 & 1) != 0 || p2.x == x1 && (val2 & 4) != 0) val2 ^= 2;
									}
								} else if(i2 == 5) {
									p2 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p2;
									} else p2 = zpp_$nape_geom_ZPP_$GeomVert.get(p2.x,p2.y);
									if(sndy) p2.forced = true;
									if(p2.x == x0 || p2.x == x1) {
										if(p2.x == x0 && (val2 & 64) != 0 || p2.x == x1 && (val2 & 16) != 0) val2 ^= 32;
									}
								} else if(i2 == 3) {
									p2 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p2 == null) {
										p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p2;
									} else p2 = zpp_$nape_geom_ZPP_$GeomVert.get(p2.x,p2.y);
									if(sndx) p2.forced = true;
									if(p2.y == y0 || p2.y == y1) {
										if(p2.y == y0 && (val2 & 4) != 0 || p2.y == y1 && (val2 & 16) != 0) val2 ^= 8;
									}
								} else {
									p2 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p2;
									} else p2 = zpp_$nape_geom_ZPP_$GeomVert.get(p2.x,p2.y);
									if(fstx) p2.forced = true;
									if(p2.y == y0 || p2.y == y1) {
										if(p2.y == y0 && (val2 & 1) != 0 || p2.y == y1 && (val2 & 64) != 0) val2 ^= 128;
									}
								}
								var obj2 = p2;
								if(ret.p1 == null) ret.p1 = obj2.prev = obj2.next = obj2; else {
									obj2.prev = ret.p1;
									obj2.next = ret.p1.next;
									ret.p1.next.prev = obj2;
									ret.p1.next = obj2;
								}
								ret.p1 = obj2;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val2;
						if(val2 == 1 || val2 == 4 || val2 == 16 || val2 == 64 || val2 == 3 || val2 == 12 || val2 == 48 || val2 == 192 || val2 == 129 || val2 == 6 || val2 == 24 || val2 == 96 || val2 == 5 || val2 == 20 || val2 == 80 || val2 == 65 || val2 == 17 || val2 == 68) {
							val2 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val2 != 0) {
							var val3 = 56;
							ret.okey2 = val3;
							var _g3 = 0;
							while(_g3 < 8) {
								var i3 = _g3++;
								if((val3 & 1 << i3) != 0) {
									var p3 = null;
									if(i3 == 0) {
										p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
										if(fstx || fsty) p3.forced = true;
									} else if(i3 == 2) {
										p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
										if(sndx || fsty) p3.forced = true;
									} else if(i3 == 4) {
										p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
										if(sndx || sndy) p3.forced = true;
									} else if(i3 == 6) {
										p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
										if(fstx || sndy) p3.forced = true;
									} else if(i3 == 1) {
										p3 = ints.list[(yn << 1) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p3;
										} else p3 = zpp_$nape_geom_ZPP_$GeomVert.get(p3.x,p3.y);
										if(fsty) p3.forced = true;
										if(p3.x == x0 || p3.x == x1) {
											if(p3.x == x0 && (val3 & 1) != 0 || p3.x == x1 && (val3 & 4) != 0) val3 ^= 2;
										}
									} else if(i3 == 5) {
										p3 = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p3;
										} else p3 = zpp_$nape_geom_ZPP_$GeomVert.get(p3.x,p3.y);
										if(sndy) p3.forced = true;
										if(p3.x == x0 || p3.x == x1) {
											if(p3.x == x0 && (val3 & 64) != 0 || p3.x == x1 && (val3 & 16) != 0) val3 ^= 32;
										}
									} else if(i3 == 3) {
										p3 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p3 == null) {
											p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p3;
										} else p3 = zpp_$nape_geom_ZPP_$GeomVert.get(p3.x,p3.y);
										if(sndx) p3.forced = true;
										if(p3.y == y0 || p3.y == y1) {
											if(p3.y == y0 && (val3 & 4) != 0 || p3.y == y1 && (val3 & 16) != 0) val3 ^= 8;
										}
									} else {
										p3 = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p3;
										} else p3 = zpp_$nape_geom_ZPP_$GeomVert.get(p3.x,p3.y);
										if(fstx) p3.forced = true;
										if(p3.y == y0 || p3.y == y1) {
											if(p3.y == y0 && (val3 & 1) != 0 || p3.y == y1 && (val3 & 64) != 0) val3 ^= 128;
										}
									}
									var obj3 = p3;
									if(ret.p2 == null) ret.p2 = obj3.prev = obj3.next = obj3; else {
										obj3.prev = ret.p2;
										obj3.next = ret.p2.next;
										ret.p2.next.prev = obj3;
										ret.p2.next = obj3;
									}
									ret.p2 = obj3;
								}
							}
							ret.p2 = ret.p2.next;
							ret.key2 = val3;
							if(val3 == 1 || val3 == 4 || val3 == 16 || val3 == 64 || val3 == 3 || val3 == 12 || val3 == 48 || val3 == 192 || val3 == 129 || val3 == 6 || val3 == 24 || val3 == 96 || val3 == 5 || val3 == 20 || val3 == 80 || val3 == 65 || val3 == 17 || val3 == 68) {
								val3 = 0;
								ret.key2 = 0;
								ret.p2 = null;
							}
							if(val3 == 0) {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							} else {
								ret.pr = ret.p2;
								ret.okeyr = ret.okey2;
								ret.keyr = ret.key2;
							}
						} else {
							var val4 = 56;
							ret.okey1 = val4;
							var _g4 = 0;
							while(_g4 < 8) {
								var i4 = _g4++;
								if((val4 & 1 << i4) != 0) {
									var p4 = null;
									if(i4 == 0) {
										p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
										if(fstx || fsty) p4.forced = true;
									} else if(i4 == 2) {
										p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
										if(sndx || fsty) p4.forced = true;
									} else if(i4 == 4) {
										p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
										if(sndx || sndy) p4.forced = true;
									} else if(i4 == 6) {
										p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
										if(fstx || sndy) p4.forced = true;
									} else if(i4 == 1) {
										p4 = ints.list[(yn << 1) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p4;
										} else p4 = zpp_$nape_geom_ZPP_$GeomVert.get(p4.x,p4.y);
										if(fsty) p4.forced = true;
										if(p4.x == x0 || p4.x == x1) {
											if(p4.x == x0 && (val4 & 1) != 0 || p4.x == x1 && (val4 & 4) != 0) val4 ^= 2;
										}
									} else if(i4 == 5) {
										p4 = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p4;
										} else p4 = zpp_$nape_geom_ZPP_$GeomVert.get(p4.x,p4.y);
										if(sndy) p4.forced = true;
										if(p4.x == x0 || p4.x == x1) {
											if(p4.x == x0 && (val4 & 64) != 0 || p4.x == x1 && (val4 & 16) != 0) val4 ^= 32;
										}
									} else if(i4 == 3) {
										p4 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p4 == null) {
											p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p4;
										} else p4 = zpp_$nape_geom_ZPP_$GeomVert.get(p4.x,p4.y);
										if(sndx) p4.forced = true;
										if(p4.y == y0 || p4.y == y1) {
											if(p4.y == y0 && (val4 & 4) != 0 || p4.y == y1 && (val4 & 16) != 0) val4 ^= 8;
										}
									} else {
										p4 = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p4;
										} else p4 = zpp_$nape_geom_ZPP_$GeomVert.get(p4.x,p4.y);
										if(fstx) p4.forced = true;
										if(p4.y == y0 || p4.y == y1) {
											if(p4.y == y0 && (val4 & 1) != 0 || p4.y == y1 && (val4 & 64) != 0) val4 ^= 128;
										}
									}
									var obj4 = p4;
									if(ret.p1 == null) ret.p1 = obj4.prev = obj4.next = obj4; else {
										obj4.prev = ret.p1;
										obj4.next = ret.p1.next;
										ret.p1.next.prev = obj4;
										ret.p1.next = obj4;
									}
									ret.p1 = obj4;
								}
							}
							ret.p1 = ret.p1.next;
							ret.key1 = val4;
							if(val4 == 1 || val4 == 4 || val4 == 16 || val4 == 64 || val4 == 3 || val4 == 12 || val4 == 48 || val4 == 192 || val4 == 129 || val4 == 6 || val4 == 24 || val4 == 96 || val4 == 5 || val4 == 20 || val4 == 80 || val4 == 65 || val4 == 17 || val4 == 68) {
								val4 = 0;
								ret.key1 = 0;
								ret.p1 = null;
							}
							if(val4 == 0) ret = null; else {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							}
						}
					}
				} else if(mid) {
					var val5 = 238;
					ret.okey1 = val5;
					var _g5 = 0;
					while(_g5 < 8) {
						var i5 = _g5++;
						if((val5 & 1 << i5) != 0) {
							var p5 = null;
							if(i5 == 0) {
								p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
								if(fstx || fsty) p5.forced = true;
							} else if(i5 == 2) {
								p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
								if(sndx || fsty) p5.forced = true;
							} else if(i5 == 4) {
								p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
								if(sndx || sndy) p5.forced = true;
							} else if(i5 == 6) {
								p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
								if(fstx || sndy) p5.forced = true;
							} else if(i5 == 1) {
								p5 = ints.list[(yn << 1) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p5;
								} else p5 = zpp_$nape_geom_ZPP_$GeomVert.get(p5.x,p5.y);
								if(fsty) p5.forced = true;
								if(p5.x == x0 || p5.x == x1) {
									if(p5.x == x0 && (val5 & 1) != 0 || p5.x == x1 && (val5 & 4) != 0) val5 ^= 2;
								}
							} else if(i5 == 5) {
								p5 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p5;
								} else p5 = zpp_$nape_geom_ZPP_$GeomVert.get(p5.x,p5.y);
								if(sndy) p5.forced = true;
								if(p5.x == x0 || p5.x == x1) {
									if(p5.x == x0 && (val5 & 64) != 0 || p5.x == x1 && (val5 & 16) != 0) val5 ^= 32;
								}
							} else if(i5 == 3) {
								p5 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p5 == null) {
									p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p5;
								} else p5 = zpp_$nape_geom_ZPP_$GeomVert.get(p5.x,p5.y);
								if(sndx) p5.forced = true;
								if(p5.y == y0 || p5.y == y1) {
									if(p5.y == y0 && (val5 & 4) != 0 || p5.y == y1 && (val5 & 16) != 0) val5 ^= 8;
								}
							} else {
								p5 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p5;
								} else p5 = zpp_$nape_geom_ZPP_$GeomVert.get(p5.x,p5.y);
								if(fstx) p5.forced = true;
								if(p5.y == y0 || p5.y == y1) {
									if(p5.y == y0 && (val5 & 1) != 0 || p5.y == y1 && (val5 & 64) != 0) val5 ^= 128;
								}
							}
							var obj5 = p5;
							if(ret.p1 == null) ret.p1 = obj5.prev = obj5.next = obj5; else {
								obj5.prev = ret.p1;
								obj5.next = ret.p1.next;
								ret.p1.next.prev = obj5;
								ret.p1.next = obj5;
							}
							ret.p1 = obj5;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val5;
					if(val5 == 1 || val5 == 4 || val5 == 16 || val5 == 64 || val5 == 3 || val5 == 12 || val5 == 48 || val5 == 192 || val5 == 129 || val5 == 6 || val5 == 24 || val5 == 96 || val5 == 5 || val5 == 20 || val5 == 80 || val5 == 65 || val5 == 17 || val5 == 68) {
						val5 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val5 == 0) ret = null; else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				} else {
					var val6 = 224;
					ret.okey1 = val6;
					var _g6 = 0;
					while(_g6 < 8) {
						var i6 = _g6++;
						if((val6 & 1 << i6) != 0) {
							var p6 = null;
							if(i6 == 0) {
								p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
								if(fstx || fsty) p6.forced = true;
							} else if(i6 == 2) {
								p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
								if(sndx || fsty) p6.forced = true;
							} else if(i6 == 4) {
								p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
								if(sndx || sndy) p6.forced = true;
							} else if(i6 == 6) {
								p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
								if(fstx || sndy) p6.forced = true;
							} else if(i6 == 1) {
								p6 = ints.list[(yn << 1) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p6;
								} else p6 = zpp_$nape_geom_ZPP_$GeomVert.get(p6.x,p6.y);
								if(fsty) p6.forced = true;
								if(p6.x == x0 || p6.x == x1) {
									if(p6.x == x0 && (val6 & 1) != 0 || p6.x == x1 && (val6 & 4) != 0) val6 ^= 2;
								}
							} else if(i6 == 5) {
								p6 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p6;
								} else p6 = zpp_$nape_geom_ZPP_$GeomVert.get(p6.x,p6.y);
								if(sndy) p6.forced = true;
								if(p6.x == x0 || p6.x == x1) {
									if(p6.x == x0 && (val6 & 64) != 0 || p6.x == x1 && (val6 & 16) != 0) val6 ^= 32;
								}
							} else if(i6 == 3) {
								p6 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p6 == null) {
									p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p6;
								} else p6 = zpp_$nape_geom_ZPP_$GeomVert.get(p6.x,p6.y);
								if(sndx) p6.forced = true;
								if(p6.y == y0 || p6.y == y1) {
									if(p6.y == y0 && (val6 & 4) != 0 || p6.y == y1 && (val6 & 16) != 0) val6 ^= 8;
								}
							} else {
								p6 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p6;
								} else p6 = zpp_$nape_geom_ZPP_$GeomVert.get(p6.x,p6.y);
								if(fstx) p6.forced = true;
								if(p6.y == y0 || p6.y == y1) {
									if(p6.y == y0 && (val6 & 1) != 0 || p6.y == y1 && (val6 & 64) != 0) val6 ^= 128;
								}
							}
							var obj6 = p6;
							if(ret.p1 == null) ret.p1 = obj6.prev = obj6.next = obj6; else {
								obj6.prev = ret.p1;
								obj6.next = ret.p1.next;
								ret.p1.next.prev = obj6;
								ret.p1.next = obj6;
							}
							ret.p1 = obj6;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val6;
					if(val6 == 1 || val6 == 4 || val6 == 16 || val6 == 64 || val6 == 3 || val6 == 12 || val6 == 48 || val6 == 192 || val6 == 129 || val6 == 6 || val6 == 24 || val6 == 96 || val6 == 5 || val6 == 20 || val6 == 80 || val6 == 65 || val6 == 17 || val6 == 68) {
						val6 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val6 != 0) {
						var val7 = 14;
						ret.okey2 = val7;
						var _g7 = 0;
						while(_g7 < 8) {
							var i7 = _g7++;
							if((val7 & 1 << i7) != 0) {
								var p7 = null;
								if(i7 == 0) {
									p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
									if(fstx || fsty) p7.forced = true;
								} else if(i7 == 2) {
									p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
									if(sndx || fsty) p7.forced = true;
								} else if(i7 == 4) {
									p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
									if(sndx || sndy) p7.forced = true;
								} else if(i7 == 6) {
									p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
									if(fstx || sndy) p7.forced = true;
								} else if(i7 == 1) {
									p7 = ints.list[(yn << 1) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p7;
									} else p7 = zpp_$nape_geom_ZPP_$GeomVert.get(p7.x,p7.y);
									if(fsty) p7.forced = true;
									if(p7.x == x0 || p7.x == x1) {
										if(p7.x == x0 && (val7 & 1) != 0 || p7.x == x1 && (val7 & 4) != 0) val7 ^= 2;
									}
								} else if(i7 == 5) {
									p7 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p7;
									} else p7 = zpp_$nape_geom_ZPP_$GeomVert.get(p7.x,p7.y);
									if(sndy) p7.forced = true;
									if(p7.x == x0 || p7.x == x1) {
										if(p7.x == x0 && (val7 & 64) != 0 || p7.x == x1 && (val7 & 16) != 0) val7 ^= 32;
									}
								} else if(i7 == 3) {
									p7 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p7 == null) {
										p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p7;
									} else p7 = zpp_$nape_geom_ZPP_$GeomVert.get(p7.x,p7.y);
									if(sndx) p7.forced = true;
									if(p7.y == y0 || p7.y == y1) {
										if(p7.y == y0 && (val7 & 4) != 0 || p7.y == y1 && (val7 & 16) != 0) val7 ^= 8;
									}
								} else {
									p7 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p7;
									} else p7 = zpp_$nape_geom_ZPP_$GeomVert.get(p7.x,p7.y);
									if(fstx) p7.forced = true;
									if(p7.y == y0 || p7.y == y1) {
										if(p7.y == y0 && (val7 & 1) != 0 || p7.y == y1 && (val7 & 64) != 0) val7 ^= 128;
									}
								}
								var obj7 = p7;
								if(ret.p2 == null) ret.p2 = obj7.prev = obj7.next = obj7; else {
									obj7.prev = ret.p2;
									obj7.next = ret.p2.next;
									ret.p2.next.prev = obj7;
									ret.p2.next = obj7;
								}
								ret.p2 = obj7;
							}
						}
						ret.p2 = ret.p2.next;
						ret.key2 = val7;
						if(val7 == 1 || val7 == 4 || val7 == 16 || val7 == 64 || val7 == 3 || val7 == 12 || val7 == 48 || val7 == 192 || val7 == 129 || val7 == 6 || val7 == 24 || val7 == 96 || val7 == 5 || val7 == 20 || val7 == 80 || val7 == 65 || val7 == 17 || val7 == 68) {
							val7 = 0;
							ret.key2 = 0;
							ret.p2 = null;
						}
						if(val7 == 0) {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						} else {
							ret.pr = ret.p2;
							ret.okeyr = ret.okey2;
							ret.keyr = ret.key2;
						}
					} else {
						var val8 = 14;
						ret.okey1 = val8;
						var _g8 = 0;
						while(_g8 < 8) {
							var i8 = _g8++;
							if((val8 & 1 << i8) != 0) {
								var p8 = null;
								if(i8 == 0) {
									p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
									if(fstx || fsty) p8.forced = true;
								} else if(i8 == 2) {
									p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
									if(sndx || fsty) p8.forced = true;
								} else if(i8 == 4) {
									p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
									if(sndx || sndy) p8.forced = true;
								} else if(i8 == 6) {
									p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
									if(fstx || sndy) p8.forced = true;
								} else if(i8 == 1) {
									p8 = ints.list[(yn << 1) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p8;
									} else p8 = zpp_$nape_geom_ZPP_$GeomVert.get(p8.x,p8.y);
									if(fsty) p8.forced = true;
									if(p8.x == x0 || p8.x == x1) {
										if(p8.x == x0 && (val8 & 1) != 0 || p8.x == x1 && (val8 & 4) != 0) val8 ^= 2;
									}
								} else if(i8 == 5) {
									p8 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p8;
									} else p8 = zpp_$nape_geom_ZPP_$GeomVert.get(p8.x,p8.y);
									if(sndy) p8.forced = true;
									if(p8.x == x0 || p8.x == x1) {
										if(p8.x == x0 && (val8 & 64) != 0 || p8.x == x1 && (val8 & 16) != 0) val8 ^= 32;
									}
								} else if(i8 == 3) {
									p8 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p8 == null) {
										p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p8;
									} else p8 = zpp_$nape_geom_ZPP_$GeomVert.get(p8.x,p8.y);
									if(sndx) p8.forced = true;
									if(p8.y == y0 || p8.y == y1) {
										if(p8.y == y0 && (val8 & 4) != 0 || p8.y == y1 && (val8 & 16) != 0) val8 ^= 8;
									}
								} else {
									p8 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p8;
									} else p8 = zpp_$nape_geom_ZPP_$GeomVert.get(p8.x,p8.y);
									if(fstx) p8.forced = true;
									if(p8.y == y0 || p8.y == y1) {
										if(p8.y == y0 && (val8 & 1) != 0 || p8.y == y1 && (val8 & 64) != 0) val8 ^= 128;
									}
								}
								var obj8 = p8;
								if(ret.p1 == null) ret.p1 = obj8.prev = obj8.next = obj8; else {
									obj8.prev = ret.p1;
									obj8.next = ret.p1.next;
									ret.p1.next.prev = obj8;
									ret.p1.next = obj8;
								}
								ret.p1 = obj8;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val8;
						if(val8 == 1 || val8 == 4 || val8 == 16 || val8 == 64 || val8 == 3 || val8 == 12 || val8 == 48 || val8 == 192 || val8 == 129 || val8 == 6 || val8 == 24 || val8 == 96 || val8 == 5 || val8 == 20 || val8 == 80 || val8 == 65 || val8 == 17 || val8 == 68) {
							val8 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val8 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					}
				}
			}
			return ret;
		}
	}
	,lerp: function(x0,x1,v0,v1) {
		if(v0 == 0) return x0; else if(v1 == 0) return x1; else {
			var dv = v0 - v1;
			var t;
			if(dv * dv < nape_Config.epsilon * nape_Config.epsilon) t = 0.5; else t = v0 / dv;
			if(t < 0) t = 0; else if(t > 1) t = 1;
			return x0 + t * (x1 - x0);
		}
	}
	,xlerp: function(x0,x1,y,v0,v1,iso,quality) {
		var xm = this.lerp(x0,x1,v0,v1);
		while(quality-- != 0 && x0 < xm && xm < x1) {
			var vm = iso(xm,y);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				x1 = xm;
				v1 = vm;
			} else {
				x0 = xm;
				v0 = vm;
			}
			xm = this.lerp(x0,x1,v0,v1);
		}
		return xm;
	}
	,ylerp: function(y0,y1,x,v0,v1,iso,quality) {
		var ym = this.lerp(y0,y1,v0,v1);
		while(quality-- != 0 && y0 < ym && ym < y1) {
			var vm = iso(x,ym);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				y1 = ym;
				v1 = vm;
			} else {
				y0 = ym;
				v0 = vm;
			}
			ym = this.lerp(y0,y1,v0,v1);
		}
		return ym;
	}
	,__class__: zpp_$nape_geom_ZPP_$MarchingSquares
};
var zpp_$nape_geom_ZPP_$Mat23 = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
$hxClasses["zpp_nape.geom.ZPP_Mat23"] = zpp_$nape_geom_ZPP_$Mat23;
zpp_$nape_geom_ZPP_$Mat23.__name__ = true;
zpp_$nape_geom_ZPP_$Mat23.get = function() {
	var ret;
	if(zpp_$nape_geom_ZPP_$Mat23.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$Mat23(); else {
		ret = zpp_$nape_geom_ZPP_$Mat23.zpp_pool;
		zpp_$nape_geom_ZPP_$Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	return ret;
};
zpp_$nape_geom_ZPP_$Mat23.identity = function() {
	var ret = zpp_$nape_geom_ZPP_$Mat23.get();
	ret.setas(1,0,0,1,0,0);
	return ret;
};
zpp_$nape_geom_ZPP_$Mat23.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_geom_Mat23();
			var o = this.outer.zpp_inner;
			o.next = zpp_$nape_geom_ZPP_$Mat23.zpp_pool;
			zpp_$nape_geom_ZPP_$Mat23.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate();
	}
	,set: function(m) {
		this.setas(m.a,m.b,m.c,m.d,m.tx,m.ty);
	}
	,setas: function(a,b,c,d,tx,ty) {
		this.tx = tx;
		this.ty = ty;
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
	}
	,free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$Mat23
};
var zpp_$nape_geom_ZPP_$MatMN = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = [];
	var _g1 = 0;
	var _g = m * n;
	while(_g1 < _g) {
		var i = _g1++;
		this.x.push(0.0);
	}
};
$hxClasses["zpp_nape.geom.ZPP_MatMN"] = zpp_$nape_geom_ZPP_$MatMN;
zpp_$nape_geom_ZPP_$MatMN.__name__ = true;
zpp_$nape_geom_ZPP_$MatMN.prototype = {
	__class__: zpp_$nape_geom_ZPP_$MatMN
};
var zpp_$nape_geom_ZPP_$Monotone = function() { };
$hxClasses["zpp_nape.geom.ZPP_Monotone"] = zpp_$nape_geom_ZPP_$Monotone;
zpp_$nape_geom_ZPP_$Monotone.__name__ = true;
zpp_$nape_geom_ZPP_$Monotone.bisector = function(b) {
	var a = b.prev;
	var c = b.next;
	var ux = 0.0;
	var uy = 0.0;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	var ret = zpp_$nape_geom_ZPP_$Vec2.get(-uy - vy,ux + vx,null);
	var d = ret.x * ret.x + ret.y * ret.y;
	var imag = 1.0 / Math.sqrt(d);
	var t = imag;
	ret.x *= t;
	ret.y *= t;
	if(vy * ux - vx * uy < 0) {
		ret.x = -ret.x;
		ret.y = -ret.y;
	}
	return ret;
};
zpp_$nape_geom_ZPP_$Monotone.below = function(p,q) {
	if(p.y < q.y) return true; else if(p.y > q.y) return false; else if(p.x < q.x) return true; else if(p.x > q.x) return false; else {
		var po = zpp_$nape_geom_ZPP_$Monotone.bisector(p);
		var qo = zpp_$nape_geom_ZPP_$Monotone.bisector(q);
		var t = 1.0;
		po.x += p.x * t;
		po.y += p.y * t;
		var t1 = 1.0;
		qo.x += q.x * t1;
		qo.y += q.y * t1;
		var ret = po.x < qo.x || po.x == qo.x && po.y < qo.y;
		var o = po;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		var o1 = qo;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
		return ret;
	}
};
zpp_$nape_geom_ZPP_$Monotone.above = function(p,q) {
	return zpp_$nape_geom_ZPP_$Monotone.below(q,p);
};
zpp_$nape_geom_ZPP_$Monotone.left_vertex = function(p) {
	var pre = p.prev;
	return pre.y > p.y || pre.y == p.y && p.next.y < p.y;
};
zpp_$nape_geom_ZPP_$Monotone.isMonotone = function(P) {
	var min = P;
	var max = P;
	var F = P.next;
	var L = P;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y) min = p;
			if(p.y > max.y) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	var ret = true;
	var pre = min;
	if(max != min.next) {
		var F1 = min.next;
		var L1 = max;
		if(F1 != null) {
			var nite1 = F1;
			do {
				var p1 = nite1;
				if(p1.y < pre.y) {
					ret = false;
					break;
				}
				pre = p1;
				nite1 = nite1.next;
			} while(nite1 != L1);
		}
	}
	if(!ret) return false;
	pre = min;
	if(max != min.prev) {
		var F2 = min.prev;
		var L2 = max;
		if(F2 != null) {
			var nite2 = F2;
			do {
				var p2 = nite2;
				if(p2.y < pre.y) {
					ret = false;
					break;
				}
				pre = p2;
				nite2 = nite2.prev;
			} while(nite2 != L2);
		}
	}
	return ret;
};
zpp_$nape_geom_ZPP_$Monotone.getShared = function() {
	if(zpp_$nape_geom_ZPP_$Monotone.sharedPPoly == null) zpp_$nape_geom_ZPP_$Monotone.sharedPPoly = new zpp_$nape_geom_ZPP_$PartitionedPoly();
	return zpp_$nape_geom_ZPP_$Monotone.sharedPPoly;
};
zpp_$nape_geom_ZPP_$Monotone.decompose = function(P,poly) {
	if(poly == null) poly = new zpp_$nape_geom_ZPP_$PartitionedPoly(P); else poly.init(P);
	if(poly.vertices == null) return poly;
	if(zpp_$nape_geom_ZPP_$Monotone.queue == null) zpp_$nape_geom_ZPP_$Monotone.queue = new zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex();
	var F = poly.vertices;
	var L = poly.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			zpp_$nape_geom_ZPP_$Monotone.queue.add(p);
			var ux = 0.0;
			var uy = 0.0;
			ux = p.next.x - p.x;
			uy = p.next.y - p.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = p.prev.x - p.x;
			vy = p.prev.y - p.y;
			var cx = vy * ux - vx * uy > 0.0;
			if(zpp_$nape_geom_ZPP_$Monotone.below(p.prev,p)) {
				if(zpp_$nape_geom_ZPP_$Monotone.below(p.next,p)) {
					if(cx) p.type = 0; else p.type = 3;
				} else p.type = 4;
			} else if(zpp_$nape_geom_ZPP_$Monotone.below(p,p.next)) {
				if(cx) p.type = 1; else p.type = 2;
			} else p.type = 4;
			nite = nite.next;
		} while(nite != L);
	}
	var xxlist = zpp_$nape_geom_ZPP_$Monotone.queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_$nape_geom_ZPP_$Monotone.above(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	if(zpp_$nape_geom_ZPP_$Monotone.edges == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) zpp_$nape_geom_ZPP_$Monotone.edges = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
			zpp_$nape_geom_ZPP_$Monotone.edges = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = zpp_$nape_geom_ZPP_$Monotone.edges.next;
			zpp_$nape_geom_ZPP_$Monotone.edges.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Monotone.edges.lt = zpp_$nape_geom_ZPP_$PartitionVertex.edge_lt;
		zpp_$nape_geom_ZPP_$Monotone.edges.swapped = zpp_$nape_geom_ZPP_$PartitionVertex.edge_swap;
	}
	while(!(zpp_$nape_geom_ZPP_$Monotone.queue.head == null)) {
		var v = zpp_$nape_geom_ZPP_$Monotone.queue.pop_unsafe();
		var _g = v.type;
		switch(_g) {
		case 0:
			v.helper = v;
			v.node = zpp_$nape_geom_ZPP_$Monotone.edges.insert(v);
			break;
		case 1:
			var e = v.prev;
			if(e.helper == null) throw new js__$Boot_HaxeError("Fatal error (1): Polygon is not weakly-simple and clockwise");
			if(e.helper.type == 2) poly.add_diagonal(v,e.helper);
			zpp_$nape_geom_ZPP_$Monotone.edges.remove_node(e.node);
			e.helper = null;
			break;
		case 3:
			var e1;
			var ret = null;
			if(!zpp_$nape_geom_ZPP_$Monotone.edges.empty()) {
				var set_ite = zpp_$nape_geom_ZPP_$Monotone.edges.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(elt,v)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			e1 = ret;
			if(e1 != null) {
				if(e1.helper == null) throw new js__$Boot_HaxeError("Fatal error (2): Polygon is not weakly-simple and clockwise");
				poly.add_diagonal(v,e1.helper);
				e1.helper = v;
			}
			v.node = zpp_$nape_geom_ZPP_$Monotone.edges.insert(v);
			v.helper = v;
			break;
		case 2:
			var e2 = v.prev;
			if(e2.helper == null) throw new js__$Boot_HaxeError("Fatal error (3): Polygon is not weakly-simple and clockwise");
			if(e2.helper.type == 2) poly.add_diagonal(v,e2.helper);
			zpp_$nape_geom_ZPP_$Monotone.edges.remove_node(e2.node);
			e2.helper = null;
			var e3;
			var ret1 = null;
			if(!zpp_$nape_geom_ZPP_$Monotone.edges.empty()) {
				var set_ite1 = zpp_$nape_geom_ZPP_$Monotone.edges.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var elt1 = set_ite1.data;
					if(!zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(elt1,v)) {
						ret1 = elt1;
						break;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			e3 = ret1;
			if(e3 != null) {
				if(e3.helper == null) throw new js__$Boot_HaxeError("Fatal error (4): Polygon is not weakly-simple and clockwise");
				if(e3.helper.type == 2) poly.add_diagonal(v,e3.helper);
				e3.helper = v;
			}
			break;
		case 4:
			var pre = v.prev;
			if(zpp_$nape_geom_ZPP_$Monotone.left_vertex(v)) {
				if(pre.helper == null) throw new js__$Boot_HaxeError("Fatal error (5): Polygon is not weakly-simple and clockwise");
				if(pre.helper.type == 2) poly.add_diagonal(v,pre.helper);
				zpp_$nape_geom_ZPP_$Monotone.edges.remove_node(pre.node);
				pre.helper = null;
				v.node = zpp_$nape_geom_ZPP_$Monotone.edges.insert(v);
				v.helper = v;
			} else {
				var e4;
				var ret2 = null;
				if(!zpp_$nape_geom_ZPP_$Monotone.edges.empty()) {
					var set_ite2 = zpp_$nape_geom_ZPP_$Monotone.edges.parent;
					while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
					while(set_ite2 != null) {
						var elt2 = set_ite2.data;
						if(!zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(elt2,v)) {
							ret2 = elt2;
							break;
						}
						if(set_ite2.next != null) {
							set_ite2 = set_ite2.next;
							while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
						} else {
							while(set_ite2.parent != null && set_ite2 == set_ite2.parent.next) set_ite2 = set_ite2.parent;
							set_ite2 = set_ite2.parent;
						}
					}
				}
				e4 = ret2;
				if(e4 == null || e4.helper == null) throw new js__$Boot_HaxeError("Fatal error (6): Polygon is not weakly-simple and clockwise");
				if(e4.helper.type == 2) poly.add_diagonal(v,e4.helper);
				e4.helper = v;
			}
			break;
		}
	}
	return poly;
};
var zpp_$nape_geom_ZPP_$PartitionVertex = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.rightchain = false;
	this.helper = null;
	this.type = 0;
	this.diagonals = null;
	this.forced = false;
	this.y = 0.0;
	this.x = 0.0;
	this.mag = 0;
	this.id = 0;
	this.id = zpp_$nape_geom_ZPP_$PartitionVertex.nextId++;
	this.diagonals = new zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex();
};
$hxClasses["zpp_nape.geom.ZPP_PartitionVertex"] = zpp_$nape_geom_ZPP_$PartitionVertex;
zpp_$nape_geom_ZPP_$PartitionVertex.__name__ = true;
zpp_$nape_geom_ZPP_$PartitionVertex.get = function(x) {
	var ret;
	if(zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$PartitionVertex(); else {
		ret = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x.x;
	ret.y = x.y;
	return ret;
};
zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance = function(edge,vert) {
	var flip = edge.next.y > edge.y;
	var ux = 0.0;
	var uy = 0.0;
	ux = edge.next.x - edge.x;
	uy = edge.next.y - edge.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = vert.x - edge.x;
	vy = vert.y - edge.y;
	return (flip?-1.0:1.0) * (vy * ux - vx * uy);
};
zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt = function(edge,vert) {
	if(vert == edge || vert == edge.next) return true; else if(edge.y == edge.next.y) return (function($this) {
		var $r;
		var x = edge.x;
		var y = edge.next.x;
		$r = x < y?x:y;
		return $r;
	}(this)) <= vert.x; else return zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(edge,vert) <= 0.0;
};
zpp_$nape_geom_ZPP_$PartitionVertex.edge_swap = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_$nape_geom_ZPP_$PartitionVertex.edge_lt = function(p,q) {
	if(p == q && p.next == q.next) return false;
	if(p == q.next) return !zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(p,q); else if(q == p.next) return zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(q,p); else if(p.y == p.next.y) if(q.y == q.next.y) return (function($this) {
		var $r;
		var x = p.x;
		var y = p.next.x;
		$r = x > y?x:y;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var x1 = q.x;
		var y1 = q.next.x;
		$r = x1 > y1?x1:y1;
		return $r;
	}(this)); else return zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(q,p) > 0.0 || zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(q,p.next) > 0.0; else {
		var qRight = zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(p,q);
		var qNextRight = zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(p,q.next);
		if(qRight == 0 && qNextRight == 0) return (function($this) {
			var $r;
			var x2 = p.x;
			var y2 = p.next.x;
			$r = x2 > y2?x2:y2;
			return $r;
		}(this)) > (function($this) {
			var $r;
			var x3 = q.x;
			var y3 = q.next.x;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this));
		if(qRight * qNextRight >= 0) return qRight < 0 || qNextRight < 0;
		var pRight = zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(q,p);
		var pNextRight = zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(q,p.next);
		if(pRight * pNextRight >= 0) return pRight > 0 || pNextRight > 0;
		return false;
	}
};
zpp_$nape_geom_ZPP_$PartitionVertex.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.helper = null;
	}
	,copy: function() {
		var ret;
		if(zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$PartitionVertex(); else {
			ret = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.x = this.x;
		ret.y = this.y;
		ret.forced = this.forced;
		return ret;
	}
	,sort: function() {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var vorient;
		ux = this.prev.x - this.x;
		uy = this.prev.y - this.y;
		vx = this.next.x - this.x;
		vy = this.next.y - this.y;
		var ret = vy * ux - vx * uy;
		if(ret > 0) vorient = -1; else if(ret == 0) vorient = 0; else vorient = 1;
		var xxlist = this.diagonals;
		if(!(xxlist.head == null) && xxlist.head.next != null) {
			var head = xxlist.head;
			var tail = null;
			var left = null;
			var right = null;
			var nxt = null;
			var listSize = 1;
			var numMerges;
			var leftSize;
			var rightSize;
			do {
				numMerges = 0;
				left = head;
				tail = head = null;
				while(left != null) {
					numMerges++;
					right = left;
					leftSize = 0;
					rightSize = listSize;
					while(right != null && leftSize < listSize) {
						leftSize++;
						right = right.next;
					}
					while(leftSize > 0 || rightSize > 0 && right != null) {
						if(leftSize == 0) {
							nxt = right;
							right = right.next;
							rightSize--;
						} else if(rightSize == 0 || right == null) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else if(vorient == 1?(function($this) {
							var $r;
							{
								ux = left.elt.x - $this.x;
								uy = left.elt.y - $this.y;
							}
							{
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
							}
							var ret1 = vy * ux - vx * uy;
							$r = ret1 > 0?-1:ret1 == 0?0:1;
							return $r;
						}(this)) == 1:(function($this) {
							var $r;
							var d1;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
								vx = left.elt.x - $this.x;
								vy = left.elt.y - $this.y;
								var ret2 = vy * ux - vx * uy;
								if(ret2 > 0) d1 = -1; else if(ret2 == 0) d1 = 0; else d1 = 1;
							}
							var d2;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
								var ret3 = vy * ux - vx * uy;
								if(ret3 > 0) d2 = -1; else if(ret3 == 0) d2 = 0; else d2 = 1;
							}
							$r = d1 * d2 == 1 || d1 * d2 == 0 && (d1 == 1 || d2 == 1)?(function($this) {
								var $r;
								{
									ux = left.elt.x - $this.x;
									uy = left.elt.y - $this.y;
								}
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var ret4 = vy * ux - vx * uy;
								$r = ret4 > 0?-1:ret4 == 0?0:1;
								return $r;
							}($this)) == 1:d1 == -1 || d2 == -1?d2 == -1:d1 == 0 && d2 == 0?(function($this) {
								var $r;
								{
									ux = $this.x - $this.prev.x;
									uy = $this.y - $this.prev.y;
								}
								{
									vx = left.elt.x - $this.x;
									vy = left.elt.y - $this.y;
								}
								var d11 = ux * vx + uy * vy;
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var d21 = ux * vx + uy * vy;
								$r = d11 < 0 && d21 > 0?true:d21 < 0 && d11 > 0?false:true;
								return $r;
							}($this)):true;
							return $r;
						}(this))) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else {
							nxt = right;
							right = right.next;
							rightSize--;
						}
						if(tail != null) tail.next = nxt; else head = nxt;
						tail = nxt;
					}
					left = right;
				}
				tail.next = null;
				listSize <<= 1;
			} while(numMerges > 1);
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	,__class__: zpp_$nape_geom_ZPP_$PartitionVertex
};
var zpp_$nape_geom_ZPP_$PartitionedPoly = function(P) {
	this.next = null;
	this.vertices = null;
	this.init(P);
};
$hxClasses["zpp_nape.geom.ZPP_PartitionedPoly"] = zpp_$nape_geom_ZPP_$PartitionedPoly;
zpp_$nape_geom_ZPP_$PartitionedPoly.__name__ = true;
zpp_$nape_geom_ZPP_$PartitionedPoly.getSharedPP = function() {
	if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList = new zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly();
	return zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList;
};
zpp_$nape_geom_ZPP_$PartitionedPoly.getShared = function() {
	if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
	return zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
};
zpp_$nape_geom_ZPP_$PartitionedPoly.prototype = {
	eq: function(a,b) {
		return zpp_$nape_geom_ZPP_$VecMath.vec_dsq(a.x,a.y,b.x,b.y) < nape_Config.epsilon * nape_Config.epsilon;
	}
	,alloc: function() {
	}
	,free: function() {
	}
	,init: function(P) {
		if(P == null) return;
		var cw;
		cw = (function($this) {
			var $r;
			var area = 0.0;
			{
				var F = P;
				var L = P;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) > 0.0;
		var p = P;
		do {
			if(cw) {
				var obj = zpp_$nape_geom_ZPP_$PartitionVertex.get(p);
				if(this.vertices == null) this.vertices = obj.prev = obj.next = obj; else {
					obj.prev = this.vertices;
					obj.next = this.vertices.next;
					this.vertices.next.prev = obj;
					this.vertices.next = obj;
				}
				this.vertices = obj;
			} else {
				var obj1 = zpp_$nape_geom_ZPP_$PartitionVertex.get(p);
				if(this.vertices == null) this.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.next = this.vertices;
					obj1.prev = this.vertices.prev;
					this.vertices.prev.next = obj1;
					this.vertices.prev = obj1;
				}
				this.vertices = obj1;
			}
			this.vertices.forced = p.forced;
			p = p.next;
		} while(p != P);
		this.remove_collinear_vertices();
	}
	,remove_collinear_vertices: function() {
		var p = this.vertices;
		var skip = true;
		while(skip || p != this.vertices) {
			skip = false;
			if(this.eq(p,p.next)) {
				if(p == this.vertices) {
					this.vertices = p.next;
					skip = true;
				}
				if(p.forced) p.next.forced = true;
				if(p != null && p.prev == p) {
					p.next = p.prev = null;
					var o = p;
					o.helper = null;
					null;
					o.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
					zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o;
					p = p = null;
				} else {
					var retnodes = p.next;
					p.prev.next = p.next;
					p.next.prev = p.prev;
					p.next = p.prev = null;
					var o1 = p;
					o1.helper = null;
					null;
					o1.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
					zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o1;
					p = null;
					p = retnodes;
				}
				if(p == null) {
					this.vertices = null;
					break;
				}
			} else p = p.next;
		}
		if(this.vertices == null) return true;
		var removed;
		do {
			removed = false;
			p = this.vertices;
			skip = true;
			while(skip || p != this.vertices) {
				skip = false;
				var pre = p.prev;
				var ux = 0.0;
				var uy = 0.0;
				ux = p.x - pre.x;
				uy = p.y - pre.y;
				var vx = 0.0;
				var vy = 0.0;
				vx = p.next.x - p.x;
				vy = p.next.y - p.y;
				var crs = vy * ux - vx * uy;
				if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) p = p.next; else {
					if(p == this.vertices) {
						this.vertices = p.next;
						skip = true;
					}
					if(p != null && p.prev == p) {
						p.next = p.prev = null;
						var o2 = p;
						o2.helper = null;
						null;
						o2.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o2;
						p = p = null;
					} else {
						var retnodes1 = p.next;
						p.prev.next = p.next;
						p.next.prev = p.prev;
						p.next = p.prev = null;
						var o3 = p;
						o3.helper = null;
						null;
						o3.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o3;
						p = null;
						p = retnodes1;
					}
					removed = true;
					if(p == null) {
						removed = false;
						this.vertices = null;
						break;
					}
				}
			}
		} while(removed);
		return this.vertices == null;
	}
	,add_diagonal: function(p,q) {
		p.diagonals.add(q);
		q.diagonals.add(p);
		p.forced = q.forced = true;
	}
	,extract_partitions: function(ret) {
		if(ret == null) ret = new zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull_partitions(this.vertices,ret);
			while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				null;
				o.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o;
				this.vertices = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				null;
				o1.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				this.vertices = retnodes;
			}
			var pre = null;
			var cx_ite = ret.head;
			while(cx_ite != null) {
				var p = cx_ite.elt;
				if(p.remove_collinear_vertices()) {
					ret.erase(pre);
					continue;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
		}
		return ret;
	}
	,pull_partitions: function(start,ret) {
		var poly;
		if(zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool == null) poly = new zpp_$nape_geom_ZPP_$PartitionedPoly(); else {
			poly = zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool = poly.next;
			poly.next = null;
		}
		null;
		var next = start;
		do {
			var obj = next.copy();
			if(poly.vertices == null) poly.vertices = obj.prev = obj.next = obj; else {
				obj.prev = poly.vertices;
				obj.next = poly.vertices.next;
				poly.vertices.next.prev = obj;
				poly.vertices.next = obj;
			}
			poly.vertices = obj;
			poly.vertices.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull_partitions(next,ret);
			} else next = next.next;
		} while(next != start);
		if((function($this) {
			var $r;
			var area = 0.0;
			{
				var F = poly.vertices;
				var L = poly.vertices;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) != 0) ret.add(poly);
		return next;
	}
	,extract: function(ret) {
		if(ret == null) ret = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull(this.vertices,ret);
			while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				null;
				o.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o;
				this.vertices = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				null;
				o1.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				this.vertices = retnodes;
			}
		}
		return ret;
	}
	,pull: function(start,ret) {
		var poly = null;
		var next = start;
		do {
			var obj = zpp_$nape_geom_ZPP_$GeomVert.get(next.x,next.y);
			if(poly == null) poly = obj.prev = obj.next = obj; else {
				obj.prev = poly;
				obj.next = poly.next;
				poly.next.prev = obj;
				poly.next = obj;
			}
			poly = obj;
			poly.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull(next,ret);
			} else next = next.next;
		} while(next != start);
		var area;
		var area1 = 0.0;
		var F = poly;
		var L = poly;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				area1 += v.x * (v.next.y - v.prev.y);
				nite = nite.next;
			} while(nite != L);
		}
		area = area1 * 0.5;
		if(area * area >= nape_Config.epsilon * nape_Config.epsilon) {
			if(!(function($this) {
				var $r;
				var p = poly;
				var skip = true;
				while(skip || p != poly) {
					skip = false;
					if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(p.x,p.y,p.next.x,p.next.y) < nape_Config.epsilon * nape_Config.epsilon) {
						if(p == poly) {
							poly = p.next;
							skip = true;
						}
						if(p.forced) p.next.forced = true;
						if(p != null && p.prev == p) {
							p.next = p.prev = null;
							p = p = null;
						} else {
							var retnodes = p.next;
							p.prev.next = p.next;
							p.next.prev = p.prev;
							p.next = p.prev = null;
							p = null;
							p = retnodes;
						}
						if(p == null) {
							poly = null;
							break;
						}
					} else p = p.next;
				}
				if(poly != null) {
					var removed;
					do {
						removed = false;
						p = poly;
						skip = true;
						while(skip || p != poly) {
							skip = false;
							var pre = p.prev;
							var ux = 0.0;
							var uy = 0.0;
							ux = p.x - pre.x;
							uy = p.y - pre.y;
							var vx = 0.0;
							var vy = 0.0;
							vx = p.next.x - p.x;
							vy = p.next.y - p.y;
							var crs = vy * ux - vx * uy;
							if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) p = p.next; else {
								if(p == poly) {
									poly = p.next;
									skip = true;
								}
								if(p != null && p.prev == p) {
									p.next = p.prev = null;
									p = p = null;
								} else {
									var retnodes1 = p.next;
									p.prev.next = p.next;
									p.next.prev = p.prev;
									p.next = p.prev = null;
									p = null;
									p = retnodes1;
								}
								removed = true;
								if(p == null) {
									removed = false;
									poly = null;
									break;
								}
							}
						}
					} while(removed);
				}
				$r = poly == null;
				return $r;
			}(this))) ret.add(poly);
		}
		return next;
	}
	,__class__: zpp_$nape_geom_ZPP_$PartitionedPoly
};
var zpp_$nape_geom_ZPP_$Ray = function() {
	this.zip_dir = false;
	this.absnormaly = 0.0;
	this.absnormalx = 0.0;
	this.normaly = 0.0;
	this.normalx = 0.0;
	this.idiry = 0.0;
	this.idirx = 0.0;
	this.diry = 0.0;
	this.dirx = 0.0;
	this.originy = 0.0;
	this.originx = 0.0;
	this.userData = null;
	this.maxdist = 0.0;
	this.direction = null;
	this.origin = null;
	this.origin = nape_geom_Vec2.get(null,null,null);
	this.origin.zpp_inner._invalidate = $bind(this,this.origin_invalidate);
	this.direction = nape_geom_Vec2.get(null,null,null);
	this.direction.zpp_inner._invalidate = $bind(this,this.direction_invalidate);
	this.originx = 0;
	this.originy = 0;
	this.dirx = 0;
	this.diry = 0;
	this.zip_dir = false;
};
$hxClasses["zpp_nape.geom.ZPP_Ray"] = zpp_$nape_geom_ZPP_$Ray;
zpp_$nape_geom_ZPP_$Ray.__name__ = true;
zpp_$nape_geom_ZPP_$Ray.prototype = {
	origin_invalidate: function(x) {
		this.originx = x.x;
		this.originy = x.y;
	}
	,direction_invalidate: function(x) {
		this.dirx = x.x;
		this.diry = x.y;
		this.zip_dir = true;
	}
	,invalidate_dir: function() {
		this.zip_dir = true;
	}
	,validate_dir: function() {
		if(this.zip_dir) {
			this.zip_dir = false;
			if(this.dirx * this.dirx + this.diry * this.diry < nape_Config.epsilon) throw new js__$Boot_HaxeError("Error: Ray::direction is degenerate");
			var d = this.dirx * this.dirx + this.diry * this.diry;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.dirx *= t;
			this.diry *= t;
			this.idirx = 1 / this.dirx;
			this.idiry = 1 / this.diry;
			this.normalx = -this.diry;
			this.normaly = this.dirx;
			var x = this.normalx;
			if(x < 0) this.absnormalx = -x; else this.absnormalx = x;
			var x1 = this.normaly;
			if(x1 < 0) this.absnormaly = -x1; else this.absnormaly = x1;
		}
	}
	,rayAABB: function() {
		var x0 = this.originx;
		var x1 = x0;
		var y0 = this.originy;
		var y1 = y0;
		if(this.maxdist >= Infinity) {
			if(this.dirx > 0) x1 = Infinity; else if(this.dirx < 0) x1 = -Infinity;
			if(this.diry > 0) y1 = Infinity; else if(this.diry < 0) y1 = -Infinity;
		} else {
			x1 += this.maxdist * this.dirx;
			y1 += this.maxdist * this.diry;
		}
		if(x1 < x0) {
			var t = x0;
			x0 = x1;
			x1 = t;
		}
		if(y1 < y0) {
			var t1 = y0;
			y0 = y1;
			y1 = t1;
		}
		var rayab = zpp_$nape_geom_ZPP_$AABB.get(x0,y0,x1,y1);
		return rayab;
	}
	,aabbtest: function(a) {
		var dot1 = this.normalx * (this.originx - 0.5 * (a.minx + a.maxx)) + this.normaly * (this.originy - 0.5 * (a.miny + a.maxy));
		var dot2 = this.absnormalx * 0.5 * (a.maxx - a.minx) + this.absnormaly * 0.5 * (a.maxy - a.miny);
		return (function($this) {
			var $r;
			var x = dot1;
			$r = x < 0?-x:x;
			return $r;
		}(this)) < dot2;
	}
	,aabbsect: function(a) {
		var cx = this.originx >= a.minx && this.originx <= a.maxx;
		var cy = this.originy >= a.miny && this.originy <= a.maxy;
		if(cx && cy) return 0.0; else {
			var ret = -1.0;
			do {
				if(this.dirx >= 0 && this.originx >= a.maxx) break;
				if(this.dirx <= 0 && this.originx <= a.minx) break;
				if(this.diry >= 0 && this.originy >= a.maxy) break;
				if(this.diry <= 0 && this.originy <= a.miny) break;
				if(this.dirx > 0) {
					var t = (a.minx - this.originx) * this.idirx;
					if(t >= 0 && t <= this.maxdist) {
						var y = this.originy + t * this.diry;
						if(y >= a.miny && y <= a.maxy) {
							ret = t;
							break;
						}
					}
				} else if(this.dirx < 0) {
					var t1 = (a.maxx - this.originx) * this.idirx;
					if(t1 >= 0 && t1 <= this.maxdist) {
						var y1 = this.originy + t1 * this.diry;
						if(y1 >= a.miny && y1 <= a.maxy) {
							ret = t1;
							break;
						}
					}
				}
				if(this.diry > 0) {
					var t2 = (a.miny - this.originy) * this.idiry;
					if(t2 >= 0 && t2 <= this.maxdist) {
						var x = this.originx + t2 * this.dirx;
						if(x >= a.minx && x <= a.maxx) {
							ret = t2;
							break;
						}
					}
				} else if(this.diry < 0) {
					var t3 = (a.maxy - this.originy) * this.idiry;
					if(t3 >= 0 && t3 <= this.maxdist) {
						var x1 = this.originx + t3 * this.dirx;
						if(x1 >= a.minx && x1 <= a.maxx) {
							ret = t3;
							break;
						}
					}
				}
			} while(false);
			return ret;
		}
	}
	,circlesect: function(c,inner,mint) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t < mint && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t2 = 1.0;
				nx -= c.worldCOMx * t2;
				ny -= c.worldCOMy * t2;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t3 = imag;
				nx *= t3;
				ny *= t3;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				return zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx,ny,null),t,C <= 0,c.outer);
			} else return null;
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t11 = (-B + det) * A;
			if(t0 > 0) {
				if(t0 < mint && t0 <= this.maxdist) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = this.originx;
					ny1 = this.originy;
					var t4 = t0;
					nx1 += this.dirx * t4;
					ny1 += this.diry * t4;
					var t5 = 1.0;
					nx1 -= c.worldCOMx * t5;
					ny1 -= c.worldCOMy * t5;
					var d1 = nx1 * nx1 + ny1 * ny1;
					var imag1 = 1.0 / Math.sqrt(d1);
					var t6 = imag1;
					nx1 *= t6;
					ny1 *= t6;
					return zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx1,ny1,null),t0,false,c.outer);
				} else return null;
			} else if(t11 > 0 && inner) {
				if(t11 < mint && t11 <= this.maxdist) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = this.originx;
					ny2 = this.originy;
					var t7 = t11;
					nx2 += this.dirx * t7;
					ny2 += this.diry * t7;
					var t8 = 1.0;
					nx2 -= c.worldCOMx * t8;
					ny2 -= c.worldCOMy * t8;
					var d2 = nx2 * nx2 + ny2 * ny2;
					var imag2 = 1.0 / Math.sqrt(d2);
					var t9 = imag2;
					nx2 *= t9;
					ny2 *= t9;
					nx2 = -nx2;
					ny2 = -ny2;
					return zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx2,ny2,null),t11,true,c.outer);
				} else return null;
			} else return null;
		}
	}
	,circlesect2: function(c,inner,list) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t2 = 1.0;
				nx -= c.worldCOMx * t2;
				ny -= c.worldCOMy * t2;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t3 = imag;
				nx *= t3;
				ny *= t3;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				var res = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx,ny,null),t,C <= 0,c.outer);
				var pre = null;
				var cx_ite = list.zpp_inner.inner.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if((function($this) {
						var $r;
						if(res.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
						$r = res.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
						$r = j.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				list.zpp_inner.inner.inlined_insert(pre,res);
			}
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t11 = (-B + det) * A;
			if(t0 > 0 && t0 <= this.maxdist) {
				var nx1 = 0.0;
				var ny1 = 0.0;
				nx1 = this.originx;
				ny1 = this.originy;
				var t4 = t0;
				nx1 += this.dirx * t4;
				ny1 += this.diry * t4;
				var t5 = 1.0;
				nx1 -= c.worldCOMx * t5;
				ny1 -= c.worldCOMy * t5;
				var d1 = nx1 * nx1 + ny1 * ny1;
				var imag1 = 1.0 / Math.sqrt(d1);
				var t6 = imag1;
				nx1 *= t6;
				ny1 *= t6;
				var res1 = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx1,ny1,null),t0,false,c.outer);
				var pre1 = null;
				var cx_ite1 = list.zpp_inner.inner.head;
				while(cx_ite1 != null) {
					var j1 = cx_ite1.elt;
					if((function($this) {
						var $r;
						if(res1.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
						$r = res1.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j1.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
						$r = j1.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				list.zpp_inner.inner.inlined_insert(pre1,res1);
			}
			if(t11 > 0 && t11 <= this.maxdist && inner) {
				var nx2 = 0.0;
				var ny2 = 0.0;
				nx2 = this.originx;
				ny2 = this.originy;
				var t7 = t11;
				nx2 += this.dirx * t7;
				ny2 += this.diry * t7;
				var t8 = 1.0;
				nx2 -= c.worldCOMx * t8;
				ny2 -= c.worldCOMy * t8;
				var d2 = nx2 * nx2 + ny2 * ny2;
				var imag2 = 1.0 / Math.sqrt(d2);
				var t9 = imag2;
				nx2 *= t9;
				ny2 *= t9;
				nx2 = -nx2;
				ny2 = -ny2;
				var res2 = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx2,ny2,null),t11,true,c.outer);
				var pre2 = null;
				var cx_ite2 = list.zpp_inner.inner.head;
				while(cx_ite2 != null) {
					var j2 = cx_ite2.elt;
					if((function($this) {
						var $r;
						if(res2.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
						$r = res2.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j2.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
						$r = j2.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre2 = cx_ite2;
					cx_ite2 = cx_ite2.next;
				}
				list.zpp_inner.inner.inlined_insert(pre2,res2);
			}
		}
	}
	,polysect: function(p,inner,mint) {
		var min = mint;
		var edge = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape_Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape_Config.epsilon && txx < 1 + nape_Config.epsilon) {
							min = sxx;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v1 = cx_itej;
			var e1 = ei.elt;
			if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
				var _vx1 = 0.0;
				var _vy1 = 0.0;
				_vx1 = v1.x - u.x;
				_vy1 = v1.y - u.y;
				var _sx1 = 0.0;
				var _sy1 = 0.0;
				_sx1 = u.x - this.originx;
				_sy1 = u.y - this.originy;
				var den1 = _vy1 * this.dirx - _vx1 * this.diry;
				if(den1 * den1 > nape_Config.epsilon) {
					den1 = 1 / den1;
					var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
					if(sxx1 > 0 && sxx1 < min && sxx1 <= this.maxdist) {
						var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
						if(txx1 > -nape_Config.epsilon && txx1 < 1 + nape_Config.epsilon) {
							min = sxx1;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			return zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx,ny,null),min,inner1,p.outer);
		} else return null;
	}
	,polysect2: function(p,inner,list) {
		var min = Infinity;
		var max = -1.0;
		var edge = null;
		var edgemax = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape_Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape_Config.epsilon && txx < 1 + nape_Config.epsilon) {
							if(sxx < min) {
								min = sxx;
								edge = ei.elt;
							}
							if(sxx > max) {
								max = sxx;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v1 = cx_itej;
			var e1 = ei.elt;
			if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
				var _vx1 = 0.0;
				var _vy1 = 0.0;
				_vx1 = v1.x - u.x;
				_vy1 = v1.y - u.y;
				var _sx1 = 0.0;
				var _sy1 = 0.0;
				_sx1 = u.x - this.originx;
				_sy1 = u.y - this.originy;
				var den1 = _vy1 * this.dirx - _vx1 * this.diry;
				if(den1 * den1 > nape_Config.epsilon) {
					den1 = 1 / den1;
					var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
					if(sxx1 > 0 && sxx1 <= this.maxdist && (sxx1 < min || sxx1 > max)) {
						var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
						if(txx1 > -nape_Config.epsilon && txx1 < 1 + nape_Config.epsilon) {
							if(sxx1 < min) {
								min = sxx1;
								edge = ei.elt;
							}
							if(sxx1 > max) {
								max = sxx1;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			var ret = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx,ny,null),min,inner1,p.outer);
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if((function($this) {
					var $r;
					if(ret.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
					$r = ret.zpp_inner.toiDistance;
					return $r;
				}(this)) < (function($this) {
					var $r;
					if(j.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
					$r = j.zpp_inner.toiDistance;
					return $r;
				}(this))) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.inlined_insert(pre,ret);
		}
		if(edgemax != null && edge != edgemax) {
			var nx1 = 0.0;
			var ny1 = 0.0;
			nx1 = edgemax.gnormx;
			ny1 = edgemax.gnormy;
			var inner2 = nx1 * this.dirx + ny1 * this.diry > 0;
			if(inner2) {
				nx1 = -nx1;
				ny1 = -ny1;
			}
			var ret1 = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx1,ny1,null),max,inner2,p.outer);
			var pre1 = null;
			var cx_ite1 = list.zpp_inner.inner.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if((function($this) {
					var $r;
					if(ret1.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
					$r = ret1.zpp_inner.toiDistance;
					return $r;
				}(this)) < (function($this) {
					var $r;
					if(j1.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
					$r = j1.zpp_inner.toiDistance;
					return $r;
				}(this))) break;
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			list.zpp_inner.inner.inlined_insert(pre1,ret1);
		}
	}
	,__class__: zpp_$nape_geom_ZPP_$Ray
};
var zpp_$nape_geom_ZPP_$SimpleVert = function() {
	this.node = null;
	this.next = null;
	this.id = 0;
	this.links = null;
	this.y = 0.0;
	this.x = 0.0;
	this.forced = false;
	this.id = zpp_$nape_ZPP_$ID.ZPP_SimpleVert();
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) this.links = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
		this.links = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = this.links.next;
		this.links.next = null;
	}
	null;
	this.links.lt = zpp_$nape_geom_ZPP_$SimpleVert.less_xy;
};
$hxClasses["zpp_nape.geom.ZPP_SimpleVert"] = zpp_$nape_geom_ZPP_$SimpleVert;
zpp_$nape_geom_ZPP_$SimpleVert.__name__ = true;
zpp_$nape_geom_ZPP_$SimpleVert.less_xy = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_$nape_geom_ZPP_$SimpleVert.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_$nape_geom_ZPP_$SimpleVert.get = function(x,y) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimpleVert(); else {
		ret = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_$nape_geom_ZPP_$SimpleVert.prototype = {
	free: function() {
		this.links.clear();
		this.node = null;
		this.forced = false;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$SimpleVert
};
var zpp_$nape_geom_ZPP_$SimpleSeg = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.id = 0;
	this.vertices = null;
	this.right = null;
	this.left = null;
	this.id = zpp_$nape_ZPP_$ID.ZPP_SimpleSeg();
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) this.vertices = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
		this.vertices = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = this.vertices.next;
		this.vertices.next = null;
	}
	null;
	this.vertices.lt = $bind(this,this.less_xy);
};
$hxClasses["zpp_nape.geom.ZPP_SimpleSeg"] = zpp_$nape_geom_ZPP_$SimpleSeg;
zpp_$nape_geom_ZPP_$SimpleSeg.__name__ = true;
zpp_$nape_geom_ZPP_$SimpleSeg.get = function(left,right) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimpleSeg(); else {
		ret = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.left = left;
	ret.right = right;
	ret.vertices.insert(left);
	ret.vertices.insert(right);
	return ret;
};
zpp_$nape_geom_ZPP_$SimpleSeg.prototype = {
	free: function() {
		this.left = this.right = null;
		this.prev = null;
		this.node = null;
		this.vertices.clear();
	}
	,alloc: function() {
	}
	,less_xy: function(a,b) {
		return a.x < b.x || a.x == b.x && a.y < b.y;
	}
	,__class__: zpp_$nape_geom_ZPP_$SimpleSeg
};
var zpp_$nape_geom_ZPP_$SimpleEvent = function() {
	this.next = null;
	this.node = null;
	this.segment2 = null;
	this.segment = null;
	this.vertex = null;
	this.type = 0;
};
$hxClasses["zpp_nape.geom.ZPP_SimpleEvent"] = zpp_$nape_geom_ZPP_$SimpleEvent;
zpp_$nape_geom_ZPP_$SimpleEvent.__name__ = true;
zpp_$nape_geom_ZPP_$SimpleEvent.swap_nodes = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_$nape_geom_ZPP_$SimpleEvent.less_xy = function(a,b) {
	if(a.vertex.x < b.vertex.x) return true; else if(a.vertex.x > b.vertex.x) return false; else if(a.vertex.y < b.vertex.y) return true; else if(a.vertex.y > b.vertex.y) return false; else return a.type < b.type;
};
zpp_$nape_geom_ZPP_$SimpleEvent.get = function(v) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimpleEvent(); else {
		ret = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vertex = v;
	return ret;
};
zpp_$nape_geom_ZPP_$SimpleEvent.prototype = {
	free: function() {
		this.vertex = null;
		this.segment = this.segment2 = null;
		this.node = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$SimpleEvent
};
var zpp_$nape_geom_ZPP_$SimpleSweep = function() {
	this.tree = null;
	this.sweepx = 0.0;
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) this.tree = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
		this.tree = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = this.tree.next;
		this.tree.next = null;
	}
	null;
	this.tree.lt = $bind(this,this.edge_lt);
	this.tree.swapped = $bind(this,this.swap_nodes);
};
$hxClasses["zpp_nape.geom.ZPP_SimpleSweep"] = zpp_$nape_geom_ZPP_$SimpleSweep;
zpp_$nape_geom_ZPP_$SimpleSweep.__name__ = true;
zpp_$nape_geom_ZPP_$SimpleSweep.prototype = {
	swap_nodes: function(p,q) {
		var t = p.node;
		p.node = q.node;
		q.node = t;
	}
	,edge_lt: function(p,q) {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var flip;
		if(p.left == q.left && p.right == q.right) return false; else if(p.left == q.right) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.left) return !(q.left.x == q.right.x?q.left.y < q.right.y?q.left.y > p.left.y:q.right.y > p.left.y:(function($this) {
			var $r;
			flip = q.right.x < q.left.x;
			{
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
			}
			{
				vx = p.left.x - q.left.x;
				vy = p.left.y - q.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0); else if(p.left == q.left) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.right.y; else return p.right.y > q.right.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.right.x - p.left.x;
				vy = q.right.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.right) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0;
		if(p.left.x == p.right.x) {
			if(q.left.x == q.right.x) {
				var pmax;
				if(p.left.y < p.right.y) pmax = p.right; else pmax = p.left;
				var qmax;
				if(q.left.y < q.right.y) qmax = q.right; else qmax = q.left;
				return pmax.y > qmax.y;
			} else {
				var plrg;
				flip = q.right.x < q.left.x;
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
				vx = p.left.x - q.left.x;
				vy = p.left.y - q.left.y;
				if(flip) plrg = uy * vx - ux * vy; else plrg = vy * ux - vx * uy;
				var aplrg;
				flip = q.right.x < q.left.x;
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
				vx = p.right.x - q.left.x;
				vy = p.right.y - q.left.y;
				if(flip) aplrg = uy * vx - ux * vy; else aplrg = vy * ux - vx * uy;
				if(plrg * aplrg >= 0) return plrg >= 0.0; else return this.sweepx >= p.left.x;
			}
		} else if(q.left.x == q.right.x) {
			var qlrg;
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
			if(flip) qlrg = uy * vx - ux * vy; else qlrg = vy * ux - vx * uy;
			var aqlrg;
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.right.x - p.left.x;
			vy = q.right.y - p.left.y;
			if(flip) aqlrg = uy * vx - ux * vy; else aqlrg = vy * ux - vx * uy;
			if(qlrg * aqlrg >= 0) return qlrg < 0.0; else return this.sweepx < q.left.x;
		} else {
			var qlrg1;
			qlrg1 = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.left.x - p.left.x;
					vy = q.left.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			var aqlrg1;
			aqlrg1 = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.right.x - p.left.x;
					vy = q.right.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			if(qlrg1 == aqlrg1) return qlrg1; else {
				var plrg1;
				plrg1 = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.left.x - q.left.x;
						vy = p.left.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				var aplrg1;
				aplrg1 = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.right.x - q.left.x;
						vy = p.right.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				if(plrg1 == aplrg1) return plrg1;
				var py = (this.sweepx - p.left.x) / (p.right.x - p.left.x) * (p.right.y - p.left.y) + p.left.y;
				var qy = (this.sweepx - q.left.x) / (q.right.x - q.left.x) * (q.right.y - q.left.y) + q.left.y;
				return py > qy;
			}
		}
	}
	,clear: function() {
		this.tree.clear();
	}
	,add: function(e) {
		e.node = this.tree.insert(e);
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) {
			e.next = nxt.data;
			nxt.data.prev = e;
		}
		if(pre != null) {
			e.prev = pre.data;
			pre.data.next = e;
		}
		return e;
	}
	,remove: function(e) {
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) nxt.data.prev = e.prev;
		if(pre != null) pre.data.next = e.next;
		this.tree.remove_node(e.node);
		e.node = null;
	}
	,intersect: function(p,q) {
		if(p == null || q == null) return false; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return false; else {
			var lsign = (q.left.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.left.y - p.left.y);
			var rsign = (q.right.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.right.y - p.left.y);
			if(lsign * rsign > 0) return false; else {
				var lsign2 = (p.left.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.left.y - q.left.y);
				var rsign2 = (p.right.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.right.y - q.left.y);
				if(lsign2 * rsign2 > 0) return false; else if(lsign * rsign >= 0 && lsign2 * rsign2 >= 0) return true; else return true;
			}
		}
	}
	,intersection: function(p,q) {
		if(p == null || q == null) return null; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return null; else {
			var ux = 0.0;
			var uy = 0.0;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = q.right.x - q.left.x;
			vy = q.right.y - q.left.y;
			var denom = vy * ux - vx * uy;
			if(denom == 0.0) return null;
			denom = 1 / denom;
			var cx = 0.0;
			var cy = 0.0;
			cx = q.left.x - p.left.x;
			cy = q.left.y - p.left.y;
			var t = (vy * cx - vx * cy) * denom;
			if(t < 0 || t > 1) return null;
			var s = (uy * cx - ux * cy) * denom;
			if(s < 0 || s > 1) return null;
			var vet;
			if(s == 0 || s == 1 || t == 0 || t == 1) {
				var cases = s == 0;
				if(s == 1 && cases) throw new js__$Boot_HaxeError("corner case 1a"); else if(s == 1) cases = true;
				if(t == 0 && cases) throw new js__$Boot_HaxeError("corner case 1b"); else if(t == 0) cases = true;
				if(t == 1 && cases) throw new js__$Boot_HaxeError("corner case 1c");
				if(s == 0) vet = q.left; else if(s == 1) vet = q.right; else if(t == 0) vet = p.left; else vet = p.right;
			} else vet = zpp_$nape_geom_ZPP_$SimpleVert.get(0.5 * (p.left.x + ux * t + q.left.x + vx * s),0.5 * (p.left.y + uy * t + q.left.y + vy * s));
			var ret = zpp_$nape_geom_ZPP_$SimpleEvent.get(vet);
			ret.type = 0;
			ret.segment = p;
			ret.segment2 = q;
			return ret;
		}
	}
	,__class__: zpp_$nape_geom_ZPP_$SimpleSweep
};
var zpp_$nape_geom_ZPP_$Simple = function() { };
$hxClasses["zpp_nape.geom.ZPP_Simple"] = zpp_$nape_geom_ZPP_$Simple;
zpp_$nape_geom_ZPP_$Simple.__name__ = true;
zpp_$nape_geom_ZPP_$Simple.decompose = function(poly,rets) {
	if(zpp_$nape_geom_ZPP_$Simple.sweep == null) {
		zpp_$nape_geom_ZPP_$Simple.sweep = new zpp_$nape_geom_ZPP_$SimpleSweep();
		zpp_$nape_geom_ZPP_$Simple.inthash = new zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse();
	}
	if(zpp_$nape_geom_ZPP_$Simple.vertices == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) zpp_$nape_geom_ZPP_$Simple.vertices = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
			zpp_$nape_geom_ZPP_$Simple.vertices = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = zpp_$nape_geom_ZPP_$Simple.vertices.next;
			zpp_$nape_geom_ZPP_$Simple.vertices.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Simple.vertices.lt = zpp_$nape_geom_ZPP_$SimpleVert.less_xy;
		zpp_$nape_geom_ZPP_$Simple.vertices.swapped = zpp_$nape_geom_ZPP_$SimpleVert.swap_nodes;
	}
	if(zpp_$nape_geom_ZPP_$Simple.queue == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) zpp_$nape_geom_ZPP_$Simple.queue = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
			zpp_$nape_geom_ZPP_$Simple.queue = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = zpp_$nape_geom_ZPP_$Simple.queue.next;
			zpp_$nape_geom_ZPP_$Simple.queue.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Simple.queue.lt = zpp_$nape_geom_ZPP_$SimpleEvent.less_xy;
		zpp_$nape_geom_ZPP_$Simple.queue.swapped = zpp_$nape_geom_ZPP_$SimpleEvent.swap_nodes;
	}
	var fst = null;
	var pre = null;
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var vert = zpp_$nape_geom_ZPP_$SimpleVert.get(v.x,v.y);
			var vx;
			var cur = zpp_$nape_geom_ZPP_$Simple.vertices.parent;
			while(cur != null) if(zpp_$nape_geom_ZPP_$Simple.vertices.lt(vert,cur.data)) cur = cur.prev; else if(zpp_$nape_geom_ZPP_$Simple.vertices.lt(cur.data,vert)) cur = cur.next; else break;
			vx = cur;
			if(vx != null) {
				var o = vert;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o;
				vert = vx.data;
			} else vert.node = zpp_$nape_geom_ZPP_$Simple.vertices.insert(vert);
			if(pre != null) {
				var e1 = zpp_$nape_geom_ZPP_$SimpleEvent.get(pre);
				var e2 = zpp_$nape_geom_ZPP_$SimpleEvent.get(vert);
				var seg;
				if(zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(e1,e2)) {
					e1.type = 1;
					e2.type = 2;
					seg = zpp_$nape_geom_ZPP_$SimpleSeg.get(pre,vert);
				} else {
					e1.type = 2;
					e2.type = 1;
					seg = zpp_$nape_geom_ZPP_$SimpleSeg.get(vert,pre);
				}
				e1.segment = e2.segment = seg;
				zpp_$nape_geom_ZPP_$Simple.queue.insert(e1);
				zpp_$nape_geom_ZPP_$Simple.queue.insert(e2);
				pre.links.insert(vert);
				vert.links.insert(pre);
			}
			pre = vert;
			if(fst == null) fst = vert;
			nite = nite.next;
		} while(nite != L);
	}
	var e11 = zpp_$nape_geom_ZPP_$SimpleEvent.get(pre);
	var e21 = zpp_$nape_geom_ZPP_$SimpleEvent.get(fst);
	var seg1;
	if(zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(e11,e21)) {
		e11.type = 1;
		e21.type = 2;
		seg1 = zpp_$nape_geom_ZPP_$SimpleSeg.get(pre,fst);
	} else {
		e11.type = 2;
		e21.type = 1;
		seg1 = zpp_$nape_geom_ZPP_$SimpleSeg.get(fst,pre);
	}
	e11.segment = e21.segment = seg1;
	zpp_$nape_geom_ZPP_$Simple.queue.insert(e11);
	zpp_$nape_geom_ZPP_$Simple.queue.insert(e21);
	pre.links.insert(fst);
	fst.links.insert(pre);
	if(zpp_$nape_geom_ZPP_$Simple.ints == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) zpp_$nape_geom_ZPP_$Simple.ints = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
			zpp_$nape_geom_ZPP_$Simple.ints = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = zpp_$nape_geom_ZPP_$Simple.ints.next;
			zpp_$nape_geom_ZPP_$Simple.ints.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Simple.ints.lt = zpp_$nape_geom_ZPP_$SimpleEvent.less_xy;
	}
	while(!zpp_$nape_geom_ZPP_$Simple.queue.empty()) {
		var e = zpp_$nape_geom_ZPP_$Simple.queue.pop_front();
		zpp_$nape_geom_ZPP_$Simple.sweep.sweepx = e.vertex.x;
		if(e.type == 1) {
			var s = e.segment;
			zpp_$nape_geom_ZPP_$Simple.sweep.add(s);
			if(s.next != null && s != null && !(s.next.id < s.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(s.next.id,s.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(s.id,s.next.id))) {
				var intx = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(s.next,s);
				if(intx != null) {
					if(intx.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
						var ex;
						var cur1 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
						while(cur1 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx,cur1.data)) cur1 = cur1.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur1.data,intx)) cur1 = cur1.next; else break;
						ex = cur1;
						if(ex == null) {
							var vx1;
							var cur2 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
							while(cur2 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx,cur2.data)) cur2 = cur2.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur2.data,intx)) cur2 = cur2.next; else break;
							vx1 = cur2;
							if(vx1 != null) {
								var o1 = intx.vertex;
								o1.links.clear();
								o1.node = null;
								o1.forced = false;
								o1.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o1;
								intx.vertex = vx1.data.vertex;
								vx1.data = intx;
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx);
							} else {
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx);
								zpp_$nape_geom_ZPP_$Simple.ints.insert(intx);
							}
							if(s.next.id < s.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(s.next.id,s.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(s.id,s.next.id,true));
						} else {
							var x = ex.data;
							if(x.segment != intx.segment || intx.segment2 != x.segment2) throw new js__$Boot_HaxeError("corner case 2, shiiiit.");
							var o2 = intx.vertex;
							o2.links.clear();
							o2.node = null;
							o2.forced = false;
							o2.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o2;
							var o3 = intx;
							o3.vertex = null;
							o3.segment = o3.segment2 = null;
							o3.node = null;
							o3.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o3;
						}
					} else {
						var o4 = intx.vertex;
						o4.links.clear();
						o4.node = null;
						o4.forced = false;
						o4.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o4;
						var o5 = intx;
						o5.vertex = null;
						o5.segment = o5.segment2 = null;
						o5.node = null;
						o5.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o5;
					}
				}
			}
			if(s != null && s.prev != null && !(s.id < s.prev.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(s.id,s.prev.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(s.prev.id,s.id))) {
				var intx1 = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(s,s.prev);
				if(intx1 != null) {
					if(intx1.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
						var ex1;
						var cur3 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
						while(cur3 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx1,cur3.data)) cur3 = cur3.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur3.data,intx1)) cur3 = cur3.next; else break;
						ex1 = cur3;
						if(ex1 == null) {
							var vx2;
							var cur4 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
							while(cur4 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx1,cur4.data)) cur4 = cur4.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur4.data,intx1)) cur4 = cur4.next; else break;
							vx2 = cur4;
							if(vx2 != null) {
								var o6 = intx1.vertex;
								o6.links.clear();
								o6.node = null;
								o6.forced = false;
								o6.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o6;
								intx1.vertex = vx2.data.vertex;
								vx2.data = intx1;
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx1);
							} else {
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx1);
								zpp_$nape_geom_ZPP_$Simple.ints.insert(intx1);
							}
							if(s.id < s.prev.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(s.id,s.prev.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(s.prev.id,s.id,true));
						} else {
							var x1 = ex1.data;
							if(x1.segment != intx1.segment || intx1.segment2 != x1.segment2) throw new js__$Boot_HaxeError("corner case 2, shiiiit.");
							var o7 = intx1.vertex;
							o7.links.clear();
							o7.node = null;
							o7.forced = false;
							o7.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o7;
							var o8 = intx1;
							o8.vertex = null;
							o8.segment = o8.segment2 = null;
							o8.node = null;
							o8.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o8;
						}
					} else {
						var o9 = intx1.vertex;
						o9.links.clear();
						o9.node = null;
						o9.forced = false;
						o9.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o9;
						var o10 = intx1;
						o10.vertex = null;
						o10.segment = o10.segment2 = null;
						o10.node = null;
						o10.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o10;
					}
				}
			}
		} else if(e.type == 2) {
			var s1 = e.segment;
			if(s1.node != null) {
				var nxt = s1.next;
				var pre1 = s1.prev;
				zpp_$nape_geom_ZPP_$Simple.sweep.remove(s1);
				var o11 = s1;
				o11.left = o11.right = null;
				o11.prev = null;
				o11.node = null;
				o11.vertices.clear();
				o11.next = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = o11;
				if(nxt != null && pre1 != null && !(nxt.id < pre1.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(nxt.id,pre1.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(pre1.id,nxt.id))) {
					var intx2 = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(nxt,pre1);
					if(intx2 != null) {
						if(intx2.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
							var ex2;
							var cur5 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
							while(cur5 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx2,cur5.data)) cur5 = cur5.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur5.data,intx2)) cur5 = cur5.next; else break;
							ex2 = cur5;
							if(ex2 == null) {
								var vx3;
								var cur6 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
								while(cur6 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx2,cur6.data)) cur6 = cur6.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur6.data,intx2)) cur6 = cur6.next; else break;
								vx3 = cur6;
								if(vx3 != null) {
									var o12 = intx2.vertex;
									o12.links.clear();
									o12.node = null;
									o12.forced = false;
									o12.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
									zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o12;
									intx2.vertex = vx3.data.vertex;
									vx3.data = intx2;
									zpp_$nape_geom_ZPP_$Simple.queue.insert(intx2);
								} else {
									zpp_$nape_geom_ZPP_$Simple.queue.insert(intx2);
									zpp_$nape_geom_ZPP_$Simple.ints.insert(intx2);
								}
								if(nxt.id < pre1.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(nxt.id,pre1.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(pre1.id,nxt.id,true));
							} else {
								var x2 = ex2.data;
								if(x2.segment != intx2.segment || intx2.segment2 != x2.segment2) throw new js__$Boot_HaxeError("corner case 2, shiiiit.");
								var o13 = intx2.vertex;
								o13.links.clear();
								o13.node = null;
								o13.forced = false;
								o13.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o13;
								var o14 = intx2;
								o14.vertex = null;
								o14.segment = o14.segment2 = null;
								o14.node = null;
								o14.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o14;
							}
						} else {
							var o15 = intx2.vertex;
							o15.links.clear();
							o15.node = null;
							o15.forced = false;
							o15.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o15;
							var o16 = intx2;
							o16.vertex = null;
							o16.segment = o16.segment2 = null;
							o16.node = null;
							o16.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o16;
						}
					}
				}
			}
		} else {
			var intx3 = e.vertex;
			var pnull = intx3.node == null;
			var a = e.segment;
			var b = e.segment2;
			if(b.next != a) {
				var t = a;
				a = b;
				b = t;
			}
			var anew;
			anew = (function($this) {
				var $r;
				var cur7 = a.vertices.parent;
				while(cur7 != null) if(a.vertices.lt(intx3,cur7.data)) cur7 = cur7.prev; else if(a.vertices.lt(cur7.data,intx3)) cur7 = cur7.next; else break;
				$r = cur7;
				return $r;
			}(this)) == null;
			var bnew;
			bnew = (function($this) {
				var $r;
				var cur8 = b.vertices.parent;
				while(cur8 != null) if(b.vertices.lt(intx3,cur8.data)) cur8 = cur8.prev; else if(b.vertices.lt(cur8.data,intx3)) cur8 = cur8.next; else break;
				$r = cur8;
				return $r;
			}(this)) == null;
			if(anew) {
				var aint = a.vertices.insert(intx3);
				var naleft;
				if(intx3 == a.left) naleft = intx3; else naleft = a.vertices.predecessor_node(aint).data;
				var naright;
				if(intx3 == a.right) naright = intx3; else naright = a.vertices.successor_node(aint).data;
				naleft.links.remove(naright);
				if(intx3 != naleft) naleft.links.insert(intx3);
				naright.links.remove(naleft);
				if(intx3 != naright) naright.links.insert(intx3);
				if(intx3 != naleft) intx3.links.insert(naleft);
				if(intx3 != naright) intx3.links.insert(naright);
			}
			if(bnew) {
				var bint = b.vertices.insert(intx3);
				var nbleft;
				if(intx3 == b.left) nbleft = intx3; else nbleft = b.vertices.predecessor_node(bint).data;
				var nbright;
				if(intx3 == b.right) nbright = intx3; else nbright = b.vertices.successor_node(bint).data;
				nbleft.links.remove(nbright);
				if(intx3 != nbleft) nbleft.links.insert(intx3);
				nbright.links.remove(nbleft);
				if(intx3 != nbright) nbright.links.insert(intx3);
				if(intx3 != nbleft) intx3.links.insert(nbleft);
				if(intx3 != nbright) intx3.links.insert(nbright);
			}
			if(pnull) intx3.node = zpp_$nape_geom_ZPP_$Simple.vertices.insert(intx3);
			intx3.forced = true;
			if(pnull) {
				var an = a.node;
				var bn = b.node;
				an.data = b;
				bn.data = a;
				a.node = bn;
				b.node = an;
				b.next = a.next;
				a.next = b;
				a.prev = b.prev;
				b.prev = a;
				if(a.prev != null) a.prev.next = a;
				if(b.next != null) b.next.prev = b;
			}
			if(b.next != null && b != null && !(b.next.id < b.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(b.next.id,b.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(b.id,b.next.id))) {
				var intx4 = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(b.next,b);
				if(intx4 != null) {
					if(intx4.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
						var ex3;
						var cur9 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
						while(cur9 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx4,cur9.data)) cur9 = cur9.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur9.data,intx4)) cur9 = cur9.next; else break;
						ex3 = cur9;
						if(ex3 == null) {
							var vx4;
							var cur10 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
							while(cur10 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx4,cur10.data)) cur10 = cur10.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur10.data,intx4)) cur10 = cur10.next; else break;
							vx4 = cur10;
							if(vx4 != null) {
								var o17 = intx4.vertex;
								o17.links.clear();
								o17.node = null;
								o17.forced = false;
								o17.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o17;
								intx4.vertex = vx4.data.vertex;
								vx4.data = intx4;
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx4);
							} else {
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx4);
								zpp_$nape_geom_ZPP_$Simple.ints.insert(intx4);
							}
							if(b.next.id < b.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(b.next.id,b.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(b.id,b.next.id,true));
						} else {
							var x3 = ex3.data;
							if(x3.segment != intx4.segment || intx4.segment2 != x3.segment2) throw new js__$Boot_HaxeError("corner case 2, shiiiit.");
							var o18 = intx4.vertex;
							o18.links.clear();
							o18.node = null;
							o18.forced = false;
							o18.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o18;
							var o19 = intx4;
							o19.vertex = null;
							o19.segment = o19.segment2 = null;
							o19.node = null;
							o19.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o19;
						}
					} else {
						var o20 = intx4.vertex;
						o20.links.clear();
						o20.node = null;
						o20.forced = false;
						o20.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o20;
						var o21 = intx4;
						o21.vertex = null;
						o21.segment = o21.segment2 = null;
						o21.node = null;
						o21.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o21;
					}
				}
			}
			if(a != null && a.prev != null && !(a.id < a.prev.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(a.id,a.prev.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(a.prev.id,a.id))) {
				var intx5 = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(a,a.prev);
				if(intx5 != null) {
					if(intx5.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
						var ex4;
						var cur11 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
						while(cur11 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx5,cur11.data)) cur11 = cur11.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur11.data,intx5)) cur11 = cur11.next; else break;
						ex4 = cur11;
						if(ex4 == null) {
							var vx5;
							var cur12 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
							while(cur12 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx5,cur12.data)) cur12 = cur12.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur12.data,intx5)) cur12 = cur12.next; else break;
							vx5 = cur12;
							if(vx5 != null) {
								var o22 = intx5.vertex;
								o22.links.clear();
								o22.node = null;
								o22.forced = false;
								o22.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o22;
								intx5.vertex = vx5.data.vertex;
								vx5.data = intx5;
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx5);
							} else {
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx5);
								zpp_$nape_geom_ZPP_$Simple.ints.insert(intx5);
							}
							if(a.id < a.prev.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(a.id,a.prev.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(a.prev.id,a.id,true));
						} else {
							var x4 = ex4.data;
							if(x4.segment != intx5.segment || intx5.segment2 != x4.segment2) throw new js__$Boot_HaxeError("corner case 2, shiiiit.");
							var o23 = intx5.vertex;
							o23.links.clear();
							o23.node = null;
							o23.forced = false;
							o23.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o23;
							var o24 = intx5;
							o24.vertex = null;
							o24.segment = o24.segment2 = null;
							o24.node = null;
							o24.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o24;
						}
					} else {
						var o25 = intx5.vertex;
						o25.links.clear();
						o25.node = null;
						o25.forced = false;
						o25.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o25;
						var o26 = intx5;
						o26.vertex = null;
						o26.segment = o26.segment2 = null;
						o26.node = null;
						o26.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o26;
					}
				}
			}
			zpp_$nape_geom_ZPP_$Simple.ints.remove(e);
		}
		var o27 = e;
		o27.vertex = null;
		o27.segment = o27.segment2 = null;
		o27.node = null;
		o27.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o27;
	}
	var _g1 = 0;
	var _g = zpp_$nape_geom_ZPP_$Simple.inthash.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = zpp_$nape_geom_ZPP_$Simple.inthash.table[i];
		if(n == null) continue;
		while(n != null) {
			var t1 = n.hnext;
			n.hnext = null;
			var o28 = n;
			o28.next = zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool;
			zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool = o28;
			n = t1;
		}
		zpp_$nape_geom_ZPP_$Simple.inthash.table[i] = null;
	}
	if(rets == null) rets = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
	while(!zpp_$nape_geom_ZPP_$Simple.vertices.empty()) zpp_$nape_geom_ZPP_$Simple.clip_polygon(zpp_$nape_geom_ZPP_$Simple.vertices,rets);
	return rets;
};
zpp_$nape_geom_ZPP_$Simple.clip_polygon = function(vertices,rets) {
	var ret = null;
	var cur = vertices.first();
	var fst = cur;
	var pren = cur.links.parent;
	var nxtn;
	if(pren.prev == null) nxtn = pren.next; else nxtn = pren.prev;
	var pre = pren.data;
	var nxt = nxtn.data;
	if((function($this) {
		var $r;
		var ux = 0.0;
		var uy = 0.0;
		{
			ux = cur.x - pre.x;
			uy = cur.y - pre.y;
		}
		var vx = 0.0;
		var vy = 0.0;
		{
			vx = nxt.x - cur.x;
			vy = nxt.y - cur.y;
		}
		$r = vy * ux - vx * uy;
		return $r;
	}(this)) < 0) nxt = pre;
	var obj = zpp_$nape_geom_ZPP_$GeomVert.get(cur.x,cur.y);
	if(ret == null) ret = obj.prev = obj.next = obj; else {
		obj.prev = ret;
		obj.next = ret.next;
		ret.next.prev = obj;
		ret.next = obj;
	}
	ret = obj;
	ret.forced = cur.forced;
	while(true) {
		cur.links.remove(nxt);
		nxt.links.remove(cur);
		if(nxt == fst) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o = cur;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o;
			}
			break;
		}
		var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get(nxt.x,nxt.y);
		if(ret == null) ret = obj1.prev = obj1.next = obj1; else {
			obj1.prev = ret;
			obj1.next = ret.next;
			ret.next.prev = obj1;
			ret.next = obj1;
		}
		ret = obj1;
		ret.forced = nxt.forced;
		if(nxt.links.singular()) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o1 = cur;
				o1.links.clear();
				o1.node = null;
				o1.forced = false;
				o1.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o1;
			}
			cur = nxt;
			nxt = nxt.links.parent.data;
		} else {
			var min = null;
			var minl = 0.0;
			if(!nxt.links.empty()) {
				var set_ite = nxt.links.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var p = set_ite.data;
					if(min == null) {
						min = p;
						var ux1 = 0.0;
						var uy1 = 0.0;
						ux1 = nxt.x - cur.x;
						uy1 = nxt.y - cur.y;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = p.x - nxt.x;
						vy1 = p.y - nxt.y;
						minl = vy1 * ux1 - vx1 * uy1;
					} else {
						var nleft;
						var ux2 = 0.0;
						var uy2 = 0.0;
						ux2 = nxt.x - cur.x;
						uy2 = nxt.y - cur.y;
						var vx2 = 0.0;
						var vy2 = 0.0;
						vx2 = p.x - nxt.x;
						vy2 = p.y - nxt.y;
						nleft = vy2 * ux2 - vx2 * uy2;
						if(nleft > 0 && minl <= 0) {
							min = p;
							minl = nleft;
						} else if(minl * nleft >= 0) {
							var pleft;
							var ux3 = 0.0;
							var uy3 = 0.0;
							ux3 = nxt.x - p.x;
							uy3 = nxt.y - p.y;
							var vx3 = 0.0;
							var vy3 = 0.0;
							vx3 = min.x - nxt.x;
							vy3 = min.y - nxt.y;
							pleft = vy3 * ux3 - vx3 * uy3;
							if(pleft > 0) {
								min = p;
								minl = nleft;
							}
						}
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o2 = cur;
				o2.links.clear();
				o2.node = null;
				o2.forced = false;
				o2.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o2;
			}
			cur = nxt;
			nxt = min;
		}
	}
	vertices.remove(fst);
	var o3 = fst;
	o3.links.clear();
	o3.node = null;
	o3.forced = false;
	o3.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
	zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o3;
	rets.add(ret);
};
zpp_$nape_geom_ZPP_$Simple.isSimple = function(poly) {
	if(zpp_$nape_geom_ZPP_$Simple.sweep == null) {
		zpp_$nape_geom_ZPP_$Simple.sweep = new zpp_$nape_geom_ZPP_$SimpleSweep();
		zpp_$nape_geom_ZPP_$Simple.inthash = new zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse();
	}
	var vertices = zpp_$nape_geom_ZPP_$Simple.list_vertices;
	if(vertices == null) vertices = zpp_$nape_geom_ZPP_$Simple.list_vertices = new zpp_$nape_util_ZNPList_$ZPP_$SimpleVert();
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			vertices.add(zpp_$nape_geom_ZPP_$SimpleVert.get(v.x,v.y));
			nite = nite.next;
		} while(nite != L);
	}
	var queue = zpp_$nape_geom_ZPP_$Simple.list_queue;
	if(queue == null) queue = zpp_$nape_geom_ZPP_$Simple.list_queue = new zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent();
	var cx_ite = vertices.head;
	var u = cx_ite.elt;
	cx_ite = cx_ite.next;
	while(cx_ite != null) {
		var v2 = cx_ite.elt;
		var e1 = queue.add(zpp_$nape_geom_ZPP_$SimpleEvent.get(u));
		var e2 = queue.add(zpp_$nape_geom_ZPP_$SimpleEvent.get(v2));
		e1.segment = zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(e1,e2)?(function($this) {
			var $r;
			e1.type = 1;
			e2.type = 2;
			$r = e2.segment = zpp_$nape_geom_ZPP_$SimpleSeg.get(u,v2);
			return $r;
		}(this)):(function($this) {
			var $r;
			e1.type = 2;
			e2.type = 1;
			$r = e2.segment = zpp_$nape_geom_ZPP_$SimpleSeg.get(v2,u);
			return $r;
		}(this));
		u = v2;
		cx_ite = cx_ite.next;
	}
	var v1 = vertices.head.elt;
	var e11 = queue.add(zpp_$nape_geom_ZPP_$SimpleEvent.get(u));
	var e21 = queue.add(zpp_$nape_geom_ZPP_$SimpleEvent.get(v1));
	e11.segment = zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(e11,e21)?(function($this) {
		var $r;
		e11.type = 1;
		e21.type = 2;
		$r = e21.segment = zpp_$nape_geom_ZPP_$SimpleSeg.get(u,v1);
		return $r;
	}(this)):(function($this) {
		var $r;
		e11.type = 2;
		e21.type = 1;
		$r = e21.segment = zpp_$nape_geom_ZPP_$SimpleSeg.get(v1,u);
		return $r;
	}(this));
	var xxlist = queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	var ret = true;
	while(!(queue.head == null)) {
		var e = queue.pop_unsafe();
		var seg = e.segment;
		if(e.type == 1) {
			zpp_$nape_geom_ZPP_$Simple.sweep.add(seg);
			if(zpp_$nape_geom_ZPP_$Simple.sweep.intersect(seg,seg.next) || zpp_$nape_geom_ZPP_$Simple.sweep.intersect(seg,seg.prev)) {
				ret = false;
				break;
			}
		} else if(e.type == 2) {
			if(zpp_$nape_geom_ZPP_$Simple.sweep.intersect(seg.prev,seg.next)) {
				ret = false;
				break;
			}
			zpp_$nape_geom_ZPP_$Simple.sweep.remove(seg);
			var o = seg;
			o.left = o.right = null;
			o.prev = null;
			o.node = null;
			o.vertices.clear();
			o.next = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool;
			zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = o;
		}
		var o1 = e;
		o1.vertex = null;
		o1.segment = o1.segment2 = null;
		o1.node = null;
		o1.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o1;
	}
	while(!(queue.head == null)) {
		var e3 = queue.pop_unsafe();
		if(e3.type == 2) {
			var o2 = e3.segment;
			o2.left = o2.right = null;
			o2.prev = null;
			o2.node = null;
			o2.vertices.clear();
			o2.next = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool;
			zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = o2;
		}
		var o3 = e3;
		o3.vertex = null;
		o3.segment = o3.segment2 = null;
		o3.node = null;
		o3.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o3;
	}
	zpp_$nape_geom_ZPP_$Simple.sweep.clear();
	while(!(vertices.head == null)) {
		var o4 = vertices.pop_unsafe();
		o4.links.clear();
		o4.node = null;
		o4.forced = false;
		o4.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o4;
	}
	return ret;
};
var zpp_$nape_geom_ZPP_$SimplifyV = function() {
	this.forced = false;
	this.flag = false;
	this.prev = null;
	this.next = null;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_SimplifyV"] = zpp_$nape_geom_ZPP_$SimplifyV;
zpp_$nape_geom_ZPP_$SimplifyV.__name__ = true;
zpp_$nape_geom_ZPP_$SimplifyV.get = function(v) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimplifyV(); else {
		ret = zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool;
		zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = v.x;
	ret.y = v.y;
	ret.flag = false;
	return ret;
};
zpp_$nape_geom_ZPP_$SimplifyV.prototype = {
	free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$SimplifyV
};
var zpp_$nape_geom_ZPP_$SimplifyP = function() {
	this.max = null;
	this.min = null;
	this.next = null;
};
$hxClasses["zpp_nape.geom.ZPP_SimplifyP"] = zpp_$nape_geom_ZPP_$SimplifyP;
zpp_$nape_geom_ZPP_$SimplifyP.__name__ = true;
zpp_$nape_geom_ZPP_$SimplifyP.get = function(min,max) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimplifyP(); else {
		ret = zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool;
		zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.min = min;
	ret.max = max;
	return ret;
};
zpp_$nape_geom_ZPP_$SimplifyP.prototype = {
	free: function() {
		this.min = this.max = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$SimplifyP
};
var zpp_$nape_geom_ZPP_$Simplify = function() { };
$hxClasses["zpp_nape.geom.ZPP_Simplify"] = zpp_$nape_geom_ZPP_$Simplify;
zpp_$nape_geom_ZPP_$Simplify.__name__ = true;
zpp_$nape_geom_ZPP_$Simplify.lessval = function(a,b) {
	return a.x - b.x + (a.y - b.y);
};
zpp_$nape_geom_ZPP_$Simplify.less = function(a,b) {
	return a.x - b.x + (a.y - b.y) < 0.0;
};
zpp_$nape_geom_ZPP_$Simplify.distance = function(v,a,b) {
	var nx = 0.0;
	var ny = 0.0;
	nx = b.x - a.x;
	ny = b.y - a.y;
	var cx = 0.0;
	var cy = 0.0;
	cx = v.x - a.x;
	cy = v.y - a.y;
	var den = nx * nx + ny * ny;
	if(den == 0.0) return cx * cx + cy * cy; else {
		var t = (cx * nx + cy * ny) / (nx * nx + ny * ny);
		if(t <= 0) return cx * cx + cy * cy; else if(t >= 1) return zpp_$nape_geom_ZPP_$VecMath.vec_dsq(v.x,v.y,b.x,b.y); else {
			var t1 = t;
			cx -= nx * t1;
			cy -= ny * t1;
			return cx * cx + cy * cy;
		}
	}
};
zpp_$nape_geom_ZPP_$Simplify.simplify = function(P,epsilon) {
	var ret = null;
	var min = null;
	var max = null;
	epsilon *= epsilon;
	if(zpp_$nape_geom_ZPP_$Simplify.stack == null) zpp_$nape_geom_ZPP_$Simplify.stack = new zpp_$nape_util_ZNPList_$ZPP_$SimplifyP();
	var pre = null;
	var fst = null;
	var cur = P;
	do {
		var v = zpp_$nape_geom_ZPP_$SimplifyV.get(cur);
		v.forced = cur.forced;
		if(v.forced) {
			v.flag = true;
			if(pre != null) zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(pre,v)); else fst = v;
			pre = v;
		}
		var obj = v;
		if(ret == null) ret = obj.prev = obj.next = obj; else {
			obj.prev = ret;
			obj.next = ret.next;
			ret.next.prev = obj;
			ret.next = obj;
		}
		ret = obj;
		if(min == null) {
			min = ret;
			max = ret;
		} else {
			if(ret.x - min.x + (ret.y - min.y) < 0.0) min = ret;
			if(max.x - ret.x + (max.y - ret.y) < 0.0) max = ret;
		}
		cur = cur.next;
	} while(cur != P);
	if(zpp_$nape_geom_ZPP_$Simplify.stack.head == null) {
		if(fst == null) {
			min.flag = max.flag = true;
			zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(min,max));
			zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(max,min));
		} else {
			var d1 = min.x - fst.x + (min.y - fst.y);
			if(d1 < 0) d1 = -d1;
			var d2 = max.x - fst.x + (max.y - fst.y);
			if(d2 < 0) d2 = -d2;
			if(d1 > d2) {
				min.flag = fst.flag = true;
				zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(min,fst));
				zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(fst,min));
			} else {
				max.flag = fst.flag = true;
				zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(max,fst));
				zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(fst,max));
			}
		}
	} else zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(pre,fst));
	while(!(zpp_$nape_geom_ZPP_$Simplify.stack.head == null)) {
		var cur1 = zpp_$nape_geom_ZPP_$Simplify.stack.pop_unsafe();
		var min1 = cur1.min;
		var max1 = cur1.max;
		var o = cur1;
		o.min = o.max = null;
		o.next = zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool;
		zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool = o;
		var dmax = epsilon;
		var dv = null;
		var ite = min1.next;
		while(ite != max1) {
			var dist = zpp_$nape_geom_ZPP_$Simplify.distance(ite,min1,max1);
			if(dist > dmax) {
				dmax = dist;
				dv = ite;
			}
			ite = ite.next;
		}
		if(dv != null) {
			dv.flag = true;
			zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(min1,dv));
			zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(dv,max1));
		}
	}
	var retp = null;
	while(ret != null) {
		if(ret.flag) {
			var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get(ret.x,ret.y);
			if(retp == null) retp = obj1.prev = obj1.next = obj1; else {
				obj1.prev = retp;
				obj1.next = retp.next;
				retp.next.prev = obj1;
				retp.next = obj1;
			}
			retp = obj1;
			retp.forced = ret.forced;
		}
		if(ret != null && ret.prev == ret) {
			ret.next = ret.prev = null;
			var o1 = ret;
			o1.next = zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool;
			zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool = o1;
			ret = ret = null;
		} else {
			var retnodes = ret.next;
			ret.prev.next = ret.next;
			ret.next.prev = ret.prev;
			ret.next = ret.prev = null;
			var o2 = ret;
			o2.next = zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool;
			zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool = o2;
			ret = null;
			ret = retnodes;
		}
	}
	return retp;
};
var zpp_$nape_geom_ZPP_$ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_$nape_geom_ZPP_$Vec2();
	this.c2 = new zpp_$nape_geom_ZPP_$Vec2();
	this.axis = new zpp_$nape_geom_ZPP_$Vec2();
};
$hxClasses["zpp_nape.geom.ZPP_ToiEvent"] = zpp_$nape_geom_ZPP_$ToiEvent;
zpp_$nape_geom_ZPP_$ToiEvent.__name__ = true;
zpp_$nape_geom_ZPP_$ToiEvent.prototype = {
	alloc: function() {
		this.failed = false;
		this.s1 = this.s2 = null;
		this.arbiter = null;
	}
	,free: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$ToiEvent
};
var zpp_$nape_geom_ZPP_$SweepDistance = function() { };
$hxClasses["zpp_nape.geom.ZPP_SweepDistance"] = zpp_$nape_geom_ZPP_$SweepDistance;
zpp_$nape_geom_ZPP_$SweepDistance.__name__ = true;
zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) userAPI = false;
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) ang1 = -ang1;
	var ang2 = b2.angvel;
	if(ang2 < 0) ang2 = -ang2;
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape_Config.dynamicSweepLinearThreshold * nape_Config.dynamicSweepLinearThreshold && angBias < nape_Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		b2.sweepIntegrate(curTOI * timeStep);
		b2.sweepValidate(s2);
		var sep = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape_Config.distanceThresholdCCD) {
			if(userAPI) break;
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape_Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			b2.sweepIntegrate(curTOI * timeStep);
			b2.sweepValidate(s2);
			var sep1 = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape_Config.distanceThresholdCCD) {
				if(userAPI) break;
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_$nape_geom_ZPP_$SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) ang1 = -ang1;
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		var sep = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape_Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape_Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			var sep1 = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape_Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_$nape_geom_ZPP_$SweepDistance.distanceBody = function(b1,b2,w1,w2) {
	var t1;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) t1 = new zpp_$nape_geom_ZPP_$Vec2(); else {
		t1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = t1.next;
		t1.next = null;
	}
	t1.weak = false;
	var t2;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) t2 = new zpp_$nape_geom_ZPP_$Vec2(); else {
		t2 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = t2.next;
		t2.next = null;
	}
	t2.weak = false;
	var ax;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) ax = new zpp_$nape_geom_ZPP_$Vec2(); else {
		ax = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ax.next;
		ax.next = null;
	}
	ax.weak = false;
	var min = 1e100;
	var cx_ite = b1.shapes.head;
	while(cx_ite != null) {
		var s1 = cx_ite.elt;
		var cx_ite1 = b2.shapes.head;
		while(cx_ite1 != null) {
			var s2 = cx_ite1.elt;
			var dist = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,t1,t2,ax,min);
			if(dist < min) {
				min = dist;
				w1.x = t1.x;
				w1.y = t1.y;
				w2.x = t2.x;
				w2.y = t2.y;
			}
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	var o = t1;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
	zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	var o1 = t2;
	if(o1.outer != null) {
		o1.outer.zpp_inner = null;
		o1.outer = null;
	}
	o1._isimmutable = null;
	o1._validate = null;
	o1._invalidate = null;
	o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
	zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	var o2 = ax;
	if(o2.outer != null) {
		o2.outer.zpp_inner = null;
		o2.outer = null;
	}
	o2._isimmutable = null;
	o2._validate = null;
	o2._invalidate = null;
	o2.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
	zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o2;
	return min;
};
zpp_$nape_geom_ZPP_$SweepDistance.distance = function(s1,s2,w1,w2,axis,upperBound) {
	if(upperBound == null) upperBound = 1e100;
	if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE && s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var dist;
		var nx = 0.0;
		var ny = 0.0;
		nx = c2.worldCOMx - c1.worldCOMx;
		ny = c2.worldCOMy - c1.worldCOMy;
		var len = Math.sqrt(nx * nx + ny * ny);
		dist = len - (c1.radius + c2.radius);
		if(dist < upperBound) {
			if(len == 0) {
				nx = 1;
				ny = 0;
			} else {
				var t = 1.0 / len;
				nx *= t;
				ny *= t;
			}
			var t1 = c1.radius;
			w1.x = c1.worldCOMx + nx * t1;
			w1.y = c1.worldCOMy + ny * t1;
			var t2 = -c2.radius;
			w2.x = c2.worldCOMx + nx * t2;
			w2.y = c2.worldCOMy + ny * t2;
			axis.x = nx;
			axis.y = ny;
		}
		return dist;
	} else {
		var swapped = false;
		if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE && s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
			var tmp = s1;
			s1 = s2;
			s2 = tmp;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			swapped = true;
		}
		if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON && s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			var poly = s1.polygon;
			var circle = s2.circle;
			var best = -1e+100;
			var a0 = null;
			var cx_ite = poly.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
				if(dist1 > upperBound) {
					best = dist1;
					break;
				}
				if(dist1 > 0) {
					if(dist1 > best) {
						best = dist1;
						a0 = a;
					}
				} else if(best < 0 && dist1 > best) {
					best = dist1;
					a0 = a;
				}
				cx_ite = cx_ite.next;
			}
			if(best < upperBound) {
				var v0 = a0.gp0;
				var v1 = a0.gp1;
				var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = circle.worldCOMx - v0.x;
					ny1 = circle.worldCOMy - v0.y;
					var len1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);
					best = len1 - circle.radius;
					if(best < upperBound) {
						if(len1 == 0) {
							nx1 = 1;
							ny1 = 0;
						} else {
							var t3 = 1.0 / len1;
							nx1 *= t3;
							ny1 *= t3;
						}
						var t4 = 0;
						w1.x = v0.x + nx1 * t4;
						w1.y = v0.y + ny1 * t4;
						var t5 = -circle.radius;
						w2.x = circle.worldCOMx + nx1 * t5;
						w2.y = circle.worldCOMy + ny1 * t5;
						axis.x = nx1;
						axis.y = ny1;
					}
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = circle.worldCOMx - v1.x;
					ny2 = circle.worldCOMy - v1.y;
					var len2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);
					best = len2 - circle.radius;
					if(best < upperBound) {
						if(len2 == 0) {
							nx2 = 1;
							ny2 = 0;
						} else {
							var t6 = 1.0 / len2;
							nx2 *= t6;
							ny2 *= t6;
						}
						var t7 = 0;
						w1.x = v1.x + nx2 * t7;
						w1.y = v1.y + ny2 * t7;
						var t8 = -circle.radius;
						w2.x = circle.worldCOMx + nx2 * t8;
						w2.y = circle.worldCOMy + ny2 * t8;
						axis.x = nx2;
						axis.y = ny2;
					}
				} else {
					var t9 = -circle.radius;
					w2.x = circle.worldCOMx + a0.gnormx * t9;
					w2.y = circle.worldCOMy + a0.gnormy * t9;
					var t10 = -best;
					w1.x = w2.x + a0.gnormx * t10;
					w1.y = w2.y + a0.gnormy * t10;
					axis.x = a0.gnormx;
					axis.y = a0.gnormy;
				}
			}
			if(swapped) {
				axis.x = -axis.x;
				axis.y = -axis.y;
			}
			return best;
		} else {
			var p1 = s1.polygon;
			var p2 = s2.polygon;
			var best1 = -1e+100;
			var a1 = null;
			var a2 = null;
			var besti = 0;
			var cx_ite1 = p1.edges.head;
			while(cx_ite1 != null) {
				var a3 = cx_ite1.elt;
				var min = 1e100;
				var cx_ite2 = p2.gverts.next;
				while(cx_ite2 != null) {
					var v = cx_ite2;
					var k = a3.gnormx * v.x + a3.gnormy * v.y;
					if(k < min) min = k;
					cx_ite2 = cx_ite2.next;
				}
				min -= a3.gprojection;
				if(min > upperBound) {
					best1 = min;
					break;
				}
				if(min > 0) {
					if(min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
				} else if(best1 < 0 && min > best1) {
					best1 = min;
					a1 = a3;
					besti = 1;
				}
				cx_ite1 = cx_ite1.next;
			}
			if(best1 < upperBound) {
				var cx_ite3 = p2.edges.head;
				while(cx_ite3 != null) {
					var a4 = cx_ite3.elt;
					var min1 = 1e100;
					var cx_ite4 = p1.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = a4.gnormx * v2.x + a4.gnormy * v2.y;
						if(k1 < min1) min1 = k1;
						cx_ite4 = cx_ite4.next;
					}
					min1 -= a4.gprojection;
					if(min1 > upperBound) {
						best1 = min1;
						break;
					}
					if(min1 > 0) {
						if(min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
					} else if(best1 < 0 && min1 > best1) {
						best1 = min1;
						a2 = a4;
						besti = 2;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < upperBound) {
					var q1;
					var q2;
					var ax;
					if(besti == 1) {
						q1 = p1;
						q2 = p2;
						ax = a1;
					} else {
						q1 = p2;
						q2 = p1;
						ax = a2;
						var tmp1 = w1;
						w1 = w2;
						w2 = tmp1;
						swapped = !swapped;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite5 = q2.edges.head;
					while(cx_ite5 != null) {
						var a5 = cx_ite5.elt;
						var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = a5;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(swapped) {
						axis.x = -ax.gnormx;
						axis.y = -ax.gnormy;
					} else {
						axis.x = ax.gnormx;
						axis.y = ax.gnormy;
					}
					if(best1 >= 0) {
						var v01 = ax.gp0;
						var v11 = ax.gp1;
						var q0 = ay.gp0;
						var q11 = ay.gp1;
						var vx = 0.0;
						var vy = 0.0;
						var qx = 0.0;
						var qy = 0.0;
						vx = v11.x - v01.x;
						vy = v11.y - v01.y;
						qx = q11.x - q0.x;
						qy = q11.y - q0.y;
						var vdot = 1 / (vx * vx + vy * vy);
						var qdot = 1 / (qx * qx + qy * qy);
						var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
						var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
						var s11 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
						var s21 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
						if(t11 < 0) t11 = 0; else if(t11 > 1) t11 = 1;
						if(t21 < 0) t21 = 0; else if(t21 > 1) t21 = 1;
						if(s11 < 0) s11 = 0; else if(s11 > 1) s11 = 1;
						if(s21 < 0) s21 = 0; else if(s21 > 1) s21 = 1;
						var f1x = 0.0;
						var f1y = 0.0;
						var t12 = t11;
						f1x = v01.x + vx * t12;
						f1y = v01.y + vy * t12;
						var f2x = 0.0;
						var f2y = 0.0;
						var t13 = t21;
						f2x = v01.x + vx * t13;
						f2y = v01.y + vy * t13;
						var g1x = 0.0;
						var g1y = 0.0;
						var t14 = s11;
						g1x = q0.x + qx * t14;
						g1y = q0.y + qy * t14;
						var g2x = 0.0;
						var g2y = 0.0;
						var t15 = s21;
						g2x = q0.x + qx * t15;
						g2y = q0.y + qy * t15;
						var d1 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(f1x,f1y,q0.x,q0.y);
						var d2 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(f2x,f2y,q11.x,q11.y);
						var e1 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(g1x,g1y,v01.x,v01.y);
						var e2 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(g2x,g2y,v11.x,v11.y);
						var minfx = 0.0;
						var minfy = 0.0;
						var minq = null;
						if(d1 < d2) {
							minfx = f1x;
							minfy = f1y;
							minq = q0;
						} else {
							minfx = f2x;
							minfy = f2y;
							minq = q11;
							d1 = d2;
						}
						var mingx = 0.0;
						var mingy = 0.0;
						var minv = null;
						if(e1 < e2) {
							mingx = g1x;
							mingy = g1y;
							minv = v01;
						} else {
							mingx = g2x;
							mingy = g2y;
							minv = v11;
							e1 = e2;
						}
						if(d1 < e1) {
							w1.x = minfx;
							w1.y = minfy;
							w2.x = minq.x;
							w2.y = minq.y;
							best1 = Math.sqrt(d1);
						} else {
							w2.x = mingx;
							w2.y = mingy;
							w1.x = minv.x;
							w1.y = minv.y;
							best1 = Math.sqrt(e1);
						}
						if(best1 != 0) {
							axis.x = w2.x - w1.x;
							axis.y = w2.y - w1.y;
							var t16 = 1.0 / best1;
							axis.x *= t16;
							axis.y *= t16;
							if(swapped) {
								axis.x = -axis.x;
								axis.y = -axis.y;
							}
						}
						return best1;
					} else {
						var c0x = 0.0;
						var c0y = 0.0;
						c0x = ay.gp0.x;
						c0y = ay.gp0.y;
						var c1x = 0.0;
						var c1y = 0.0;
						c1x = ay.gp1.x;
						c1y = ay.gp1.y;
						var dvx = 0.0;
						var dvy = 0.0;
						dvx = c1x - c0x;
						dvy = c1y - c0y;
						var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
						var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
						var den = 1 / (d11 - d0);
						var t17 = (-ax.tp1 - d0) * den;
						if(t17 > nape_Config.epsilon) {
							var t19 = t17;
							c0x += dvx * t19;
							c0y += dvy * t19;
						}
						var t18 = (-ax.tp0 - d11) * den;
						if(t18 < -nape_Config.epsilon) {
							var t20 = t18;
							c1x += dvx * t20;
							c1y += dvy * t20;
						}
						var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
						var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
						if(c0d < c1d) {
							w2.x = c0x;
							w2.y = c0y;
							var t22 = -c0d;
							w1.x = w2.x + ax.gnormx * t22;
							w1.y = w2.y + ax.gnormy * t22;
							return c0d;
						} else {
							w2.x = c1x;
							w2.y = c1y;
							var t23 = -c1d;
							w1.x = w2.x + ax.gnormx * t23;
							w1.y = w2.y + ax.gnormy * t23;
							return c1d;
						}
					}
				} else return upperBound;
			} else return upperBound;
		}
	}
};
var zpp_$nape_geom_ZPP_$PartitionPair = function() {
	this.node = null;
	this.di = 0;
	this.id = 0;
	this.b = null;
	this.a = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
};
$hxClasses["zpp_nape.geom.ZPP_PartitionPair"] = zpp_$nape_geom_ZPP_$PartitionPair;
zpp_$nape_geom_ZPP_$PartitionPair.__name__ = true;
zpp_$nape_geom_ZPP_$PartitionPair.get = function(a,b) {
	var ret;
	if(zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$PartitionPair(); else {
		ret = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.a = a;
	ret.b = b;
	if(a.id < b.id) {
		ret.id = a.id;
		ret.di = b.id;
	} else {
		ret.id = b.id;
		ret.di = a.id;
	}
	return ret;
};
zpp_$nape_geom_ZPP_$PartitionPair.edge_swap = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_$nape_geom_ZPP_$PartitionPair.edge_lt = function(a,b) {
	return a.id < b.id || a.id == b.id && a.di < b.di;
};
zpp_$nape_geom_ZPP_$PartitionPair.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
		this.a = this.b = null;
		this.node = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$PartitionPair
};
var zpp_$nape_geom_ZPP_$Triangular = function() { };
$hxClasses["zpp_nape.geom.ZPP_Triangular"] = zpp_$nape_geom_ZPP_$Triangular;
zpp_$nape_geom_ZPP_$Triangular.__name__ = true;
zpp_$nape_geom_ZPP_$Triangular.lt = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_$nape_geom_ZPP_$Triangular.right_turn = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = c.x - b.x;
	uy = c.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = b.x - a.x;
	vy = b.y - a.y;
	return vy * ux - vx * uy;
};
zpp_$nape_geom_ZPP_$Triangular.delaunay = function(A,B,C,D) {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	if((function($this) {
		var $r;
		{
			ux = C.x - B.x;
			uy = C.y - B.y;
		}
		{
			vx = B.x - A.x;
			vy = B.y - A.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = D.x - C.x;
			uy = D.y - C.y;
		}
		{
			vx = C.x - B.x;
			vy = C.y - B.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = A.x - D.x;
			uy = A.y - D.y;
		}
		{
			vx = D.x - C.x;
			vy = D.y - C.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = B.x - A.x;
			uy = B.y - A.y;
		}
		{
			vx = A.x - D.x;
			vy = A.y - D.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this))) return true;
	return B.x * (C.y * D.mag - C.mag * D.y) - C.x * (B.y * D.mag - B.mag * D.y) + D.x * (B.y * C.mag - B.mag * C.y) - (A.x * (C.y * D.mag - C.mag * D.y) - C.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * C.mag - A.mag * C.y)) + (A.x * (B.y * D.mag - B.mag * D.y) - B.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * B.mag - A.mag * B.y)) - (A.x * (B.y * C.mag - B.mag * C.y) - B.x * (A.y * C.mag - A.mag * C.y) + C.x * (A.y * B.mag - A.mag * B.y)) > 0;
	return B.x * (C.y * D.mag - C.mag * D.y) + B.y * (C.mag * D.x - C.x * D.mag) + B.mag * (C.x * D.y - C.y * D.x) + A.x * (C.mag * D.y - C.y * D.mag + B.mag * (C.y - D.y) + B.y * (D.mag - C.mag)) + A.y * (C.x * D.mag - C.mag * D.x + B.mag * (D.x - C.x) + B.x * (C.mag - D.mag)) + A.mag * (C.y * D.x - C.x * D.y + B.x * (D.y - C.y) + B.y * (C.x - D.x)) > 0;
};
zpp_$nape_geom_ZPP_$Triangular.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			p.mag = p.x * p.x + p.y * p.y;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_$nape_geom_ZPP_$Triangular.edgeSet == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) zpp_$nape_geom_ZPP_$Triangular.edgeSet = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
			zpp_$nape_geom_ZPP_$Triangular.edgeSet = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = zpp_$nape_geom_ZPP_$Triangular.edgeSet.next;
			zpp_$nape_geom_ZPP_$Triangular.edgeSet.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Triangular.edgeSet.lt = zpp_$nape_geom_ZPP_$PartitionPair.edge_lt;
		zpp_$nape_geom_ZPP_$Triangular.edgeSet.swapped = zpp_$nape_geom_ZPP_$PartitionPair.edge_swap;
	}
	var edgeStack;
	if(zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool == null) edgeStack = new zpp_$nape_geom_ZPP_$PartitionPair(); else {
		edgeStack = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = edgeStack.next;
		edgeStack.next = null;
	}
	null;
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var q0 = p1.next;
			p1.diagonals.reverse();
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var q = cx_ite.elt;
				if(q.id < p1.id) {
					q0 = q;
					cx_ite = cx_ite.next;
					continue;
				}
				var q1;
				if(cx_ite.next == null) q1 = p1.prev; else q1 = cx_ite.next.elt;
				if(!zpp_$nape_geom_ZPP_$Triangular.delaunay(p1,q0,q,q1)) {
					var edge = zpp_$nape_geom_ZPP_$PartitionPair.get(p1,q);
					edgeStack.add(edge);
					edge.node = zpp_$nape_geom_ZPP_$Triangular.edgeSet.insert(edge);
				}
				q0 = q;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
	while(!(edgeStack.next == null)) {
		var edge1 = edgeStack.pop_unsafe();
		var A = edge1.a;
		var C = edge1.b;
		var B = A.next;
		var D = null;
		var cx_ite1 = A.diagonals.head;
		while(cx_ite1 != null) {
			var p2 = cx_ite1.elt;
			if(p2 == C) {
				cx_ite1 = cx_ite1.next;
				if(cx_ite1 == null) D = A.prev; else D = cx_ite1.elt;
				break;
			}
			B = p2;
			cx_ite1 = cx_ite1.next;
		}
		A.diagonals.remove(C);
		C.diagonals.remove(A);
		if(C == B.next) B.diagonals.add(D); else {
			var cx_ite2 = B.diagonals.head;
			while(cx_ite2 != null) {
				var p3 = cx_ite2.elt;
				if(p3 == C) {
					B.diagonals.insert(cx_ite2,D);
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
		if(A == D.next) D.diagonals.add(B); else {
			var cx_ite3 = D.diagonals.head;
			while(cx_ite3 != null) {
				var p4 = cx_ite3.elt;
				if(p4 == A) {
					D.diagonals.insert(cx_ite3,B);
					break;
				}
				cx_ite3 = cx_ite3.next;
			}
		}
		zpp_$nape_geom_ZPP_$Triangular.edgeSet.remove_node(edge1.node);
		var o = edge1;
		o.a = o.b = null;
		o.node = null;
		o.next = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = o;
	}
	var o1 = edgeStack;
	o1.a = o1.b = null;
	o1.node = null;
	o1.next = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool;
	zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = o1;
};
zpp_$nape_geom_ZPP_$Triangular.triangulate = function(P) {
	var min = P.vertices;
	var max = P.vertices;
	var F = P.vertices.next;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y || p.y == min.y && p.x < min.x) min = p;
			if(max.y < p.y || max.y == p.y && max.x < p.x) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_$nape_geom_ZPP_$Triangular.queue == null) zpp_$nape_geom_ZPP_$Triangular.queue = new zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex();
	var rp = max.prev;
	var lp = max.next;
	zpp_$nape_geom_ZPP_$Triangular.queue.add(max);
	while(rp != min || lp != min) if(rp == min || lp != min && (rp.y < lp.y || rp.y == lp.y && rp.x < lp.x)) {
		zpp_$nape_geom_ZPP_$Triangular.queue.add(lp);
		lp.rightchain = false;
		lp = lp.next;
	} else {
		zpp_$nape_geom_ZPP_$Triangular.queue.add(rp);
		rp.rightchain = true;
		rp = rp.prev;
	}
	zpp_$nape_geom_ZPP_$Triangular.queue.add(min);
	if(zpp_$nape_geom_ZPP_$Triangular.stack == null) zpp_$nape_geom_ZPP_$Triangular.stack = new zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex();
	zpp_$nape_geom_ZPP_$Triangular.stack.add(zpp_$nape_geom_ZPP_$Triangular.queue.pop_unsafe());
	var pre = zpp_$nape_geom_ZPP_$Triangular.queue.pop_unsafe();
	zpp_$nape_geom_ZPP_$Triangular.stack.add(pre);
	while(true) {
		var p1 = zpp_$nape_geom_ZPP_$Triangular.queue.pop_unsafe();
		if(zpp_$nape_geom_ZPP_$Triangular.queue.head == null) break;
		if(p1.rightchain != zpp_$nape_geom_ZPP_$Triangular.stack.head.elt.rightchain) {
			while(true) {
				var s = zpp_$nape_geom_ZPP_$Triangular.stack.pop_unsafe();
				if(zpp_$nape_geom_ZPP_$Triangular.stack.head == null) break;
				P.add_diagonal(s,p1);
			}
			zpp_$nape_geom_ZPP_$Triangular.stack.add(pre);
		} else {
			var q = zpp_$nape_geom_ZPP_$Triangular.stack.pop_unsafe();
			while(!(zpp_$nape_geom_ZPP_$Triangular.stack.head == null)) {
				var s1 = zpp_$nape_geom_ZPP_$Triangular.stack.head.elt;
				var right = zpp_$nape_geom_ZPP_$Triangular.right_turn(s1,q,p1);
				if(p1.rightchain && right >= 0 || !p1.rightchain && right <= 0) break;
				P.add_diagonal(s1,p1);
				q = s1;
				zpp_$nape_geom_ZPP_$Triangular.stack.pop();
			}
			zpp_$nape_geom_ZPP_$Triangular.stack.add(q);
		}
		zpp_$nape_geom_ZPP_$Triangular.stack.add(p1);
		pre = p1;
	}
	if(!(zpp_$nape_geom_ZPP_$Triangular.stack.head == null)) {
		zpp_$nape_geom_ZPP_$Triangular.stack.pop();
		while(!(zpp_$nape_geom_ZPP_$Triangular.stack.head == null)) {
			var s2 = zpp_$nape_geom_ZPP_$Triangular.stack.pop_unsafe();
			if(zpp_$nape_geom_ZPP_$Triangular.stack.head == null) break;
			P.add_diagonal(max,s2);
		}
	}
	return P;
};
var zpp_$nape_geom_ZPP_$Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_Vec2"] = zpp_$nape_geom_ZPP_$Vec2;
zpp_$nape_geom_ZPP_$Vec2.__name__ = true;
zpp_$nape_geom_ZPP_$Vec2.get = function(x,y,immutable) {
	if(immutable == null) immutable = false;
	var ret;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$Vec2(); else {
		ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = immutable;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_$nape_geom_ZPP_$Vec2.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,immutable: function() {
		if(this._immutable) throw new js__$Boot_HaxeError("Error: Vec2 is immutable");
		if(this._isimmutable != null) this._isimmutable();
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_geom_Vec2();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this._isimmutable = null;
		this._validate = null;
		this._invalidate = null;
	}
	,alloc: function() {
		this.weak = false;
	}
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,copy: function() {
		return zpp_$nape_geom_ZPP_$Vec2.get(this.x,this.y,null);
	}
	,toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Vec3 = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
$hxClasses["zpp_nape.geom.ZPP_Vec3"] = zpp_$nape_geom_ZPP_$Vec3;
zpp_$nape_geom_ZPP_$Vec3.__name__ = true;
zpp_$nape_geom_ZPP_$Vec3.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,__class__: zpp_$nape_geom_ZPP_$Vec3
};
var zpp_$nape_geom_ZPP_$VecMath = function() { };
$hxClasses["zpp_nape.geom.ZPP_VecMath"] = zpp_$nape_geom_ZPP_$VecMath;
zpp_$nape_geom_ZPP_$VecMath.__name__ = true;
zpp_$nape_geom_ZPP_$VecMath.vec_dsq = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return dx * dx + dy * dy;
};
zpp_$nape_geom_ZPP_$VecMath.vec_distance = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return Math.sqrt(dx * dx + dy * dy);
};
var zpp_$nape_phys_ZPP_$Interactor = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_$nape_ZPP_$ID.Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CallbackSet();
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.phys.ZPP_Interactor"] = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Interactor.__name__ = true;
zpp_$nape_phys_ZPP_$Interactor.get = function(i1,i2) {
	var id;
	if(i1.id < i2.id) id = i1.id; else id = i2.id;
	var di;
	if(i1.id < i2.id) di = i2.id; else di = i1.id;
	var xs;
	if(i1.cbsets.length < i2.cbsets.length) xs = i1.cbsets; else xs = i2.cbsets;
	var ret = null;
	var cx_ite = xs.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_phys_ZPP_$Interactor.int_callback = function(set,x,cb) {
	var o1 = set.int1;
	var o2 = set.int2;
	if(x.options1.compatible(o1.cbTypes) && x.options2.compatible(o2.cbTypes)) {
		cb.int1 = o1;
		cb.int2 = o2;
	} else {
		cb.int1 = o2;
		cb.int2 = o1;
	}
};
zpp_$nape_phys_ZPP_$Interactor.prototype = {
	isShape: function() {
		return this.ishape != null;
	}
	,isBody: function() {
		return this.ibody != null;
	}
	,isCompound: function() {
		return this.icompound != null;
	}
	,__iaddedToSpace: function() {
		if(this.group != null) this.group.interactors.add(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.add(this);
			cx_ite = cx_ite.next;
		}
		this.alloc_cbSet();
	}
	,__iremovedFromSpace: function() {
		if(this.group != null) this.group.interactors.remove(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.remove(this);
			cx_ite = cx_ite.next;
		}
		this.dealloc_cbSet();
	}
	,wake: function() {
		if(this.ishape != null) {
			var body = this.ishape.body;
			if(body != null && body.space != null) body.space.non_inlined_wake(body);
			true;
		} else if(this.ibody != null) {
			if(this.ibody.space != null) this.ibody.space.non_inlined_wake(this.ibody); else false;
		} else {
			if(this.icompound.space != null) this.icompound.space.wakeCompound(this.icompound);
			true;
		}
	}
	,getSpace: function() {
		if(this.ishape != null) {
			if(this.ishape.body == null) return null; else return this.ishape.body.space;
		} else if(this.ibody != null) return this.ibody.space; else return this.icompound.space;
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_$nape_util_ZPP_$CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
		this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
	}
	,immutable_cbTypes: function() {
		this.immutable_midstep("Interactor::cbTypes");
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			var space;
			if(this.ishape != null) {
				if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
			} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.remove(this);
			}
			this.cbTypes.remove(cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			var space;
			if(this.ishape != null) {
				if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
			} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.interactors.add(this);
			this.cbSet.validate();
			space.freshInteractorType(this);
		}
	}
	,dealloc_cbSet: function() {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if(this.cbSet != null) {
			this.cbSet.interactors.remove(this);
			space.nullInteractorType(this);
			if(--this.cbSet.count == 0) {
				space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,setGroup: function(group) {
		if(this.group != group) {
			var inspace;
			inspace = (this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space) != null;
			if(inspace && this.group != null) this.group.interactors.remove(this);
			this.group = group;
			if(inspace && group != null) group.interactors.add(this);
			if(inspace) {
				if(this.ishape != null) this.ishape.body.wake(); else if(this.ibody != null) this.ibody.wake(); else this.icompound.wake();
			}
		}
	}
	,immutable_midstep: function(n) {
		if(this.ibody != null) this.ibody.__immutable_midstep(n); else if(this.ishape != null) this.ishape.__immutable_midstep(n); else this.icompound.__imutable_midstep(n);
	}
	,lookup_group: function() {
		var cur = this;
		while(cur != null && cur.group == null) if(cur.ishape != null) cur = cur.ishape.body; else if(cur.icompound != null) cur = cur.icompound.compound; else cur = cur.ibody.compound;
		if(cur == null) return null; else return cur.group;
	}
	,copyto: function(ret) {
		ret.zpp_inner_i.group = this.group;
		var _g = this.outer_i.get_cbTypes().iterator();
		while(_g.hasNext()) {
			var cb;
			_g.zpp_critical = false;
			cb = _g.zpp_inner.at(_g.zpp_i++);
			((function($this) {
				var $r;
				if(ret.zpp_inner_i.wrap_cbTypes == null) ret.zpp_inner_i.setupcbTypes();
				$r = ret.zpp_inner_i.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		if(this.userData != null) ret.zpp_inner_i.userData = Reflect.copy(this.userData);
	}
	,__class__: zpp_$nape_phys_ZPP_$Interactor
};
var zpp_$nape_phys_ZPP_$Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.wrapcvel = null;
	this.wrap_svel = null;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.wrap_kinvel = null;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.wrap_force = null;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.wrap_vel = null;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.graph_depth = 0;
	this.component = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_arbiters = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Infinity;
	this.pre_posy = Infinity;
	this.pre_rot = Infinity;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	this.aabb = zpp_$nape_geom_ZPP_$AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT;
	this.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT;
	this.gravMassScale = 1.0;
	this.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.wrap_shapes.zpp_inner._modifiable = $bind(this,this.shapes_modifiable);
	this.kinematicDelaySleep = false;
};
$hxClasses["zpp_nape.phys.ZPP_Body"] = zpp_$nape_phys_ZPP_$Body;
zpp_$nape_phys_ZPP_$Body.__name__ = true;
zpp_$nape_phys_ZPP_$Body.bodysetlt = function(a,b) {
	return a.id < b.id;
};
zpp_$nape_phys_ZPP_$Body.__static = function() {
	var ret = new nape_phys_Body((function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
		return $r;
	}(this)));
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
zpp_$nape_phys_ZPP_$Body.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Body.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	isStatic: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC;
	}
	,isDynamic: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC;
	}
	,isKinematic: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC;
	}
	,invalidate_type: function() {
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,invalidate_shapes: function() {
		this.zip_aabb = true;
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,init_bodysetlist: function() {
		if(zpp_$nape_phys_ZPP_$Body.bodyset == null) {
			zpp_$nape_phys_ZPP_$Body.bodyset = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body();
			zpp_$nape_phys_ZPP_$Body.bodyset.lt = zpp_$nape_phys_ZPP_$Body.bodysetlt;
			zpp_$nape_phys_ZPP_$Body.bodystack = new zpp_$nape_util_ZNPList_$ZPP_$Body();
		}
	}
	,connectedBodies_cont: function(b) {
		if(zpp_$nape_phys_ZPP_$Body.bodyset.try_insert_bool(b.zpp_inner)) {
			zpp_$nape_phys_ZPP_$Body.bodystack.add(b.zpp_inner);
			b.zpp_inner.graph_depth = zpp_$nape_phys_ZPP_$Body.cur_graph_depth + 1;
		}
	}
	,connectedBodies: function(depth,output) {
		var _g = this;
		if(zpp_$nape_phys_ZPP_$Body.bodyset == null) {
			zpp_$nape_phys_ZPP_$Body.bodyset = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body();
			zpp_$nape_phys_ZPP_$Body.bodyset.lt = zpp_$nape_phys_ZPP_$Body.bodysetlt;
			zpp_$nape_phys_ZPP_$Body.bodystack = new zpp_$nape_util_ZNPList_$ZPP_$Body();
		}
		null;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		zpp_$nape_phys_ZPP_$Body.bodystack.add(this);
		zpp_$nape_phys_ZPP_$Body.bodyset.insert(this);
		this.graph_depth = 0;
		while(!(zpp_$nape_phys_ZPP_$Body.bodystack.head == null)) {
			var cur = zpp_$nape_phys_ZPP_$Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			zpp_$nape_phys_ZPP_$Body.cur_graph_depth = cur.graph_depth;
			var cx_ite = cur.constraints.head;
			while(cx_ite != null) {
				var c = cx_ite.elt;
				c.outer.visitBodies($bind(this,this.connectedBodies_cont));
				cx_ite = cx_ite.next;
			}
		}
		zpp_$nape_phys_ZPP_$Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,interactingBodies: function(arbiter_type,depth,output) {
		var _g = this;
		if(zpp_$nape_phys_ZPP_$Body.bodyset == null) {
			zpp_$nape_phys_ZPP_$Body.bodyset = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body();
			zpp_$nape_phys_ZPP_$Body.bodyset.lt = zpp_$nape_phys_ZPP_$Body.bodysetlt;
			zpp_$nape_phys_ZPP_$Body.bodystack = new zpp_$nape_util_ZNPList_$ZPP_$Body();
		}
		null;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		zpp_$nape_phys_ZPP_$Body.bodyset.insert(this);
		zpp_$nape_phys_ZPP_$Body.bodystack.add(this);
		this.graph_depth = 0;
		while(!(zpp_$nape_phys_ZPP_$Body.bodystack.head == null)) {
			var cur = zpp_$nape_phys_ZPP_$Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			var cx_ite = cur.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if((arb.type & arbiter_type) != 0) {
					var other;
					if(arb.b1 == cur) other = arb.b2; else other = arb.b1;
					if(zpp_$nape_phys_ZPP_$Body.bodyset.try_insert_bool(other)) {
						zpp_$nape_phys_ZPP_$Body.bodystack.add(other);
						other.graph_depth = cur.graph_depth + 1;
					}
				}
				cx_ite = cx_ite.next;
			}
		}
		zpp_$nape_phys_ZPP_$Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,atRest: function(dt) {
		if(!(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) return this.component.sleeping; else {
			var linSq = nape_Config.linearSleepThreshold;
			linSq *= linSq;
			var cansleep;
			if(this.velx * this.velx + this.vely * this.vely > linSq) cansleep = false; else if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(this.posx,this.posy,this.pre_posx,this.pre_posy) > 0.25 * linSq * dt * dt) cansleep = false; else {
				var dx = 0.0;
				var dy = 0.0;
				dx = this.aabb.maxx - this.aabb.minx;
				dy = this.aabb.maxy - this.aabb.miny;
				var idl = dx * dx + dy * dy;
				var angSq = nape_Config.angularSleepThreshold;
				angSq *= angSq;
				if(4 * this.angvel * this.angvel * idl > angSq) cansleep = false; else {
					var dr = this.rot - this.pre_rot;
					if(dr * dr * idl > angSq * dt * dt) cansleep = false; else cansleep = true;
				}
			}
			if(!cansleep) this.component.waket = this.space.stamp;
			return this.component.waket + nape_Config.sleepDelay < this.space.stamp;
		}
	}
	,refreshArbiters: function() {
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			arb.invalidated = true;
			cx_ite = cx_ite.next;
		}
	}
	,sweepIntegrate: function(dt) {
		var delta = dt - this.sweepTime;
		if(delta != 0) {
			this.sweepTime = dt;
			var t = delta;
			this.posx += this.velx * t;
			this.posy += this.vely * t;
			if(this.angvel != 0) this.delta_rot(this.sweep_angvel * delta);
		}
	}
	,sweepValidate: function(s) {
		if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			s.worldCOMx = this.posx + (this.axisy * s.localCOMx - this.axisx * s.localCOMy);
			s.worldCOMy = this.posy + (s.localCOMx * this.axisx + s.localCOMy * this.axisy);
		} else {
			var p = s.polygon;
			var li = p.lverts.next;
			var cx_ite = p.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.posx + (this.axisy * l.x - this.axisx * l.y);
				g.y = this.posy + (l.x * this.axisx + l.y * this.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p.edges.head;
			var cx_ite1 = p.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v1 = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = this.axisy * e.lnormx - this.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.axisx + e.lnormy * this.axisy;
				e.gprojection = this.posx * e.gnormx + this.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v1.y * e.gnormx - v1.x * e.gnormy;
				u = v1;
				cx_ite1 = cx_ite1.next;
			}
			var v = p.gverts.next;
			var e1 = ite.elt;
			ite = ite.next;
			e1.gnormx = this.axisy * e1.lnormx - this.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * this.axisx + e1.lnormy * this.axisy;
			e1.gprojection = this.posx * e1.gnormx + this.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v.y * e1.gnormx - v.x * e1.gnormy;
		}
	}
	,invalidate_pos: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,pos_invalidate: function(pos) {
		this.immutable_midstep("Body::position");
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.space != null) throw new js__$Boot_HaxeError("Error: Cannot move a static object once inside a Space");
		if(!(this.posx == pos.x && this.posy == pos.y)) {
			this.posx = pos.x;
			this.posy = pos.y;
			this.invalidate_pos();
			this.wake();
		}
	}
	,pos_validate: function() {
		this.wrap_pos.zpp_inner.x = this.posx;
		this.wrap_pos.zpp_inner.y = this.posy;
	}
	,vel_invalidate: function(vel) {
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) throw new js__$Boot_HaxeError("Error: Static body cannot have its velocity set.");
		this.velx = vel.x;
		this.vely = vel.y;
		this.wake();
	}
	,vel_validate: function() {
		this.wrap_vel.zpp_inner.x = this.velx;
		this.wrap_vel.zpp_inner.y = this.vely;
	}
	,kinvel_invalidate: function(vel) {
		this.kinvelx = vel.x;
		this.kinvely = vel.y;
		this.wake();
	}
	,kinvel_validate: function() {
		this.wrap_kinvel.zpp_inner.x = this.kinvelx;
		this.wrap_kinvel.zpp_inner.y = this.kinvely;
	}
	,svel_invalidate: function(vel) {
		this.svelx = vel.x;
		this.svely = vel.y;
		this.wake();
	}
	,svel_validate: function() {
		this.wrap_svel.zpp_inner.x = this.svelx;
		this.wrap_svel.zpp_inner.y = this.svely;
	}
	,force_invalidate: function(force) {
		if(!(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Non-dynamic body cannot have force applied.");
		this.forcex = force.x;
		this.forcey = force.y;
		this.wake();
	}
	,force_validate: function() {
		this.wrap_force.zpp_inner.x = this.forcex;
		this.wrap_force.zpp_inner.y = this.forcey;
	}
	,setupPosition: function() {
		this.wrap_pos = nape_geom_Vec2.get(this.posx,this.posy,null);
		this.wrap_pos.zpp_inner._inuse = true;
		if(this.world) this.wrap_pos.zpp_inner._immutable = true; else {
			this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
			this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
		}
	}
	,setupVelocity: function() {
		this.wrap_vel = nape_geom_Vec2.get(this.velx,this.vely,null);
		this.wrap_vel.zpp_inner._inuse = true;
		if(this.world) this.wrap_vel.zpp_inner._immutable = true; else {
			this.wrap_vel.zpp_inner._invalidate = $bind(this,this.vel_invalidate);
			this.wrap_vel.zpp_inner._validate = $bind(this,this.vel_validate);
		}
	}
	,setupkinvel: function() {
		this.wrap_kinvel = nape_geom_Vec2.get(this.kinvelx,this.kinvely,null);
		this.wrap_kinvel.zpp_inner._inuse = true;
		if(this.world) this.wrap_kinvel.zpp_inner._immutable = true; else {
			this.wrap_kinvel.zpp_inner._invalidate = $bind(this,this.kinvel_invalidate);
			this.wrap_kinvel.zpp_inner._validate = $bind(this,this.kinvel_validate);
		}
	}
	,setupsvel: function() {
		this.wrap_svel = nape_geom_Vec2.get(this.svelx,this.svely,null);
		this.wrap_svel.zpp_inner._inuse = true;
		if(this.world) this.wrap_svel.zpp_inner._immutable = true; else {
			this.wrap_svel.zpp_inner._invalidate = $bind(this,this.svel_invalidate);
			this.wrap_svel.zpp_inner._validate = $bind(this,this.svel_validate);
		}
	}
	,setupForce: function() {
		this.wrap_force = nape_geom_Vec2.get(this.forcex,this.forcey,null);
		this.wrap_force.zpp_inner._inuse = true;
		if(this.world) this.wrap_force.zpp_inner._immutable = true; else {
			this.wrap_force.zpp_inner._invalidate = $bind(this,this.force_invalidate);
			this.wrap_force.zpp_inner._validate = $bind(this,this.force_validate);
		}
	}
	,cvel_validate: function() {
		this.wrapcvel.zpp_inner.x = this.velx + this.kinvelx;
		this.wrapcvel.zpp_inner.y = this.vely + this.kinvely;
		this.wrapcvel.zpp_inner.z = this.angvel + this.kinangvel;
	}
	,setup_cvel: function() {
		var me = this;
		this.wrapcvel = nape_geom_Vec3.get();
		this.wrapcvel.zpp_inner.immutable = true;
		this.wrapcvel.zpp_inner._validate = $bind(this,this.cvel_validate);
	}
	,invalidate_rot: function() {
		this.zip_axis = true;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,validate_axis: function() {
		if(this.zip_axis) {
			this.zip_axis = false;
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		}
	}
	,quick_validate_axis: function() {
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
	}
	,delta_rot: function(dr) {
		this.rot += dr;
		if(dr * dr > 0.0001) {
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * this.axisx + dr * this.axisy) * m;
			this.axisy = (p * this.axisy - dr * this.axisx) * m;
			this.axisx = nx;
		}
	}
	,invalidate_mass: function() {
		this.zip_mass = true;
		this.invalidate_gravMass();
	}
	,validate_mass: function() {
		var exist = false;
		if(this.zip_mass || this.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && exist) {
			this.zip_mass = false;
			if(this.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT) {
				this.cmass = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cmass += s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && !this.nomove) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Infinity;
				this.imass = this.smass = 0.0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,invalidate_gravMass: function() {
		if(this.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED) this.zip_gravMass = true;
		if(this.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true;
		this.wake();
	}
	,validate_gravMass: function() {
		if(this.zip_gravMass) {
			this.zip_gravMass = false;
			this.validate_mass();
			if(this.gravMassMode == zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT) {
				this.validate_mass();
				this.gravMass = this.cmass;
			} else if(this.gravMassMode == zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED) {
				this.validate_mass();
				this.gravMass = this.cmass * this.gravMassScale;
			}
		}
	}
	,invalidate_gravMassScale: function() {
		if(this.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true; else this.invalidate_gravMass();
	}
	,validate_gravMassScale: function() {
		if(this.zip_gravMassScale) {
			this.zip_gravMassScale = false;
			if(this.gravMassMode == zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT) this.gravMassScale = 1.0; else if(this.gravMassMode == zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED) {
				this.validate_mass();
				this.gravMassScale = this.gravMass / this.cmass;
			}
		}
	}
	,invalidate_inertia: function() {
		this.zip_inertia = true;
		this.wake();
	}
	,validate_inertia: function() {
		var exist = false;
		if(this.zip_inertia || this.inertiaMode == zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT && exist) {
			this.zip_inertia = false;
			if(this.inertiaMode == zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT) {
				this.cinertia = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cinertia += s.inertia * s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && !this.norotate) {
				this.inertia = this.cinertia;
				this.sinertia = this.iinertia = 1.0 / this.inertia;
			} else {
				this.inertia = Infinity;
				this.sinertia = this.iinertia = 0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,invalidate_wake: function() {
		this.wake();
	}
	,validate_aabb: function() {
		if(this.shapes.head == null) throw new js__$Boot_HaxeError("Error: Body bounds only makes sense if it contains shapes");
		if(this.zip_aabb) {
			this.zip_aabb = false;
			this.aabb.minx = Infinity;
			this.aabb.miny = Infinity;
			this.aabb.maxx = -Infinity;
			this.aabb.maxy = -Infinity;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_aabb) {
					if(s.body != null) {
						s.zip_aabb = false;
						if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
					}
				}
				this.aabb.combine(s.aabb);
				cx_ite = cx_ite.next;
			}
		}
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			var tempx = 0;
			var tempy = 0;
			var msum = 0.0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.validate_area_inertia();
				var t = s.area * s.material.density;
				tempx += s.localCOMx * t;
				tempy += s.localCOMy * t;
				msum += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
			if(msum != 0) {
				var t1 = 1.0 / msum;
				this.localCOMx = tempx * t1;
				this.localCOMy = tempy * t1;
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
			if(this.zip_mass && this.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT) {
				this.zip_mass = false;
				this.cmass = msum;
				if(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					this.mass = this.cmass;
					this.imass = this.smass = 1.0 / this.mass;
				} else {
					this.mass = Infinity;
					this.imass = this.smass = 0.0;
				}
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			this.zip_worldCOM = false;
			this.validate_localCOM();
			if(this.zip_axis) {
				this.zip_axis = false;
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
				null;
			}
			this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
			this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	,getlocalCOM: function() {
		if(this.shapes.head == null) throw new js__$Boot_HaxeError("Error: localCOM only makes sense when Body has Shapes");
		this.validate_localCOM();
	}
	,getworldCOM: function() {
		if(this.shapes.head == null) throw new js__$Boot_HaxeError("Error: worldCOM only makes sense when Body has Shapes");
		this.validate_worldCOM();
	}
	,__immutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) throw new js__$Boot_HaxeError("Error: " + name + " cannot be set during a space step()");
	}
	,clear: function() {
		if(this.space != null) throw new js__$Boot_HaxeError("Error: Cannot clear a Body if it is currently being used by a Space!");
		if(!(this.constraints.head == null)) throw new js__$Boot_HaxeError("Error: Cannot clear a Body if it is currently being used by a constraint!");
		while(!(this.shapes.head == null)) {
			var s = this.shapes.pop_unsafe();
			s.removedFromBody();
			s.body = null;
		}
		this.invalidate_shapes();
		this.pre_posx = 0;
		this.pre_posy = 0;
		this.posx = 0;
		this.posy = 0;
		this.velx = 0;
		this.vely = 0;
		this.forcex = 0;
		this.forcey = 0;
		this.kinvelx = 0;
		this.kinvely = 0;
		this.svelx = 0;
		this.svely = 0;
		this.angvel = this.torque = this.kinangvel = this.pre_rot = this.rot = 0;
		this.invalidate_pos();
		this.invalidate_rot();
		this.axisx = 0;
		this.axisy = 1;
		this.zip_axis = false;
		this.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT;
		this.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT;
		this.gravMassScale = 1.0;
		this.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT;
		this.norotate = false;
		this.nomove = false;
	}
	,aabb_validate: function() {
		if(this.shapes.head == null) throw new js__$Boot_HaxeError("Error: bounds only makes sense when Body has shapes");
		this.validate_aabb();
	}
	,shapes_adder: function(s) {
		if(s.zpp_inner.body != this) {
			if(s.zpp_inner.body != null) s.zpp_inner.body.wrap_shapes.remove(s);
			s.zpp_inner.body = this;
			s.zpp_inner.addedToBody();
			if(this.space != null) this.space.added_shape(s.zpp_inner,null);
			if(s.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
				s.zpp_inner.polygon.invalidate_gaxi();
				s.zpp_inner.polygon.invalidate_gverts();
			}
			return true;
		} else return false;
	}
	,shapes_subber: function(s) {
		if(this.space != null) this.space.removed_shape(s.zpp_inner);
		s.zpp_inner.body = null;
		s.zpp_inner.removedFromBody();
	}
	,shapes_invalidate: function(_) {
		this.invalidate_shapes();
	}
	,shapes_modifiable: function() {
		this.immutable_midstep("Body::shapes");
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.space != null) throw new js__$Boot_HaxeError("Error: Cannot modifiy shapes of static object once added to Space");
	}
	,addedToSpace: function() {
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) this.component = new zpp_$nape_space_ZPP_$Component(); else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = true;
		this.component.body = this;
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		while(!(this.arbiters.head == null)) {
			var arb = this.arbiters.pop_unsafe();
			arb.cleared = true;
			if(arb.b2 == this) arb.b1.arbiters.inlined_try_remove(arb);
			if(arb.b1 == this) arb.b2.arbiters.inlined_try_remove(arb);
			if(arb.pair != null) {
				arb.pair.arb = null;
				arb.pair = null;
			}
			arb.active = false;
			this.space.f_arbiters.modified = true;
		}
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
		this.__iremovedFromSpace();
	}
	,copy: function() {
		var ret = new nape_phys_Body().zpp_inner;
		ret.type = this.type;
		ret.bulletEnabled = this.bulletEnabled;
		ret.disableCCD = this.disableCCD;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			ret.outer.zpp_inner.wrap_shapes.add(s.outer.copy());
			cx_ite = cx_ite.next;
		}
		ret.posx = this.posx;
		ret.posy = this.posy;
		ret.velx = this.velx;
		ret.vely = this.vely;
		ret.forcex = this.forcex;
		ret.forcey = this.forcey;
		ret.rot = this.rot;
		ret.angvel = this.angvel;
		ret.torque = this.torque;
		ret.kinvelx = this.kinvelx;
		ret.kinvely = this.kinvely;
		ret.kinangvel = this.kinangvel;
		ret.svelx = this.svelx;
		ret.svely = this.svely;
		if(!this.zip_axis) {
			ret.axisx = this.axisx;
			ret.axisy = this.axisy;
		} else ret.invalidate_rot();
		ret.rot = this.rot;
		ret.massMode = this.massMode;
		ret.gravMassMode = this.gravMassMode;
		ret.inertiaMode = this.inertiaMode;
		ret.norotate = this.norotate;
		ret.nomove = this.nomove;
		ret.cmass = this.cmass;
		ret.cinertia = this.cinertia;
		if(!this.zip_mass) ret.mass = this.mass; else ret.invalidate_mass();
		if(!this.zip_gravMass) ret.gravMass = this.gravMass; else ret.invalidate_gravMass();
		if(!this.zip_gravMassScale) ret.gravMassScale = this.gravMassScale; else ret.invalidate_gravMassScale();
		if(!this.zip_inertia) ret.inertia = this.inertia; else ret.invalidate_inertia();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else ret.zip_aabb = true;
		if(!this.zip_localCOM) {
			ret.localCOMx = this.localCOMx;
			ret.localCOMy = this.localCOMy;
		} else {
			ret.zip_localCOM = true;
			ret.zip_worldCOM = true;
		}
		if(!this.zip_worldCOM) {
			ret.worldCOMx = this.worldCOMx;
			ret.worldCOMy = this.worldCOMy;
		} else ret.zip_worldCOM = true;
		this.copyto(ret.outer);
		return ret.outer;
	}
	,__class__: zpp_$nape_phys_ZPP_$Body
});
var zpp_$nape_phys_ZPP_$Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	var me = this;
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
};
$hxClasses["zpp_nape.phys.ZPP_Compound"] = zpp_$nape_phys_ZPP_$Compound;
zpp_$nape_phys_ZPP_$Compound.__name__ = true;
zpp_$nape_phys_ZPP_$Compound.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Compound.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	__imutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) throw new js__$Boot_HaxeError("Error: " + name + " cannot be set during space step()");
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
	}
	,breakApart: function() {
		if(this.space != null) {
			this.__iremovedFromSpace();
			this.space.nullInteractorType(this);
		}
		if(this.compound != null) this.compound.compounds.remove(this); else if(this.space != null) this.space.compounds.remove(this);
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if((b.compound = this.compound) != null) this.compound.bodies.add(b); else if(this.space != null) this.space.bodies.add(b);
			if(this.space != null) this.space.freshInteractorType(b);
		}
		while(!(this.constraints.head == null)) {
			var c = this.constraints.pop_unsafe();
			if((c.compound = this.compound) != null) this.compound.constraints.add(c); else if(this.space != null) this.space.constraints.add(c);
		}
		while(!(this.compounds.head == null)) {
			var c1 = this.compounds.pop_unsafe();
			if((c1.compound = this.compound) != null) this.compound.compounds.add(c1); else if(this.space != null) this.space.compounds.add(c1);
			if(this.space != null) this.space.freshInteractorType(c1);
		}
		this.compound = null;
		this.space = null;
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_bodies.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_bodies.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remBody(x.zpp_inner);
	}
	,bodies_modifiable: function() {
		this.immutable_midstep("Compound::" + "bodies");
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_constraints.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_constraints.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remConstraint(x.zpp_inner);
	}
	,constraints_modifiable: function() {
		this.immutable_midstep("Compound::" + "constraints");
	}
	,compounds_adder: function(x) {
		var cur = this;
		while(cur != null && cur != x.zpp_inner) cur = cur.compound;
		if(cur == x.zpp_inner) {
			throw new js__$Boot_HaxeError("Error: Assignment would cause a cycle in the Compound tree: assigning " + x.toString() + ".compound = " + this.outer.toString());
			return false;
		}
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_compounds.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			x.zpp_inner.compound = this;
			x.zpp_inner.depth = this.depth + 1;
			if(this.space != null) this.space.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,compounds_subber: function(x) {
		x.zpp_inner.compound = null;
		x.zpp_inner.depth = 1;
		if(this.space != null) this.space.remCompound(x.zpp_inner);
	}
	,compounds_modifiable: function() {
		this.immutable_midstep("Compound::" + "compounds");
	}
	,copy: function(dict,todo) {
		var root = dict == null;
		if(dict == null) dict = [];
		if(todo == null) todo = [];
		var ret = new nape_phys_Compound();
		var cx_ite = this.compounds.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			var cc = c.copy(dict,todo);
			cc.zpp_inner.immutable_midstep("Compound::compound");
			if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != ret) {
				if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != null) (cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(cc);
				if(ret != null) ret.zpp_inner.wrap_compounds.add(cc);
			}
			if(cc.zpp_inner.compound == null) null; else cc.zpp_inner.compound.outer;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.bodies.head;
		while(cx_ite1 != null) {
			var b = cx_ite1.elt;
			var bc = b.outer.copy();
			dict.push(zpp_$nape_constraint_ZPP_$CopyHelper.dict(b.id,bc));
			if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != ret) {
				if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != null) (bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(bc);
				if(ret != null) ret.zpp_inner.wrap_bodies.add(bc);
			}
			if(bc.zpp_inner.compound == null) null; else bc.zpp_inner.compound.outer;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.constraints.head;
		while(cx_ite2 != null) {
			var c1 = cx_ite2.elt;
			var cc1 = c1.copy(dict,todo);
			if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != ret) {
				if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != null) (cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(cc1);
				if(ret != null) ret.zpp_inner.wrap_constraints.add(cc1);
			}
			if(cc1.zpp_inner.compound == null) null; else cc1.zpp_inner.compound.outer;
			cx_ite2 = cx_ite2.next;
		}
		if(root) while(todo.length > 0) {
			var xcb = todo.pop();
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == xcb.id) {
					xcb.cb(idc.bc);
					break;
				}
			}
		}
		this.copyto(ret);
		return ret;
	}
	,__class__: zpp_$nape_phys_ZPP_$Compound
});
var zpp_$nape_phys_ZPP_$FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
$hxClasses["zpp_nape.phys.ZPP_FluidProperties"] = zpp_$nape_phys_ZPP_$FluidProperties;
zpp_$nape_phys_ZPP_$FluidProperties.__name__ = true;
zpp_$nape_phys_ZPP_$FluidProperties.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_phys_FluidProperties();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool;
			zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,feature_cons: function() {
		this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret;
		if(zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool == null) ret = new zpp_$nape_phys_ZPP_$FluidProperties(); else {
			ret = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool;
			zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.viscosity = this.viscosity;
		ret.density = this.density;
		return ret;
	}
	,gravity_invalidate: function(x) {
		this.gravityx = x.x;
		this.gravityy = x.y;
		this.invalidate();
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,getgravity: function() {
		this.wrap_gravity = nape_geom_Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			shape.invalidate_fluidprops();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$FluidProperties
};
var zpp_$nape_phys_ZPP_$Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
$hxClasses["zpp_nape.phys.ZPP_Material"] = zpp_$nape_phys_ZPP_$Material;
zpp_$nape_phys_ZPP_$Material.__name__ = true;
zpp_$nape_phys_ZPP_$Material.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_phys_Material();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,feature_cons: function() {
		this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret = new zpp_$nape_phys_ZPP_$Material();
		ret.dynamicFriction = this.dynamicFriction;
		ret.staticFriction = this.staticFriction;
		ret.density = this.density;
		ret.elasticity = this.elasticity;
		ret.rollingFriction = this.rollingFriction;
		return ret;
	}
	,set: function(x) {
		this.dynamicFriction = x.dynamicFriction;
		this.staticFriction = x.staticFriction;
		this.density = x.density;
		this.elasticity = x.elasticity;
		this.rollingFriction = x.rollingFriction;
	}
	,invalidate: function(x) {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_material(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$Material
};
var zpp_$nape_shape_ZPP_$Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.pairs = new zpp_$nape_util_ZNPList_$ZPP_$AABBPair();
	this.ishape = this;
	this.type = type;
	this.aabb = zpp_$nape_geom_ZPP_$AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_$nape_phys_ZPP_$Material();
	this.sweepRadius = this.sweepCoef = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Shape"] = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Shape.__name__ = true;
zpp_$nape_shape_ZPP_$Shape.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_shape_ZPP_$Shape.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	isCircle: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE;
	}
	,isPolygon: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON;
	}
	,invalidate_sweepRadius: function() {
		this.zip_sweepRadius = true;
	}
	,validate_sweepRadius: function() {
		if(this.zip_sweepRadius) {
			this.zip_sweepRadius = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_sweepRadius(); else this.polygon.__validate_sweepRadius();
		}
	}
	,clear: function() {
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__clear(); else this.polygon.__clear();
	}
	,validate_aabb: function() {
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,force_validate_aabb: function() {
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle._force_validate_aabb(); else this.polygon._force_validate_aabb();
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
		}
	}
	,validate_angDrag: function() {
		if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
			this.zip_angDrag = false;
			this.refmaterial.dynamicFriction = this.material.dynamicFriction;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_angDrag(); else this.polygon.__validate_angDrag();
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
	}
	,getworldCOM: function() {
		if(this.body == null) throw new js__$Boot_HaxeError("Error: worldCOM only makes sense when Shape belongs to a Body");
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
		this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
	}
	,invalidate_area_inertia: function() {
		this.zip_area_inertia = true;
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	,invalidate_angDrag: function() {
		this.zip_angDrag = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_area_inertia();
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zip_sweepRadius = true;
		this.invalidate_angDrag();
		this.invalidate_worldCOM();
		if(this.body != null) this.body.invalidate_localCOM();
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,invalidate_material: function(flags) {
		if((flags & zpp_$nape_phys_ZPP_$Material.WAKE) != 0) this.wake();
		if((flags & zpp_$nape_phys_ZPP_$Material.ARBITERS) != 0) {
			if(this.body != null) this.body.refreshArbiters();
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.PROPS) != 0) {
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ANGDRAG) != 0) this.invalidate_angDrag();
		this.refmaterial.set(this.material);
	}
	,invalidate_filter: function() {
		this.wake();
	}
	,invalidate_fluidprops: function() {
		if(this.fluidEnabled) this.wake();
	}
	,aabb_validate: function() {
		if(this.body == null) throw new js__$Boot_HaxeError("Error: bounds only makes sense when Shape belongs to a Body");
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,setMaterial: function(material) {
		if(this.material != material) {
			if(this.body != null && this.body.space != null) {
				if(this.material != null) this.material.shapes.remove(this);
			}
			this.material = material;
			if(this.body != null && this.body.space != null) material.shapes.add(this);
			this.wake();
			if(this.body != null) this.body.refreshArbiters();
		}
	}
	,setFilter: function(filter) {
		if(this.filter != filter) {
			if(this.body != null && this.body.space != null) {
				if(this.filter != null) this.filter.shapes.remove(this);
			}
			this.filter = filter;
			if(this.body != null && this.body.space != null) filter.shapes.add(this);
			this.wake();
		}
	}
	,setFluid: function(fluid) {
		if(this.fluidProperties != fluid) {
			if(this.body != null && this.body.space != null) {
				if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
			}
			this.fluidProperties = fluid;
			if(this.body != null && this.body.space != null) fluid.shapes.add(this);
			if(this.fluidEnabled) this.wake();
		}
	}
	,__immutable_midstep: function(name) {
		if(this.body != null && this.body.space != null && this.body.space.midstep) throw new js__$Boot_HaxeError("Error: " + name + " cannot be set during a space step()");
	}
	,addedToBody: function() {
		this.invalidate_worldCOM();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,removedFromBody: function() {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
		this.material.shapes.add(this);
		this.filter.shapes.add(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.add(this);
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
		this.material.shapes.remove(this);
		this.filter.shapes.remove(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
	}
	,copy: function() {
		var ret = null;
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ret = this.circle.__copy(); else ret = this.polygon.__copy();
		if(!this.zip_area_inertia) {
			ret.area = this.area;
			ret.inertia = this.inertia;
		} else ret.invalidate_area_inertia();
		if(!this.zip_sweepRadius) {
			ret.sweepRadius = this.sweepRadius;
			ret.sweepCoef = this.sweepCoef;
		} else ret.zip_sweepRadius = true;
		if(!this.zip_angDrag) ret.angDrag = this.angDrag; else ret.invalidate_angDrag();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else {
			ret.zip_aabb = true;
			if(ret.body != null) ret.body.zip_aabb = true;
		}
		var o = ret.material;
		o.outer = null;
		o.next = zpp_$nape_phys_ZPP_$Material.zpp_pool;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = o;
		var o1 = ret.filter;
		o1.outer = null;
		o1.next = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = o1;
		ret.material = this.material;
		ret.filter = this.filter;
		if(this.fluidProperties != null) ret.fluidProperties = this.fluidProperties;
		ret.fluidEnabled = this.fluidEnabled;
		ret.sensorEnabled = this.sensorEnabled;
		if(this.userData != null) ret.userData = Reflect.copy(this.userData);
		this.copyto(ret.outer);
		return ret.outer;
	}
	,__class__: zpp_$nape_shape_ZPP_$Shape
});
var zpp_$nape_shape_ZPP_$Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE);
	this.circle = this;
	this.zip_localCOM = false;
};
$hxClasses["zpp_nape.shape.ZPP_Circle"] = zpp_$nape_shape_ZPP_$Circle;
zpp_$nape_shape_ZPP_$Circle.__name__ = true;
zpp_$nape_shape_ZPP_$Circle.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Circle.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	__clear: function() {
	}
	,invalidate_radius: function() {
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		if(this.body != null) this.body.wake();
	}
	,localCOM_validate: function() {
		this.wrap_localCOM.zpp_inner.x = this.localCOMx;
		this.wrap_localCOM.zpp_inner.y = this.localCOMy;
	}
	,localCOM_invalidate: function(x) {
		this.localCOMx = x.x;
		this.localCOMy = x.y;
		this.invalidate_localCOM();
		if(this.body != null) this.body.wake();
	}
	,localCOM_immutable: function() {
		if(this.body != null && this.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.body.space != null) throw new js__$Boot_HaxeError("Error: Cannot modify localCOM of Circle added to a static Body whilst within a Space");
	}
	,setupLocalCOM: function() {
		var me = this;
		this.wrap_localCOM = nape_geom_Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
		this.wrap_localCOM.zpp_inner._isimmutable = $bind(this,this.localCOM_immutable);
	}
	,__validate_aabb: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		var rx = this.radius;
		var ry = this.radius;
		this.aabb.minx = this.worldCOMx - rx;
		this.aabb.miny = this.worldCOMy - ry;
		this.aabb.maxx = this.worldCOMx + rx;
		this.aabb.maxy = this.worldCOMy + ry;
	}
	,_force_validate_aabb: function() {
		this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
		this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		this.aabb.minx = this.worldCOMx - this.radius;
		this.aabb.miny = this.worldCOMy - this.radius;
		this.aabb.maxx = this.worldCOMx + this.radius;
		this.aabb.maxy = this.worldCOMy + this.radius;
	}
	,__validate_sweepRadius: function() {
		this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
		this.sweepRadius = this.sweepCoef + this.radius;
	}
	,__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__validate_angDrag: function() {
		var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
		var r2 = this.radius * this.radius;
		var skin = this.material.dynamicFriction * nape_Config.fluidAngularDragFriction;
		this.angDrag = (lc + 2 * r2) * skin + 0.5 * nape_Config.fluidAngularDrag * (1 + nape_Config.fluidVacuumDrag) * lc;
		this.angDrag /= 2 * (lc + 0.5 * r2);
	}
	,__scale: function(sx,sy) {
		var factor;
		factor = ((sx < 0?-sx:sx) + (sy < 0?-sy:sy)) / 2;
		if(factor < 0) this.radius *= -factor; else this.radius *= factor;
		this.invalidate_radius();
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			this.localCOMx *= sx;
			this.localCOMy *= sy;
			this.invalidate_localCOM();
		}
	}
	,__translate: function(x,y) {
		var t = 1.0;
		this.localCOMx += x * t;
		this.localCOMy += y * t;
		this.invalidate_localCOM();
	}
	,__rotate: function(x,y) {
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			var tx = 0.0;
			var ty = 0.0;
			tx = y * this.localCOMx - x * this.localCOMy;
			ty = this.localCOMx * x + this.localCOMy * y;
			this.localCOMx = tx;
			this.localCOMy = ty;
			this.invalidate_localCOM();
		}
	}
	,__transform: function(m) {
		var det = m.zpp_inner.a * m.zpp_inner.d - m.zpp_inner.b * m.zpp_inner.c;
		if(det < 0) det = -det;
		this.radius *= Math.sqrt(det);
		var t = m.zpp_inner.a * this.localCOMx + m.zpp_inner.b * this.localCOMy + m.zpp_inner.tx;
		this.localCOMy = m.zpp_inner.c * this.localCOMx + m.zpp_inner.d * this.localCOMy + m.zpp_inner.ty;
		this.localCOMx = t;
		this.invalidate_radius();
		this.invalidate_localCOM();
	}
	,__copy: function() {
		var ret = new nape_shape_Circle(this.radius).zpp_inner_zn;
		ret.localCOMx = this.localCOMx;
		ret.localCOMy = this.localCOMy;
		ret.zip_localCOM = false;
		return ret;
	}
	,__class__: zpp_$nape_shape_ZPP_$Circle
});
var zpp_$nape_shape_ZPP_$Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Edge"] = zpp_$nape_shape_ZPP_$Edge;
zpp_$nape_shape_ZPP_$Edge.__name__ = true;
zpp_$nape_shape_ZPP_$Edge.prototype = {
	free: function() {
		this.polygon = null;
	}
	,alloc: function() {
	}
	,wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_shape_ZPP_$Edge.internal = true;
			this.outer = new nape_shape_Edge();
			zpp_$nape_shape_ZPP_$Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,lnorm_validate: function() {
		if(this.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not currently in use");
		this.polygon.validate_laxi();
		this.wrap_lnorm.zpp_inner.x = this.lnormx;
		this.wrap_lnorm.zpp_inner.y = this.lnormy;
	}
	,gnorm_validate: function() {
		if(this.polygon == null) throw new js__$Boot_HaxeError("Error: Edge not currently in use");
		if(this.polygon.body == null) throw new js__$Boot_HaxeError("Error: Edge worldNormal only makes sense if the parent Polygon is contained within a rigid body");
		this.polygon.validate_gaxi();
		this.wrap_gnorm.zpp_inner.x = this.gnormx;
		this.wrap_gnorm.zpp_inner.y = this.gnormy;
	}
	,getlnorm: function() {
		this.wrap_lnorm = nape_geom_Vec2.get(this.lnormx,this.lnormy,null);
		this.wrap_lnorm.zpp_inner._immutable = true;
		this.wrap_lnorm.zpp_inner._validate = $bind(this,this.lnorm_validate);
	}
	,getgnorm: function() {
		this.wrap_gnorm = nape_geom_Vec2.get(this.gnormx,this.gnormy,null);
		this.wrap_gnorm.zpp_inner._immutable = true;
		this.wrap_gnorm.zpp_inner._validate = $bind(this,this.gnorm_validate);
	}
	,__class__: zpp_$nape_shape_ZPP_$Edge
};
var zpp_$nape_shape_ZPP_$Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON);
	this.polygon = this;
	this.lverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.gverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.edges = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this.edgeCnt = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Polygon"] = zpp_$nape_shape_ZPP_$Polygon;
zpp_$nape_shape_ZPP_$Polygon.__name__ = true;
zpp_$nape_shape_ZPP_$Polygon.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Polygon.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	__clear: function() {
	}
	,lverts_pa_invalidate: function(x) {
		this.invalidate_lverts();
	}
	,lverts_pa_immutable: function() {
		if(this.body != null && this.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.body.space != null) throw new js__$Boot_HaxeError("Error: Cannot modify local vertex of Polygon added to a static body whilst within a Space");
	}
	,gverts_pa_validate: function() {
		if(this.body == null) throw new js__$Boot_HaxeError("Error: World vertex only makes sense when Polygon is contained in a rigid body");
		this.validate_gverts();
	}
	,lverts_post_adder: function(x) {
		x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
		x.zpp_inner._isimmutable = $bind(this,this.lverts_pa_immutable);
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x.zpp_inner) break; else {
				if(ite == null) ite = this.gverts.next; else ite = ite.next;
				if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var vec = zpp_$nape_geom_ZPP_$Vec2.get(0,0,true);
		this.gverts.insert(ite,vec);
		if(this.lverts.next.next != null) {
			if(this.lverts.next.next.next == null) {
				var ed;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) ed = new zpp_$nape_shape_ZPP_$Edge(); else {
					ed = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				null;
				ed.polygon = this;
				this.edges.add(ed);
				var ed1;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) ed1 = new zpp_$nape_shape_ZPP_$Edge(); else {
					ed1 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed1.next;
					ed1.next = null;
				}
				null;
				ed1.polygon = this;
				this.edges.add(ed1);
				this.edgeCnt += 2;
			} else {
				var ed2;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) ed2 = new zpp_$nape_shape_ZPP_$Edge(); else {
					ed2 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed2.next;
					ed2.next = null;
				}
				null;
				ed2.polygon = this;
				this.edges.insert(ite2,ed2);
				this.edgeCnt++;
			}
		}
		vec._validate = $bind(this,this.gverts_pa_validate);
	}
	,lverts_subber: function(x) {
		this.cleanup_lvert(x.zpp_inner);
	}
	,lverts_invalidate: function(_) {
		this.invalidate_lverts();
	}
	,lverts_validate: function() {
		this.validate_lverts();
	}
	,lverts_modifiable: function() {
		this.immutable_midstep("Polygon::localVerts");
		if(this.body != null && this.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.body.space != null) throw new js__$Boot_HaxeError("Error: Cannot modifiy shapes of static object once added to Space");
	}
	,gverts_validate: function() {
		this.validate_gverts();
	}
	,edges_validate: function() {
		this.validate_lverts();
	}
	,getlverts: function() {
		var me = this;
		this.wrap_lverts = zpp_$nape_util_ZPP_$MixVec2List.get(this.lverts);
		this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
		this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
		this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
		this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
		this.wrap_lverts.zpp_inner._modifiable = $bind(this,this.lverts_modifiable);
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,getgverts: function() {
		var me = this;
		this.wrap_gverts = zpp_$nape_util_ZPP_$MixVec2List.get(this.gverts,true);
		this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_gverts.zpp_inner._validate = $bind(this,this.gverts_validate);
	}
	,getedges: function() {
		var me = this;
		this.wrap_edges = zpp_$nape_util_ZPP_$EdgeList.get(this.edges,true);
		this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_edges.zpp_inner._validate = $bind(this,this.edges_validate);
	}
	,invalidate_lverts: function() {
		this.invalidate_laxi();
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_localCOM();
		this.invalidate_gverts();
		this.zip_lverts = true;
		this.zip_valid = true;
		this.zip_sanitation = true;
		if(this.body != null) this.body.wake();
	}
	,invalidate_laxi: function() {
		this.invalidate_gaxi();
		this.zip_sweepRadius = true;
		this.zip_laxi = true;
	}
	,invalidate_gverts: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		this.zip_gverts = true;
	}
	,invalidate_gaxi: function() {
		this.zip_gaxi = true;
	}
	,valid: function() {
		if(this.zip_valid) {
			this.zip_valid = false;
			if(this.zip_sanitation) {
				this.zip_sanitation = false;
				this.splice_collinear_real();
			}
			if(this.lverts.length < 3) return (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
				return $r;
			}(this)); else {
				this.validate_lverts();
				this.validate_area_inertia();
				if(this.area < nape_Config.epsilon) return (function($this) {
					var $r;
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
					return $r;
				}(this)); else {
					var neg = false;
					var pos = false;
					var cx_cont = true;
					var cx_ite = this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						var ax = 0.0;
						var ay = 0.0;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx = 0.0;
						var by = 0.0;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > nape_Config.epsilon) pos = true; else if(dot < -nape_Config.epsilon) neg = true;
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					if(cx_cont) {
						cx_ite = this.lverts.next;
						var w1 = cx_ite;
						do {
							var ax1 = 0.0;
							var ay1 = 0.0;
							ax1 = w1.x - v.x;
							ay1 = w1.y - v.y;
							var bx1 = 0.0;
							var by1 = 0.0;
							bx1 = v.x - u.x;
							by1 = v.y - u.y;
							var dot1 = by1 * ax1 - bx1 * ay1;
							if(dot1 > nape_Config.epsilon) pos = true; else if(dot1 < -nape_Config.epsilon) neg = true;
							if(pos && neg) {
								cx_cont = false;
								break;
							}
						} while(false);
						if(cx_cont) {
							u = v;
							v = w1;
							cx_ite = cx_ite.next;
							var w2 = cx_ite;
							do {
								var ax2 = 0.0;
								var ay2 = 0.0;
								ax2 = w2.x - v.x;
								ay2 = w2.y - v.y;
								var bx2 = 0.0;
								var by2 = 0.0;
								bx2 = v.x - u.x;
								by2 = v.y - u.y;
								var dot2 = by2 * ax2 - bx2 * ay2;
								if(dot2 > nape_Config.epsilon) pos = true; else if(dot2 < -nape_Config.epsilon) neg = true;
								if(pos && neg) break;
							} while(false);
						}
					}
					if(pos && neg) return (function($this) {
						var $r;
						if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE;
						return $r;
					}(this)); else {
						var cont = true;
						var cx_cont1 = true;
						var cx_ite1 = this.lverts.next;
						var u1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
						while(cx_ite1 != null) {
							var v1 = cx_ite1;
							if(!cont) {
								cx_cont1 = false;
								break;
							}
							var cx_cont2 = true;
							var cx_ite2 = this.lverts.next;
							var a = cx_ite2;
							cx_ite2 = cx_ite2.next;
							while(cx_ite2 != null) {
								var b = cx_ite2;
								if(u1 == a || u1 == b || v1 == a || v1 == b) {
									a = b;
									cx_ite2 = cx_ite2.next;
									continue;
								}
								var sx = 0.0;
								var sy = 0.0;
								sx = u1.x - a.x;
								sy = u1.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v1.x - u1.x;
								vy = v1.y - u1.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape_Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape_Config.epsilon && t < 1 - nape_Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape_Config.epsilon && s < 1 - nape_Config.epsilon) {
											cont = false;
											cx_cont2 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite2 = cx_ite2.next;
							}
							if(cx_cont2) do {
								var b1 = this.lverts.next;
								if(u1 == a || u1 == b1 || v1 == a || v1 == b1) break;
								var sx1 = 0.0;
								var sy1 = 0.0;
								sx1 = u1.x - a.x;
								sy1 = u1.y - a.y;
								var vx1 = 0.0;
								var vy1 = 0.0;
								vx1 = v1.x - u1.x;
								vy1 = v1.y - u1.y;
								var qx1 = 0.0;
								var qy1 = 0.0;
								qx1 = b1.x - a.x;
								qy1 = b1.y - a.y;
								var den1 = vy1 * qx1 - vx1 * qy1;
								if(den1 * den1 > nape_Config.epsilon) {
									den1 = 1 / den1;
									var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
									if(t1 > nape_Config.epsilon && t1 < 1 - nape_Config.epsilon) {
										var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
										if(s1 > nape_Config.epsilon && s1 < 1 - nape_Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
							u1 = v1;
							cx_ite1 = cx_ite1.next;
						}
						if(cx_cont1) do {
							var v2 = this.lverts.next;
							if(!cont) break;
							var cx_cont3 = true;
							var cx_ite3 = this.lverts.next;
							var a1 = cx_ite3;
							cx_ite3 = cx_ite3.next;
							while(cx_ite3 != null) {
								var b2 = cx_ite3;
								if(u1 == a1 || u1 == b2 || v2 == a1 || v2 == b2) {
									a1 = b2;
									cx_ite3 = cx_ite3.next;
									continue;
								}
								var sx2 = 0.0;
								var sy2 = 0.0;
								sx2 = u1.x - a1.x;
								sy2 = u1.y - a1.y;
								var vx2 = 0.0;
								var vy2 = 0.0;
								vx2 = v2.x - u1.x;
								vy2 = v2.y - u1.y;
								var qx2 = 0.0;
								var qy2 = 0.0;
								qx2 = b2.x - a1.x;
								qy2 = b2.y - a1.y;
								var den2 = vy2 * qx2 - vx2 * qy2;
								if(den2 * den2 > nape_Config.epsilon) {
									den2 = 1 / den2;
									var t2 = (qy2 * sx2 - qx2 * sy2) * den2;
									if(t2 > nape_Config.epsilon && t2 < 1 - nape_Config.epsilon) {
										var s2 = (vy2 * sx2 - vx2 * sy2) * den2;
										if(s2 > nape_Config.epsilon && s2 < 1 - nape_Config.epsilon) {
											cont = false;
											cx_cont3 = false;
											break;
										}
									}
								}
								a1 = b2;
								cx_ite3 = cx_ite3.next;
							}
							if(cx_cont3) do {
								var b3 = this.lverts.next;
								if(u1 == a1 || u1 == b3 || v2 == a1 || v2 == b3) break;
								var sx3 = 0.0;
								var sy3 = 0.0;
								sx3 = u1.x - a1.x;
								sy3 = u1.y - a1.y;
								var vx3 = 0.0;
								var vy3 = 0.0;
								vx3 = v2.x - u1.x;
								vy3 = v2.y - u1.y;
								var qx3 = 0.0;
								var qy3 = 0.0;
								qx3 = b3.x - a1.x;
								qy3 = b3.y - a1.y;
								var den3 = vy3 * qx3 - vx3 * qy3;
								if(den3 * den3 > nape_Config.epsilon) {
									den3 = 1 / den3;
									var t3 = (qy3 * sx3 - qx3 * sy3) * den3;
									if(t3 > nape_Config.epsilon && t3 < 1 - nape_Config.epsilon) {
										var s3 = (vy3 * sx3 - vx3 * sy3) * den3;
										if(s3 > nape_Config.epsilon && s3 < 1 - nape_Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
						} while(false);
						if(!cont) return (function($this) {
							var $r;
							if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING;
							return $r;
						}(this)); else return (function($this) {
							var $r;
							if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
							return $r;
						}(this));
					}
				}
			}
		} else return this.validation;
	}
	,validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.length > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,cleanup_lvert: function(x) {
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x) break; else {
				if(ite == null) ite = this.gverts.next; else ite = ite.next;
				if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var rem;
		if(ite == null) rem = this.gverts.next; else rem = ite.next;
		this.gverts.erase(ite);
		var o = rem;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		if(this.edgeCnt == 2) {
			var rem1 = this.edges.pop_unsafe();
			var o1 = rem1;
			o1.polygon = null;
			o1.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o1;
			rem1 = this.edges.pop_unsafe();
			var o2 = rem1;
			o2.polygon = null;
			o2.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o2;
			this.edgeCnt = 0;
		} else if(this.edgeCnt != 0) {
			var rem2;
			if(ite2 == null) rem2 = this.edges.head.elt; else rem2 = ite2.next.elt;
			this.edges.erase(ite2);
			var o3 = rem2;
			o3.polygon = null;
			o3.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o3;
			this.edgeCnt--;
		}
	}
	,splice_collinear: function() {
		if(this.zip_sanitation) {
			this.zip_sanitation = false;
			this.splice_collinear_real();
		}
	}
	,splice_collinear_real: function() {
		if(this.lverts.next == null) return;
		if(this.lverts.next.next == null) return;
		if(this.lverts.next.next.next == null) return;
		var pre = null;
		var cur = this.lverts.next;
		while(cur != null) {
			var nxt;
			if(cur.next == null) nxt = this.lverts.next; else nxt = cur.next;
			var u = cur;
			var v = nxt;
			if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(u.x,u.y,v.x,v.y) < nape_Config.epsilon * nape_Config.epsilon) {
				this.cleanup_lvert(cur);
				cur = this.lverts.erase(pre);
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
		if(this.lverts.next == null) return;
		var removed;
		do {
			removed = false;
			var pre1 = this.lverts.next;
			while(pre1 != null) {
				var cur1;
				if(pre1.next == null) cur1 = this.lverts.next; else cur1 = pre1.next;
				var nxt1;
				if(cur1.next == null) nxt1 = this.lverts.next; else nxt1 = cur1.next;
				var u1 = pre1;
				var v1 = cur1;
				var w = nxt1;
				var ax = 0.0;
				var ay = 0.0;
				ax = v1.x - u1.x;
				ay = v1.y - u1.y;
				var bx = 0.0;
				var by = 0.0;
				bx = w.x - v1.x;
				by = w.y - v1.y;
				var crs = by * ax - bx * ay;
				if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) pre1 = pre1.next; else {
					this.cleanup_lvert(cur1);
					this.lverts.erase(pre1.next == null?null:pre1);
					removed = true;
					pre1 = pre1.next;
				}
			}
		} while(removed);
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_gverts != null) this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_edges != null) this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.head;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v1 = cx_ite;
				var edge = ite.elt;
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v1;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v1.x;
				dy = u.y - v1.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t1 = dx;
				dx = -dy;
				dy = t1;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v1;
				cx_ite = cx_ite.next;
			}
			var v = this.lverts.next;
			var edge1 = ite.elt;
			ite = ite.next;
			edge1.lp0 = u;
			edge1.lp1 = v;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = u.x - v.x;
			dy1 = u.y - v.y;
			var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			edge1.length = l1;
			var t2 = 1.0 / l1;
			dx1 *= t2;
			dy1 *= t2;
			var t3 = dx1;
			dx1 = -dy1;
			dy1 = t3;
			edge1.lprojection = dx1 * u.x + dy1 * u.y;
			edge1.lnormx = dx1;
			edge1.lnormy = dy1;
			if(edge1.wrap_lnorm != null) {
				edge1.wrap_lnorm.zpp_inner.x = dx1;
				edge1.wrap_lnorm.zpp_inner.y = dy1;
			}
		}
	}
	,validate_gverts: function() {
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				this.body.validate_axis();
				var li = this.lverts.next;
				var cx_ite = this.gverts.next;
				while(cx_ite != null) {
					var g = cx_ite;
					var l = li;
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,validate_gaxi: function() {
		if(this.zip_gaxi) {
			if(this.body != null) {
				this.zip_gaxi = false;
				this.validate_laxi();
				this.body.validate_axis();
				this.validate_gverts();
				var ite = this.edges.head;
				var cx_ite = this.gverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var v1 = cx_ite;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v1;
					e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
					e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u = v1;
					cx_ite = cx_ite.next;
				}
				var v = this.gverts.next;
				var e1 = ite.elt;
				ite = ite.next;
				e1.gp0 = u;
				e1.gp1 = v;
				e1.gnormx = this.body.axisy * e1.lnormx - this.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * this.body.axisx + e1.lnormy * this.body.axisy;
				e1.gprojection = this.body.posx * e1.gnormx + this.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
	,__validate_aabb: function() {
		this.validate_gverts();
		if(this.lverts.next == null) throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful bounds");
		var p0 = this.gverts.next;
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,_force_validate_aabb: function() {
		var li = this.lverts.next;
		var p0 = this.gverts.next;
		var l = li;
		li = li.next;
		p0.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
		p0.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var l1 = li;
			li = li.next;
			p.x = this.body.posx + (this.body.axisy * l1.x - this.body.axisx * l1.y);
			p.y = this.body.posy + (l1.x * this.body.axisx + l1.y * this.body.axisy);
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,__validate_sweepRadius: function() {
		var maxRadius = 0.0;
		var minRadius = 0.0;
		this.validate_laxi();
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var x = cx_ite;
			var r = x.x * x.x + x.y * x.y;
			if(r > maxRadius) maxRadius = r;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.edges.head;
		while(cx_ite1 != null) {
			var e = cx_ite1.elt;
			if(e.lprojection < minRadius) {
				minRadius = e.lprojection;
				if(minRadius < 0) break;
			}
			cx_ite1 = cx_ite1.next;
		}
		if(minRadius < 0) minRadius = 0;
		this.sweepRadius = Math.sqrt(maxRadius);
		this.sweepCoef = this.sweepRadius - minRadius;
	}
	,__validate_area_inertia: function() {
		if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w2 = cx_ite;
				var a = v.y * u.x - v.x * u.y;
				var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
				s1 += a * b;
				s2 += a;
				this.area += v.x * (w2.y - u.y);
				u = v;
				v = w2;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w = cx_ite;
			var a1 = v.y * u.x - v.x * u.y;
			var b1 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a1 * b1;
			s2 += a1;
			this.area += v.x * (w.y - u.y);
			u = v;
			v = w;
			cx_ite = cx_ite.next;
			var w1 = cx_ite;
			var a2 = v.y * u.x - v.x * u.y;
			var b2 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a2 * b2;
			s2 += a2;
			this.area += v.x * (w1.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__validate_angDrag: function() {
		if(this.lverts.length < 3) throw new js__$Boot_HaxeError("Error: Polygon's with less than 3 vertices have no meaningful angDrag");
		this.validate_area_inertia();
		this.validate_laxi();
		var accum = 0.0;
		var ei = this.edges.head;
		var perim = 0.0;
		var cx_cont = true;
		var cx_itei = this.lverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var edge = ei.elt;
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta;
				if(t > 1) ta = 1; else ta = t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * ta * edge.length * nape_Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb;
				if(t < 0) tb = 0; else tb = t;
				var cx1 = 0.0;
				var cy1 = 0.0;
				cx1 = u.x;
				cy1 = u.y;
				var t2 = tb;
				cx1 += dx * t2;
				cy1 += dy * t2;
				var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
				var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
				var dots1 = (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1));
				accum += dots1 * nape_Config.fluidVacuumDrag * (1 - tb) * edge.length * nape_Config.fluidAngularDrag;
			}
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = this.lverts.next;
			var v1 = cx_itej;
			var edge1 = ei.elt;
			ei = ei.next;
			perim += edge1.length;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = v1.x - u.x;
			dy1 = v1.y - u.y;
			accum += edge1.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge1.lprojection * edge1.lprojection;
			var t3 = -(u.y * edge1.lnormx - u.x * edge1.lnormy) / (dy1 * edge1.lnormx - dx1 * edge1.lnormy);
			if(t3 > 0) {
				var ta1;
				if(t3 > 1) ta1 = 1; else ta1 = t3;
				var cx2 = 0.0;
				var cy2 = 0.0;
				cx2 = u.x;
				cy2 = u.y;
				var t4 = ta1;
				cx2 += dx1 * t4;
				cy2 += dy1 * t4;
				var dota2 = edge1.lnormy * u.x - edge1.lnormx * u.y;
				var dotb2 = edge1.lnormy * cx2 - edge1.lnormx * cy2;
				var dots2 = (dotb2 * dotb2 * dotb2 - dota2 * dota2 * dota2) / (3 * (dotb2 - dota2));
				accum += dots2 * ta1 * edge1.length * nape_Config.fluidAngularDrag;
			}
			if(t3 < 1) {
				var tb1;
				if(t3 < 0) tb1 = 0; else tb1 = t3;
				var cx3 = 0.0;
				var cy3 = 0.0;
				cx3 = u.x;
				cy3 = u.y;
				var t5 = tb1;
				cx3 += dx1 * t5;
				cy3 += dy1 * t5;
				var dota3 = edge1.lnormy * cx3 - edge1.lnormx * cy3;
				var dotb3 = edge1.lnormy * v1.x - edge1.lnormx * v1.y;
				var dots3 = (dotb3 * dotb3 * dotb3 - dota3 * dota3 * dota3) / (3 * (dotb3 - dota3));
				accum += dots3 * nape_Config.fluidVacuumDrag * (1 - tb1) * edge1.length * nape_Config.fluidAngularDrag;
			}
		} while(false);
		this.angDrag = accum / (this.inertia * perim);
	}
	,__validate_localCOM: function() {
		if(this.lverts.next == null) throw new js__$Boot_HaxeError("Error: An empty polygon has no meaningful localCOM");
		if(this.lverts.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
		} else if(this.lverts.next.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
			var t = 1.0;
			this.localCOMx += this.lverts.next.next.x * t;
			this.localCOMy += this.lverts.next.next.y * t;
			var t1 = 0.5;
			this.localCOMx *= t1;
			this.localCOMy *= t1;
		} else {
			this.localCOMx = 0;
			this.localCOMy = 0;
			var area = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w2 = cx_ite;
				area += v.x * (w2.y - u.y);
				var cf = w2.y * v.x - w2.x * v.y;
				this.localCOMx += (v.x + w2.x) * cf;
				this.localCOMy += (v.y + w2.y) * cf;
				u = v;
				v = w2;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w = cx_ite;
			area += v.x * (w.y - u.y);
			var cf1 = w.y * v.x - w.x * v.y;
			this.localCOMx += (v.x + w.x) * cf1;
			this.localCOMy += (v.y + w.y) * cf1;
			u = v;
			v = w;
			cx_ite = cx_ite.next;
			var w1 = cx_ite;
			area += v.x * (w1.y - u.y);
			var cf2 = w1.y * v.x - w1.x * v.y;
			this.localCOMx += (v.x + w1.x) * cf2;
			this.localCOMy += (v.y + w1.y) * cf2;
			area = 1 / (3 * area);
			var t2 = area;
			this.localCOMx *= t2;
			this.localCOMy *= t2;
		}
	}
	,localCOM_validate: function() {
		if(this.lverts.next == null) throw new js__$Boot_HaxeError("Error: An empty polygon does not have any meaningful localCOM");
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,localCOM_invalidate: function(x) {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
		var delx = 0;
		var dely = 0;
		delx = x.x - this.localCOMx;
		dely = x.y - this.localCOMy;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += delx * t;
			p.y += dely * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,setupLocalCOM: function() {
		this.wrap_localCOM = nape_geom_Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	}
	,__translate: function(dx,dy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += dx * t;
			p.y += dy * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__scale: function(sx,sy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			p.x *= sx;
			p.y *= sy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__rotate: function(ax,ay) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var tempx = 0.0;
			var tempy = 0.0;
			tempx = ay * p.x - ax * p.y;
			tempy = p.x * ax + p.y * ay;
			p.x = tempx;
			p.y = tempy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__transform: function(mat) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = mat.zpp_inner.a * p.x + mat.zpp_inner.b * p.y + mat.zpp_inner.tx;
			p.y = mat.zpp_inner.c * p.x + mat.zpp_inner.d * p.y + mat.zpp_inner.ty;
			p.x = t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__copy: function() {
		var ret = new nape_shape_Polygon(this.outer_zn.get_localVerts()).zpp_inner_zn;
		return ret;
	}
	,__class__: zpp_$nape_shape_ZPP_$Polygon
});
var zpp_$nape_space_ZPP_$Broadphase = function() {
	this.circShape = null;
	this.matrix = null;
	this.aabbShape = null;
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
$hxClasses["zpp_nape.space.ZPP_Broadphase"] = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$Broadphase.__name__ = true;
zpp_$nape_space_ZPP_$Broadphase.prototype = {
	insert: function(shape) {
		if(this.is_sweep) this.sweep.__insert(shape); else this.dynab.__insert(shape);
	}
	,remove: function(shape) {
		if(this.is_sweep) this.sweep.__remove(shape); else this.dynab.__remove(shape);
	}
	,sync: function(shape) {
		if(this.is_sweep) {
			if(!this.sweep.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
		} else this.dynab.__sync(shape);
	}
	,broadphase: function(space,discrete) {
	}
	,clear: function() {
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,updateAABBShape: function(aabb) {
		if(this.aabbShape == null) {
			var body = new nape_phys_Body((function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.aabbShape = new nape_shape_Polygon(nape_shape_Polygon.rect(aabb.minx,aabb.miny,aabb.maxx - aabb.minx,aabb.maxy - aabb.miny)));
		} else {
			var ab = this.aabbShape.zpp_inner.aabb;
			var sx = (aabb.maxx - aabb.minx) / (ab.maxx - ab.minx);
			var sy = (aabb.maxy - aabb.miny) / (ab.maxy - ab.miny);
			if(this.matrix == null) this.matrix = new nape_geom_Mat23();
			this.matrix.set_a(sx);
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_d(sy);
			this.matrix.set_tx(aabb.minx - sx * ab.minx);
			this.matrix.set_ty(aabb.miny - sy * ab.miny);
			this.aabbShape.transform(this.matrix);
		}
		this.aabbShape.zpp_inner.validate_aabb();
		this.aabbShape.zpp_inner.polygon.validate_gaxi();
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,updateCircShape: function(x,y,r) {
		if(this.circShape == null) {
			var body = new nape_phys_Body((function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.circShape = new nape_shape_Circle(r,nape_geom_Vec2.get(x,y,null)));
		} else {
			var ci = this.circShape.zpp_inner.circle;
			var ss = r / ci.radius;
			if(this.matrix == null) this.matrix = new nape_geom_Mat23();
			this.matrix.set_a(this.matrix.set_d(ss));
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_tx(x - ss * ci.localCOMx);
			this.matrix.set_ty(y - ss * ci.localCOMy);
			this.circShape.transform(this.matrix);
		}
		this.circShape.zpp_inner.validate_aabb();
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,validateShape: function(s) {
		if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
		if(s.zip_aabb) {
			if(s.body != null) {
				s.zip_aabb = false;
				if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
			}
		}
		if(s.zip_worldCOM) {
			if(s.body != null) {
				s.zip_worldCOM = false;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.body.validate_axis();
				s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
				s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
			}
		}
	}
	,shapesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,rayCast: function(ray,inner,filter) {
		return null;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		return null;
	}
	,__class__: zpp_$nape_space_ZPP_$Broadphase
};
var zpp_$nape_space_ZPP_$AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.rayt = 0.0;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
$hxClasses["zpp_nape.space.ZPP_AABBNode"] = zpp_$nape_space_ZPP_$AABBNode;
zpp_$nape_space_ZPP_$AABBNode.__name__ = true;
zpp_$nape_space_ZPP_$AABBNode.prototype = {
	alloc: function() {
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) this.aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
			this.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = this.aabb.next;
			this.aabb.next = null;
		}
		null;
		this.moved = false;
		this.synced = false;
		this.first_sync = false;
	}
	,free: function() {
		this.height = -1;
		var o = this.aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		this.child1 = this.child2 = this.parent = null;
		this.next = null;
		this.snext = null;
		this.mnext = null;
	}
	,isLeaf: function() {
		return this.child1 == null;
	}
	,__class__: zpp_$nape_space_ZPP_$AABBNode
};
var zpp_$nape_space_ZPP_$AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBPair"] = zpp_$nape_space_ZPP_$AABBPair;
zpp_$nape_space_ZPP_$AABBPair.__name__ = true;
zpp_$nape_space_ZPP_$AABBPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.n1 = this.n2 = null;
		this.sleeping = false;
	}
	,__class__: zpp_$nape_space_ZPP_$AABBPair
};
var zpp_$nape_space_ZPP_$AABBTree = function() {
	this.root = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBTree"] = zpp_$nape_space_ZPP_$AABBTree;
zpp_$nape_space_ZPP_$AABBTree.__name__ = true;
zpp_$nape_space_ZPP_$AABBTree.prototype = {
	clear: function() {
		if(this.root == null) return;
		var stack = null;
		this.root.next = stack;
		stack = this.root;
		while(stack != null) {
			var node;
			var ret = stack;
			stack = ret.next;
			ret.next = null;
			node = ret;
			if(node.child1 == null) {
				node.shape.node = null;
				node.shape.removedFromSpace();
				node.shape = null;
			} else {
				if(node.child1 != null) {
					node.child1.next = stack;
					stack = node.child1;
				}
				if(node.child2 != null) {
					node.child2.next = stack;
					stack = node.child2;
				}
			}
			var o = node;
			o.free();
			o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
		}
		this.root = null;
	}
	,insertLeaf: function(leaf) {
		this.inlined_insertLeaf(leaf);
	}
	,inlined_insertLeaf: function(leaf) {
		if(this.root == null) {
			this.root = leaf;
			this.root.parent = null;
		} else {
			var leafaabb = leaf.aabb;
			var node = this.root;
			while(!(node.child1 == null)) {
				var child1 = node.child1;
				var child2 = node.child2;
				var area = node.aabb.perimeter();
				zpp_$nape_space_ZPP_$AABBTree.tmpaabb.setCombine(node.aabb,leafaabb);
				var carea = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter();
				var cost = 2 * carea;
				var icost = 2 * (carea - area);
				var cost1;
				zpp_$nape_space_ZPP_$AABBTree.tmpaabb.setCombine(leafaabb,child1.aabb);
				if(child1.child1 == null) cost1 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter() + icost; else {
					var oarea = child1.aabb.perimeter();
					var narea = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter();
					cost1 = narea - oarea + icost;
				}
				var cost2;
				zpp_$nape_space_ZPP_$AABBTree.tmpaabb.setCombine(leafaabb,child2.aabb);
				if(child2.child1 == null) cost2 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter() + icost; else {
					var oarea1 = child2.aabb.perimeter();
					var narea1 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter();
					cost2 = narea1 - oarea1 + icost;
				}
				if(cost < cost1 && cost < cost2) break; else if(cost1 < cost2) node = child1; else node = child2;
			}
			var sibling = node;
			var oparent = sibling.parent;
			var nparent;
			if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) nparent = new zpp_$nape_space_ZPP_$AABBNode(); else {
				nparent = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nparent.next;
				nparent.next = null;
			}
			if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) nparent.aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
				nparent.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
				zpp_$nape_geom_ZPP_$AABB.zpp_pool = nparent.aabb.next;
				nparent.aabb.next = null;
			}
			null;
			nparent.moved = false;
			nparent.synced = false;
			nparent.first_sync = false;
			nparent.parent = oparent;
			nparent.aabb.setCombine(leafaabb,sibling.aabb);
			nparent.height = sibling.height + 1;
			if(oparent != null) {
				if(oparent.child1 == sibling) oparent.child1 = nparent; else oparent.child2 = nparent;
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
			} else {
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
				this.root = nparent;
			}
			node = leaf.parent;
			while(node != null) {
				node = this.balance(node);
				var child11 = node.child1;
				var child21 = node.child2;
				node.height = 1 + (function($this) {
					var $r;
					var x = child11.height;
					var y = child21.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				node.aabb.setCombine(child11.aabb,child21.aabb);
				node = node.parent;
			}
		}
	}
	,removeLeaf: function(leaf) {
		this.inlined_removeLeaf(leaf);
	}
	,inlined_removeLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
			return;
		} else {
			var parent = leaf.parent;
			var gparent = parent.parent;
			var sibling;
			if(parent.child1 == leaf) sibling = parent.child2; else sibling = parent.child1;
			if(gparent != null) {
				if(gparent.child1 == parent) gparent.child1 = sibling; else gparent.child2 = sibling;
				sibling.parent = gparent;
				var o = parent;
				o.free();
				o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
				var node = gparent;
				while(node != null) {
					node = this.balance(node);
					var child1 = node.child1;
					var child2 = node.child2;
					node.aabb.setCombine(child1.aabb,child2.aabb);
					node.height = 1 + (function($this) {
						var $r;
						var x = child1.height;
						var y = child2.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					node = node.parent;
				}
			} else {
				this.root = sibling;
				sibling.parent = null;
				var o1 = parent;
				o1.free();
				o1.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o1;
			}
		}
	}
	,balance: function(a) {
		if(a.child1 == null || a.height < 2) return a; else {
			var b = a.child1;
			var c = a.child2;
			var balance = c.height - b.height;
			if(balance > 1) {
				var f = c.child1;
				var g = c.child2;
				c.child1 = a;
				c.parent = a.parent;
				a.parent = c;
				if(c.parent != null) {
					if(c.parent.child1 == a) c.parent.child1 = c; else c.parent.child2 = c;
				} else this.root = c;
				if(f.height > g.height) {
					c.child2 = f;
					a.child2 = g;
					g.parent = a;
					a.aabb.setCombine(b.aabb,g.aabb);
					c.aabb.setCombine(a.aabb,f.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x = b.height;
						var y = g.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x1 = a.height;
						var y1 = f.height;
						$r = x1 > y1?x1:y1;
						return $r;
					}(this));
				} else {
					c.child2 = g;
					a.child2 = f;
					f.parent = a;
					a.aabb.setCombine(b.aabb,f.aabb);
					c.aabb.setCombine(a.aabb,g.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x2 = b.height;
						var y2 = f.height;
						$r = x2 > y2?x2:y2;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x3 = a.height;
						var y3 = g.height;
						$r = x3 > y3?x3:y3;
						return $r;
					}(this));
				}
				return c;
			} else if(balance < -1) {
				var f1 = b.child1;
				var g1 = b.child2;
				b.child1 = a;
				b.parent = a.parent;
				a.parent = b;
				if(b.parent != null) {
					if(b.parent.child1 == a) b.parent.child1 = b; else b.parent.child2 = b;
				} else this.root = b;
				if(f1.height > g1.height) {
					b.child2 = f1;
					a.child1 = g1;
					g1.parent = a;
					a.aabb.setCombine(c.aabb,g1.aabb);
					b.aabb.setCombine(a.aabb,f1.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x4 = c.height;
						var y4 = g1.height;
						$r = x4 > y4?x4:y4;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x5 = a.height;
						var y5 = f1.height;
						$r = x5 > y5?x5:y5;
						return $r;
					}(this));
				} else {
					b.child2 = g1;
					a.child1 = f1;
					f1.parent = a;
					a.aabb.setCombine(c.aabb,f1.aabb);
					b.aabb.setCombine(a.aabb,g1.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x6 = c.height;
						var y6 = f1.height;
						$r = x6 > y6?x6:y6;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x7 = a.height;
						var y7 = g1.height;
						$r = x7 > y7?x7:y7;
						return $r;
					}(this));
				}
				return b;
			} else return a;
		}
	}
	,__class__: zpp_$nape_space_ZPP_$AABBTree
};
var zpp_$nape_space_ZPP_$DynAABBPhase = function(space) {
	this.openlist = null;
	this.failed = null;
	this.treeStack2 = null;
	this.treeStack = null;
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_$nape_space_ZPP_$AABBTree();
	this.dtree = new zpp_$nape_space_ZPP_$AABBTree();
};
$hxClasses["zpp_nape.space.ZPP_DynAABBPhase"] = zpp_$nape_space_ZPP_$DynAABBPhase;
zpp_$nape_space_ZPP_$DynAABBPhase.__name__ = true;
zpp_$nape_space_ZPP_$DynAABBPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$DynAABBPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	dyn: function(shape) {
		if(shape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) return false; else return !shape.body.component.sleeping;
	}
	,__insert: function(shape) {
		var node;
		if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) node = new zpp_$nape_space_ZPP_$AABBNode(); else {
			node = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = node.next;
			node.next = null;
		}
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) node.aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
			node.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = node.aabb.next;
			node.aabb.next = null;
		}
		null;
		node.moved = false;
		node.synced = false;
		node.first_sync = false;
		node.shape = shape;
		shape.node = node;
		node.synced = true;
		node.first_sync = true;
		node.snext = this.syncs;
		this.syncs = node;
	}
	,__remove: function(shape) {
		var node = shape.node;
		if(!node.first_sync) {
			if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
		}
		shape.node = null;
		if(node.synced) {
			var pre1 = null;
			var cur1 = this.syncs;
			while(cur1 != null) {
				if(cur1 == node) break;
				pre1 = cur1;
				cur1 = cur1.snext;
			}
			if(pre1 == null) this.syncs = cur1.snext; else pre1.snext = cur1.snext;
			cur1.snext = null;
			node.synced = false;
		}
		if(node.moved) {
			var pre2 = null;
			var cur2 = this.moves;
			while(cur2 != null) {
				if(cur2 == node) break;
				pre2 = cur2;
				cur2 = cur2.mnext;
			}
			if(pre2 == null) this.moves = cur2.mnext; else pre2.mnext = cur2.mnext;
			cur2.mnext = null;
			node.moved = false;
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			var nxt = cur.next;
			if(cur.n1 == node || cur.n2 == node) {
				if(pre == null) this.pairs = nxt; else pre.next = nxt;
				if(cur.arb != null) cur.arb.pair = null;
				cur.arb = null;
				cur.n1.shape.pairs.remove(cur);
				cur.n2.shape.pairs.remove(cur);
				var o = cur;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			pre = cur;
			cur = nxt;
		}
		while(!(shape.pairs.head == null)) {
			var cur3 = shape.pairs.pop_unsafe();
			if(cur3.n1 == node) cur3.n2.shape.pairs.remove(cur3); else cur3.n1.shape.pairs.remove(cur3);
			if(cur3.arb != null) cur3.arb.pair = null;
			cur3.arb = null;
			var o1 = cur3;
			o1.n1 = o1.n2 = null;
			o1.sleeping = false;
			o1.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o1;
		}
		var o2 = node;
		o2.free();
		o2.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o2;
	}
	,__sync: function(shape) {
		var node = shape.node;
		if(!node.synced) {
			if(!this.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			var sync;
			sync = node.dyn != (shape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?false:!shape.body.component.sleeping) || !node.aabb.contains(shape.aabb);
			if(sync) {
				node.synced = true;
				node.snext = this.syncs;
				this.syncs = node;
			}
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.syncs != null) {
			if(this.moves == null) {
				var node = this.syncs;
				while(node != null) {
					var shape = node.shape;
					if(!node.first_sync) {
						var tree1;
						if(node.dyn) tree1 = this.dtree; else tree1 = this.stree;
						tree1.inlined_removeLeaf(node);
					} else node.first_sync = false;
					var aabb = node.aabb;
					if(!this.space.continuous) {
						if(shape.zip_aabb) {
							if(shape.body != null) {
								shape.zip_aabb = false;
								if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
							}
						}
					}
					aabb.setExpand(shape.aabb,3.0);
					var tree;
					if(shape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree = this.dtree; else tree = this.stree;
					tree.inlined_insertLeaf(node);
					node.synced = false;
					node.moved = true;
					node.mnext = node.snext;
					node.snext = null;
					node = node.mnext;
				}
				var t = this.syncs;
				this.syncs = this.moves;
				this.moves = t;
			} else while(this.syncs != null) {
				var node1;
				var ret = this.syncs;
				this.syncs = ret.snext;
				ret.snext = null;
				node1 = ret;
				var shape1 = node1.shape;
				if(!node1.first_sync) {
					var tree3;
					if(node1.dyn) tree3 = this.dtree; else tree3 = this.stree;
					tree3.inlined_removeLeaf(node1);
				} else node1.first_sync = false;
				var aabb1 = node1.aabb;
				if(!this.space.continuous) {
					if(shape1.zip_aabb) {
						if(shape1.body != null) {
							shape1.zip_aabb = false;
							if(shape1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape1.circle.__validate_aabb(); else shape1.polygon.__validate_aabb();
						}
					}
				}
				aabb1.setExpand(shape1.aabb,3.0);
				var tree2;
				if(shape1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?node1.dyn = false:node1.dyn = !shape1.body.component.sleeping) tree2 = this.dtree; else tree2 = this.stree;
				tree2.inlined_insertLeaf(node1);
				node1.synced = false;
				if(!node1.moved) {
					node1.moved = true;
					node1.mnext = this.moves;
					this.moves = node1;
				}
			}
		}
	}
	,broadphase: function(space,discrete) {
		var node = this.syncs;
		while(node != null) {
			var shape = node.shape;
			if(!node.first_sync) {
				var tree1;
				if(node.dyn) tree1 = this.dtree; else tree1 = this.stree;
				tree1.inlined_removeLeaf(node);
			} else node.first_sync = false;
			var aabb = node.aabb;
			if(!space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			aabb.setExpand(shape.aabb,3.0);
			var tree;
			if(shape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree = this.dtree; else tree = this.stree;
			tree.inlined_insertLeaf(node);
			node.synced = false;
			node = node.snext;
		}
		while(this.syncs != null) {
			var leaf;
			var ret = this.syncs;
			this.syncs = ret.snext;
			ret.snext = null;
			leaf = ret;
			if(leaf.moved) continue;
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) continue;
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var node1;
				var ret1 = stack;
				stack = ret1.next;
				ret1.next = null;
				node1 = ret1;
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape1 = node1.shape;
					if(shape1.body != lshape.body && !(shape1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && lshape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node1.aabb)) {
							var id;
							var di;
							if(lshape.id < shape1.id) {
								id = lshape.id;
								di = shape1.id;
							} else {
								id = shape1.id;
								di = lshape.id;
							}
							var s;
							if(lshape.pairs.length < shape1.pairs.length) s = lshape; else s = shape1;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) p = new zpp_$nape_space_ZPP_$AABBPair(); else {
								p = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							null;
							p.n1 = leaf;
							p.n2 = node1;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							lshape.pairs.inlined_add(p);
							shape1.pairs.inlined_add(p);
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var node2;
				var ret2 = stack;
				stack = ret2.next;
				ret2.next = null;
				node2 = ret2;
				if(node2 == leaf) continue;
				if(node2.child1 == null) {
					var shape2 = node2.shape;
					if(shape2.body != lshape.body && !(shape2.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && lshape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node2.aabb)) {
							var id1;
							var di1;
							if(lshape.id < shape2.id) {
								id1 = lshape.id;
								di1 = shape2.id;
							} else {
								id1 = shape2.id;
								di1 = lshape.id;
							}
							var s1;
							if(lshape.pairs.length < shape2.pairs.length) s1 = lshape; else s1 = shape2;
							var p1 = null;
							var cx_ite1 = s1.pairs.head;
							while(cx_ite1 != null) {
								var px1 = cx_ite1.elt;
								if(px1.id == id1 && px1.di == di1) {
									p1 = px1;
									break;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(p1 != null) {
								if(p1.sleeping) {
									p1.sleeping = false;
									p1.next = this.pairs;
									this.pairs = p1;
									p1.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) p1 = new zpp_$nape_space_ZPP_$AABBPair(); else {
								p1 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p1.next;
								p1.next = null;
							}
							null;
							p1.n1 = leaf;
							p1.n2 = node2;
							p1.id = id1;
							p1.di = di1;
							p1.next = this.pairs;
							this.pairs = p1;
							p1.first = true;
							lshape.pairs.inlined_add(p1);
							shape2.pairs.inlined_add(p1);
						}
					}
				} else if(ab.intersect(node2.aabb)) {
					if(node2.child1 != null) {
						node2.child1.next = stack;
						stack = node2.child1;
					}
					if(node2.child2 != null) {
						node2.child2.next = stack;
						stack = node2.child2;
					}
				}
			}
		}
		while(this.moves != null) {
			var leaf1;
			var ret3 = this.moves;
			this.moves = ret3.mnext;
			ret3.mnext = null;
			leaf1 = ret3;
			leaf1.moved = false;
			var lshape1 = leaf1.shape;
			var lbody1 = lshape1.body;
			if(lbody1.component.sleeping) continue;
			var ab1 = leaf1.aabb;
			var stack1 = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack1;
				stack1 = this.dtree.root;
			}
			while(stack1 != null) {
				var node3;
				var ret4 = stack1;
				stack1 = ret4.next;
				ret4.next = null;
				node3 = ret4;
				if(node3 == leaf1) continue;
				if(node3.child1 == null) {
					var shape3 = node3.shape;
					if(shape3.body != lshape1.body && !(shape3.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && lshape1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
						if(ab1.intersect(node3.aabb)) {
							var id2;
							var di2;
							if(lshape1.id < shape3.id) {
								id2 = lshape1.id;
								di2 = shape3.id;
							} else {
								id2 = shape3.id;
								di2 = lshape1.id;
							}
							var s2;
							if(lshape1.pairs.length < shape3.pairs.length) s2 = lshape1; else s2 = shape3;
							var p2 = null;
							var cx_ite2 = s2.pairs.head;
							while(cx_ite2 != null) {
								var px2 = cx_ite2.elt;
								if(px2.id == id2 && px2.di == di2) {
									p2 = px2;
									break;
								}
								cx_ite2 = cx_ite2.next;
							}
							if(p2 != null) {
								if(p2.sleeping) {
									p2.sleeping = false;
									p2.next = this.pairs;
									this.pairs = p2;
									p2.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) p2 = new zpp_$nape_space_ZPP_$AABBPair(); else {
								p2 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p2.next;
								p2.next = null;
							}
							null;
							p2.n1 = leaf1;
							p2.n2 = node3;
							p2.id = id2;
							p2.di = di2;
							p2.next = this.pairs;
							this.pairs = p2;
							p2.first = true;
							lshape1.pairs.inlined_add(p2);
							shape3.pairs.inlined_add(p2);
						}
					}
				} else if(ab1.intersect(node3.aabb)) {
					if(node3.child1 != null) {
						node3.child1.next = stack1;
						stack1 = node3.child1;
					}
					if(node3.child2 != null) {
						node3.child2.next = stack1;
						stack1 = node3.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack1;
				stack1 = this.stree.root;
			}
			while(stack1 != null) {
				var node4;
				var ret5 = stack1;
				stack1 = ret5.next;
				ret5.next = null;
				node4 = ret5;
				if(node4 == leaf1) continue;
				if(node4.child1 == null) {
					var shape4 = node4.shape;
					if(shape4.body != lshape1.body && !(shape4.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && lshape1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
						if(ab1.intersect(node4.aabb)) {
							var id3;
							var di3;
							if(lshape1.id < shape4.id) {
								id3 = lshape1.id;
								di3 = shape4.id;
							} else {
								id3 = shape4.id;
								di3 = lshape1.id;
							}
							var s3;
							if(lshape1.pairs.length < shape4.pairs.length) s3 = lshape1; else s3 = shape4;
							var p3 = null;
							var cx_ite3 = s3.pairs.head;
							while(cx_ite3 != null) {
								var px3 = cx_ite3.elt;
								if(px3.id == id3 && px3.di == di3) {
									p3 = px3;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(p3 != null) {
								if(p3.sleeping) {
									p3.sleeping = false;
									p3.next = this.pairs;
									this.pairs = p3;
									p3.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) p3 = new zpp_$nape_space_ZPP_$AABBPair(); else {
								p3 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p3.next;
								p3.next = null;
							}
							null;
							p3.n1 = leaf1;
							p3.n2 = node4;
							p3.id = id3;
							p3.di = di3;
							p3.next = this.pairs;
							this.pairs = p3;
							p3.first = true;
							lshape1.pairs.inlined_add(p3);
							shape4.pairs.inlined_add(p3);
						}
					}
				} else if(ab1.intersect(node4.aabb)) {
					if(node4.child1 != null) {
						node4.child1.next = stack1;
						stack1 = node4.child1;
					}
					if(node4.child2 != null) {
						node4.child2.next = stack1;
						stack1 = node4.child2;
					}
				}
			}
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			if(!cur.first && !cur.n1.aabb.intersect(cur.n2.aabb)) {
				if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
				cur.n1.shape.pairs.inlined_try_remove(cur);
				cur.n2.shape.pairs.inlined_try_remove(cur);
				var nxt = cur.next;
				if(cur.arb != null) cur.arb.pair = null;
				cur.arb = null;
				var o = cur;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			var s11 = cur.n1.shape;
			var b1 = s11.body;
			var s21 = cur.n2.shape;
			var b2 = s21.body;
			if(!cur.first) {
				if((b1.component.sleeping || b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) && (b2.component.sleeping || b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
					cur.sleeping = true;
					if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
					cur = cur.next;
					continue;
				}
			}
			cur.first = false;
			if(s11.aabb.intersect(s21.aabb)) {
				var oarb = cur.arb;
				if(discrete) cur.arb = space.narrowPhase(s11,s21,!(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC),cur.arb,false); else cur.arb = space.continuousEvent(s11,s21,!(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC),cur.arb,false);
				if(cur.arb == null) {
					if(oarb != null) oarb.pair = null;
				} else cur.arb.pair = cur;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.syncs != null) {
			var next = this.syncs.snext;
			this.syncs.snext = null;
			if(this.syncs.first_sync) {
				this.syncs.shape.node = null;
				this.syncs.shape.removedFromSpace();
				this.syncs.shape = null;
			}
			this.syncs = next;
		}
		while(this.moves != null) {
			var next1 = this.moves.mnext;
			this.moves.mnext = null;
			if(this.moves.first_sync) {
				this.moves.shape.node = null;
				this.moves.shape.removedFromSpace();
				this.moves.shape = null;
			}
			this.moves = next1;
		}
		while(this.pairs != null) {
			var nxt = this.pairs.next;
			if(this.pairs.arb != null) this.pairs.arb.pair = null;
			this.pairs.arb = null;
			this.pairs.n1.shape.pairs.inlined_try_remove(this.pairs);
			this.pairs.n2.shape.pairs.inlined_try_remove(this.pairs);
			var o = this.pairs;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
			this.pairs = nxt;
		}
		this.dtree.clear();
		this.stree.clear();
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(node.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
								if(zpp_$nape_geom_ZPP_$Collide.circleContains(node.shape.circle,v)) ret.push(node.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node.shape.polygon,v)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.containsPoint(v)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(node1.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
								if(zpp_$nape_geom_ZPP_$Collide.circleContains(node1.shape.circle,v)) ret.push(node1.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node1.shape.polygon,v)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) {
							if(filter == null || node.shape.filter.shouldCollide(filter)) {
								if(node.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
									if(zpp_$nape_geom_ZPP_$Collide.circleContains(node.shape.circle,v)) ret.push(body);
								} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node.shape.polygon,v)) ret.push(body);
							}
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.containsPoint(v)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(!ret.has(body1)) {
							if(filter == null || node1.shape.filter.shouldCollide(filter)) {
								if(node1.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
									if(zpp_$nape_geom_ZPP_$Collide.circleContains(node1.shape.circle,v)) ret.push(body1);
								} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node1.shape.polygon,v)) ret.push(body1);
							}
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) ret.push(node.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) ret.push(node1.shape.outer);
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
								} else if(ab.contains(node.shape.aabb)) ret.push(node.shape.outer); else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(node.shape.outer);
							} else if(!containment || ab.contains(node.shape.aabb)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node2 = this.treeStack.pop_unsafe();
				if(ab.contains(node2.aabb)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) ret.push(node2.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
						this.treeStack2.add(node2);
						while(!(this.treeStack2.head == null)) {
							var node3 = this.treeStack2.pop_unsafe();
							if(node3.child1 == null) {
								if(filter == null || node3.shape.filter.shouldCollide(filter)) ret.push(node3.shape.outer);
							} else {
								if(node3.child1 != null) this.treeStack2.add(node3.child1);
								if(node3.child2 != null) this.treeStack2.add(node3.child2);
							}
						}
					}
				} else if(node2.aabb.intersect(ab)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,node2.shape)) ret.push(node2.shape.outer);
								} else if(ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer); else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(node2.shape.outer);
							} else if(!containment || ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer);
						}
					} else {
						if(node2.child1 != null) this.treeStack.add(node2.child1);
						if(node2.child2 != null) this.treeStack.add(node2.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							var body = node.shape.body.outer;
							if(!ret.has(body)) ret.push(body);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) {
									var body1 = node1.shape.body.outer;
									if(!ret.has(body1)) ret.push(body1);
								}
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body2 = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body2)) {
										var col = zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,node.shape);
										if(!ret.has(body2) && col) ret.push(body2); else if(!col) {
											ret.remove(body2);
											this.failed.push(body2);
										}
									}
								} else if(!ret.has(body2) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(body2);
							} else if(containment) {
								if(!this.failed.has(body2)) {
									var col1 = ab.contains(node.shape.aabb);
									if(!ret.has(body2) && col1) ret.push(body2); else if(!col1) {
										ret.remove(body2);
										this.failed.push(body2);
									}
								}
							} else if(!ret.has(body2) && ab.contains(node.shape.aabb)) ret.push(body2);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node2 = this.treeStack.pop_unsafe();
				if(ab.contains(node2.aabb)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							var body3 = node2.shape.body.outer;
							if(!ret.has(body3)) ret.push(body3);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
						this.treeStack2.add(node2);
						while(!(this.treeStack2.head == null)) {
							var node3 = this.treeStack2.pop_unsafe();
							if(node3.child1 == null) {
								if(filter == null || node3.shape.filter.shouldCollide(filter)) {
									var body4 = node3.shape.body.outer;
									if(!ret.has(body4)) ret.push(body4);
								}
							} else {
								if(node3.child1 != null) this.treeStack2.add(node3.child1);
								if(node3.child2 != null) this.treeStack2.add(node3.child2);
							}
						}
					}
				} else if(node2.aabb.intersect(ab)) {
					if(node2.child1 == null) {
						var body5 = node2.shape.body.outer;
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body5)) {
										var col2 = zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,node2.shape);
										if(!ret.has(body5) && col2) ret.push(body5); else if(!col2) {
											ret.remove(body5);
											this.failed.push(body5);
										}
									}
								} else if(!ret.has(body5) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(body5);
							} else if(containment) {
								if(!this.failed.has(body5)) {
									var col3 = ab.contains(node2.shape.aabb);
									if(!ret.has(body5) && col3) ret.push(body5); else if(!col3) {
										ret.remove(body5);
										this.failed.push(body5);
									}
								}
							} else if(!ret.has(body5) && ab.contains(node2.shape.aabb)) ret.push(body5);
						}
					} else {
						if(node2.child1 != null) this.treeStack.add(node2.child1);
						if(node2.child2 != null) this.treeStack.add(node2.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,node1.shape)) ret.push(node1.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body1)) {
									var col1 = zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,node1.shape);
									if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
										ret.remove(body1);
										this.failed.push(body1);
									}
								}
							} else if(!ret.has(body1) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(body1);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_$nape_geom_ZPP_$Collide.containTest(shp,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,shp)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_$nape_geom_ZPP_$Collide.containTest(shp,node1.shape)) ret.push(node1.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node1.shape,shp)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_$nape_geom_ZPP_$Collide.containTest(shp,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,shp)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body1)) {
									var col1 = zpp_$nape_geom_ZPP_$Collide.containTest(shp,node1.shape);
									if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
										ret.remove(body1);
										this.failed.push(body1);
									}
								}
							} else if(!ret.has(body1) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node1.shape,shp)) ret.push(body1);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,rayCast: function(ray,inner,filter) {
		if(this.openlist == null) this.openlist = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var mint = ray.maxdist;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				var t = ray.aabbsect(this.dtree.root.aabb);
				if(t >= 0 && t < mint) {
					this.dtree.root.rayt = t;
					var pre = null;
					var cx_ite = this.openlist.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if(this.dtree.root.rayt < j.rayt) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					this.openlist.inlined_insert(pre,this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				var t1 = ray.aabbsect(this.stree.root.aabb);
				if(t1 >= 0 && t1 < mint) {
					this.stree.root.rayt = t1;
					var pre1 = null;
					var cx_ite1 = this.openlist.head;
					while(cx_ite1 != null) {
						var j1 = cx_ite1.elt;
						if(this.stree.root.rayt < j1.rayt) break;
						pre1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
					}
					this.openlist.inlined_insert(pre1,this.stree.root);
				}
			}
		}
		var minres = null;
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.rayt >= mint) break;
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					var result;
					if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) result = ray.circlesect(shape.circle,inner,mint); else if(ray.aabbtest(shape.aabb)) result = ray.polysect(shape.polygon,inner,mint); else result = null;
					if(result != null) {
						if(result.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
						mint = result.zpp_inner.toiDistance;
						if(minres != null) {
							if(minres.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
							minres.zpp_inner.free();
						}
						minres = result;
					}
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						var t2 = ray.aabbsect(cnode.child1.aabb);
						if(t2 >= 0 && t2 < mint) {
							cnode.child1.rayt = t2;
							var pre2 = null;
							var cx_ite2 = this.openlist.head;
							while(cx_ite2 != null) {
								var j2 = cx_ite2.elt;
								if(cnode.child1.rayt < j2.rayt) break;
								pre2 = cx_ite2;
								cx_ite2 = cx_ite2.next;
							}
							this.openlist.inlined_insert(pre2,cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						var t3 = ray.aabbsect(cnode.child2.aabb);
						if(t3 >= 0 && t3 < mint) {
							cnode.child2.rayt = t3;
							var pre3 = null;
							var cx_ite3 = this.openlist.head;
							while(cx_ite3 != null) {
								var j3 = cx_ite3.elt;
								if(cnode.child2.rayt < j3.rayt) break;
								pre3 = cx_ite3;
								cx_ite3 = cx_ite3.next;
							}
							this.openlist.inlined_insert(pre3,cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return minres;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		if(this.openlist == null) this.openlist = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var inf = ray.maxdist >= Infinity;
		var ret;
		if(output == null) ret = new nape_geom_RayResultList(); else ret = output;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				if(inf) this.openlist.add(this.dtree.root); else {
					var t = ray.aabbsect(this.dtree.root.aabb);
					if(t >= 0 && t < ray.maxdist) this.openlist.add(this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				if(inf) this.openlist.add(this.stree.root); else {
					var t1 = ray.aabbsect(this.stree.root.aabb);
					if(t1 >= 0 && t1 < ray.maxdist) this.openlist.add(this.stree.root);
				}
			}
		}
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ray.circlesect2(shape.circle,inner,ret); else if(ray.aabbtest(shape.aabb)) ray.polysect2(shape.polygon,inner,ret);
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						if(inf) this.openlist.add(cnode.child1); else {
							var t2 = ray.aabbsect(cnode.child1.aabb);
							if(t2 >= 0 && t2 < ray.maxdist) this.openlist.add(cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						if(inf) this.openlist.add(cnode.child2); else {
							var t3 = ray.aabbsect(cnode.child2.aabb);
							if(t3 >= 0 && t3 < ray.maxdist) this.openlist.add(cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return ret;
	}
	,__class__: zpp_$nape_space_ZPP_$DynAABBPhase
});
var zpp_$nape_space_ZPP_$Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_$nape_util_ZNPList_$ZPP_$Component();
};
$hxClasses["zpp_nape.space.ZPP_Island"] = zpp_$nape_space_ZPP_$Island;
zpp_$nape_space_ZPP_$Island.__name__ = true;
zpp_$nape_space_ZPP_$Island.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
	}
	,alloc: function() {
		this.waket = 0;
	}
	,__class__: zpp_$nape_space_ZPP_$Island
};
var zpp_$nape_space_ZPP_$Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
$hxClasses["zpp_nape.space.ZPP_Component"] = zpp_$nape_space_ZPP_$Component;
zpp_$nape_space_ZPP_$Component.__name__ = true;
zpp_$nape_space_ZPP_$Component.prototype = {
	free: function() {
		this.body = null;
		this.constraint = null;
	}
	,alloc: function() {
	}
	,reset: function() {
		this.sleeping = false;
		this.island = null;
		this.parent = this;
		this.rank = 0;
	}
	,__class__: zpp_$nape_space_ZPP_$Component
};
var zpp_$nape_space_ZPP_$CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
};
$hxClasses["zpp_nape.space.ZPP_CallbackSet"] = zpp_$nape_space_ZPP_$CallbackSet;
zpp_$nape_space_ZPP_$CallbackSet.__name__ = true;
zpp_$nape_space_ZPP_$CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_$nape_space_ZPP_$CallbackSet.zpp_pool == null) ret = new zpp_$nape_space_ZPP_$CallbackSet(); else {
		ret = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
zpp_$nape_space_ZPP_$CallbackSet.prototype = {
	elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.id = this.di = -1;
		this.freed = true;
	}
	,alloc: function() {
		this.freed = false;
		this.lazydel = false;
		this.COLLISIONstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
		this.COLLISIONstamp = 0;
		this.SENSORstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
		this.SENSORstamp = 0;
		this.FLUIDstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
		this.FLUIDstamp = 0;
	}
	,add_arb: function(x) {
		if(!this.arbiters.inlined_has(x)) {
			this.arbiters.inlined_add(x);
			return true;
		} else return false;
	}
	,try_remove_arb: function(x) {
		return this.arbiters.inlined_try_remove(x);
	}
	,remove_arb: function(x) {
		this.arbiters.inlined_try_remove(x);
	}
	,empty_arb: function(type) {
		var retvar;
		retvar = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if((x.type & type) == 0) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				retvar = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return retvar;
	}
	,really_empty: function() {
		return this.arbiters.head == null;
	}
	,sleeping: function() {
		var ret;
		ret = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.sleeping) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				ret = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,__class__: zpp_$nape_space_ZPP_$CallbackSet
};
var zpp_$nape_space_ZPP_$CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) this.cbsets = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
		this.cbsets = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	null;
	this.cbsets.lt = zpp_$nape_callbacks_ZPP_$CbSet.setlt;
	this.space = space;
};
$hxClasses["zpp_nape.space.ZPP_CbSetManager"] = zpp_$nape_space_ZPP_$CbSetManager;
zpp_$nape_space_ZPP_$CbSetManager.__name__ = true;
zpp_$nape_space_ZPP_$CbSetManager.prototype = {
	get: function(cbTypes) {
		if(cbTypes.head == null) return null;
		var fake;
		if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) fake = new zpp_$nape_callbacks_ZPP_$CbSet(); else {
			fake = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = fake.next;
			fake.next = null;
		}
		null;
		var faketypes = fake.cbTypes;
		fake.cbTypes = cbTypes;
		var res = this.cbsets.find_weak(fake);
		var ret;
		if(res != null) ret = res.data; else {
			var set = zpp_$nape_callbacks_ZPP_$CbSet.get(cbTypes);
			this.cbsets.insert(set);
			set.manager = this;
			ret = set;
		}
		fake.cbTypes = faketypes;
		var o = fake;
		o.free();
		o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
		return ret;
	}
	,remove: function(set) {
		this.cbsets.remove(set);
		while(!(set.cbpairs.head == null)) {
			var pair = set.cbpairs.pop_unsafe();
			if(pair.a != pair.b) {
				if(set == pair.a) pair.b.cbpairs.remove(pair); else pair.a.cbpairs.remove(pair);
			}
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o;
		}
		set.manager = null;
	}
	,clear: function() {
	}
	,validate: function() {
		if(!this.cbsets.empty()) {
			var set_ite = this.cbsets.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var cb = set_ite.data;
				cb.validate();
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
	}
	,pair: function(a,b) {
		var ret = null;
		var pairs;
		if(a.cbpairs.length < b.cbpairs.length) pairs = a.cbpairs; else pairs = b.cbpairs;
		var cx_ite = pairs.head;
		while(cx_ite != null) {
			var p = cx_ite.elt;
			if(p.a == a && p.b == b || p.a == b && p.b == a) {
				ret = p;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret == null) {
			ret = zpp_$nape_callbacks_ZPP_$CbSetPair.get(a,b);
			a.cbpairs.add(ret);
			if(b != a) b.cbpairs.add(ret);
		}
		if(ret.zip_listeners) {
			ret.zip_listeners = false;
			ret.__validate();
		}
		return ret;
	}
	,valid_listener: function(i) {
		return i.space == this.space;
	}
	,__class__: zpp_$nape_space_ZPP_$CbSetManager
};
var zpp_$nape_space_ZPP_$Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.convexShapeList = null;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.wrap_arbiters = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.userData = null;
	this.outer = null;
	this.toiEvents = new zpp_$nape_util_ZNPList_$ZPP_$ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	zpp_$nape_callbacks_ZPP_$Callback.internal = true;
	this.precb = new nape_callbacks_PreCallback();
	this.precb.zpp_inner = new zpp_$nape_callbacks_ZPP_$Callback();
	zpp_$nape_callbacks_ZPP_$Callback.internal = false;
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	if(broadphase == null || broadphase == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this))) this.bphase = new zpp_$nape_space_ZPP_$DynAABBPhase(this); else if(broadphase == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this))) this.bphase = new zpp_$nape_space_ZPP_$SweepPhase(this);
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
	this.kinematics = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.c_arbiters_true = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.c_arbiters_false = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.f_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter();
	this.s_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter();
	this.islands = new zpp_$nape_space_ZPP_$Island();
	this.live = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_live = zpp_$nape_util_ZPP_$BodyList.get(this.live,true);
	this.staticsleep = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.live_constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_livecon = zpp_$nape_util_ZPP_$ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_$nape_phys_ZPP_$Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_$nape_callbacks_ZPP_$Callback();
	this.midstep = false;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this.wrap_listeners = zpp_$nape_util_ZPP_$ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.wrap_listeners.zpp_inner._modifiable = $bind(this,this.listeners_modifiable);
	this.callbackset_list = new zpp_$nape_space_ZPP_$CallbackSet();
	this.mrca1 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.mrca2 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.prelisteners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.cbsets = new zpp_$nape_space_ZPP_$CbSetManager(this);
};
$hxClasses["zpp_nape.space.ZPP_Space"] = zpp_$nape_space_ZPP_$Space;
zpp_$nape_space_ZPP_$Space.__name__ = true;
zpp_$nape_space_ZPP_$Space.prototype = {
	getgravity: function() {
		this.wrap_gravity = nape_geom_Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,gravity_invalidate: function(x) {
		if(this.midstep) throw new js__$Boot_HaxeError("Error: Space::gravity cannot be set during space step");
		this.gravityx = x.x;
		this.gravityy = x.y;
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
		var cx_ite = this.bodies.head;
		while(cx_ite != null) {
			var x1 = cx_ite.elt;
			var o = x1;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.compounds.head;
		while(cx_ite1 != null) {
			var i = cx_ite1.elt;
			stack.add(i);
			cx_ite1 = cx_ite1.next;
		}
		while(!(stack.head == null)) {
			var s = stack.pop_unsafe();
			var cx_ite2 = s.bodies.head;
			while(cx_ite2 != null) {
				var x2 = cx_ite2.elt;
				var o1 = x2;
				if(!o1.world) {
					o1.component.waket = this.stamp + (this.midstep?0:1);
					if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
					if(o1.component.sleeping) this.really_wake(o1,false);
				}
				cx_ite2 = cx_ite2.next;
			}
			var cx_ite3 = s.compounds.head;
			while(cx_ite3 != null) {
				var i1 = cx_ite3.elt;
				stack.add(i1);
				cx_ite3 = cx_ite3.next;
			}
		}
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,clear: function() {
		while(!(this.listeners.head == null)) {
			var c = this.listeners.pop_unsafe();
			this.remListener(c);
		}
		while(!(this.callbackset_list.next == null)) {
			var c1 = this.callbackset_list.pop_unsafe();
			c1.arbiters.clear();
			var o = c1;
			o.int1 = o.int2 = null;
			o.id = o.di = -1;
			o.freed = true;
			null;
			o.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = o;
		}
		while(!(this.c_arbiters_true.head == null)) {
			var arb = this.c_arbiters_true.pop_unsafe();
			arb.retire();
		}
		while(!(this.c_arbiters_false.head == null)) {
			var arb1 = this.c_arbiters_false.pop_unsafe();
			arb1.retire();
		}
		while(!(this.s_arbiters.head == null)) {
			var arb2 = this.s_arbiters.pop_unsafe();
			arb2.retire();
		}
		while(!(this.f_arbiters.head == null)) {
			var arb3 = this.f_arbiters.pop_unsafe();
			arb3.retire();
		}
		this.bphase.clear();
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if(b.component != null) {
				var i = b.component.island;
				if(i != null) {
					while(!(i.comps.head == null)) {
						var c2 = i.comps.pop_unsafe();
						c2.sleeping = false;
						c2.island = null;
						c2.parent = c2;
						c2.rank = 0;
					}
					var o1 = i;
					o1.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = o1;
				}
			}
			b.removedFromSpace();
			b.space = null;
		}
		while(!(this.constraints.head == null)) {
			var c3 = this.constraints.pop_unsafe();
			if(c3.component != null) {
				var i1 = c3.component.island;
				if(i1 != null) {
					while(!(i1.comps.head == null)) {
						var c4 = i1.comps.pop_unsafe();
						c4.sleeping = false;
						c4.island = null;
						c4.parent = c4;
						c4.rank = 0;
					}
					var o2 = i1;
					o2.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = o2;
				}
			}
			c3.removedFromSpace();
			c3.space = null;
		}
		this.kinematics.clear();
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
		while(!(this.compounds.head == null)) {
			var c5 = this.compounds.pop_unsafe();
			stack.add(c5);
		}
		while(!(stack.head == null)) {
			var comp = stack.pop_unsafe();
			comp.removedFromSpace();
			comp.space = null;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var b1 = cx_ite.elt;
				if(b1.component != null) {
					var i2 = b1.component.island;
					if(i2 != null) {
						while(!(i2.comps.head == null)) {
							var c6 = i2.comps.pop_unsafe();
							c6.sleeping = false;
							c6.island = null;
							c6.parent = c6;
							c6.rank = 0;
						}
						var o3 = i2;
						o3.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
						zpp_$nape_space_ZPP_$Island.zpp_pool = o3;
					}
				}
				b1.removedFromSpace();
				b1.space = null;
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.constraints.head;
			while(cx_ite1 != null) {
				var c7 = cx_ite1.elt;
				if(c7.component != null) {
					var i3 = c7.component.island;
					if(i3 != null) {
						while(!(i3.comps.head == null)) {
							var c8 = i3.comps.pop_unsafe();
							c8.sleeping = false;
							c8.island = null;
							c8.parent = c8;
							c8.rank = 0;
						}
						var o4 = i3;
						o4.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
						zpp_$nape_space_ZPP_$Island.zpp_pool = o4;
					}
				}
				c7.removedFromSpace();
				c7.space = null;
				cx_ite1 = cx_ite1.next;
			}
			var cx_ite2 = comp.compounds.head;
			while(cx_ite2 != null) {
				var i4 = cx_ite2.elt;
				stack.add(i4);
				cx_ite2 = cx_ite2.next;
			}
		}
		this.staticsleep.clear();
		this.live.clear();
		this.live_constraints.clear();
		this.stamp = 0;
		this.time = 0.0;
		this.mrca1.clear();
		this.mrca2.clear();
		this.prelisteners.clear();
		this.cbsets.clear();
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != null) throw new js__$Boot_HaxeError("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
			this.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_subber: function(x) {
		this.remBody(x.zpp_inner);
	}
	,bodies_modifiable: function() {
		if(this.midstep) throw new js__$Boot_HaxeError("Error: Space::bodies cannot be set during space step()");
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.compound != null) throw new js__$Boot_HaxeError("Error: Cannot set the space of an inner Compound, only the root Compound space can be set");
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			this.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,compounds_subber: function(x) {
		this.remCompound(x.zpp_inner);
	}
	,compounds_modifiable: function() {
		if(this.midstep) throw new js__$Boot_HaxeError("Error: Space::compounds cannot be set during space step()");
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != null) throw new js__$Boot_HaxeError("Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set");
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
			this.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_subber: function(x) {
		this.remConstraint(x.zpp_inner);
	}
	,constraints_modifiable: function() {
		if(this.midstep) throw new js__$Boot_HaxeError("Error: Space::constraints cannot be set during space step()");
	}
	,listeners_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
			this.addListener(x.zpp_inner);
			return true;
		} else return false;
	}
	,listeners_subber: function(x) {
		this.remListener(x.zpp_inner);
	}
	,listeners_modifiable: function() {
		if(this.midstep) throw new js__$Boot_HaxeError("Error: Space::listeners cannot be set during space step()");
	}
	,revoke_listener: function(x) {
	}
	,unrevoke_listener: function(x) {
	}
	,addListener: function(x) {
		x.space = this;
		x.addedToSpace();
		if(x.interaction != null) null;
	}
	,remListener: function(x) {
		if(x.interaction != null) null;
		x.removedFromSpace();
		x.space = null;
	}
	,add_callbackset: function(cb) {
		cb.int1.cbsets.inlined_add(cb);
		cb.int2.cbsets.inlined_add(cb);
		this.callbackset_list.inlined_add(cb);
	}
	,remove_callbackset: function(cb) {
		cb.lazydel = true;
		cb.int1.cbsets.inlined_try_remove(cb);
		cb.int2.cbsets.inlined_try_remove(cb);
	}
	,transmitType: function(p,new_type) {
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,false);
		}
		if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.live.remove(p); else if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) {
			this.kinematics.remove(p);
			this.staticsleep.remove(p);
		} else if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) this.staticsleep.remove(p);
		p.type = new_type;
		if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) this.kinematics.add(p);
		if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) this.static_validation(p);
		p.component.sleeping = true;
		var o1 = p;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,true);
		}
	}
	,added_shape: function(s,dontwake) {
		if(dontwake == null) dontwake = false;
		if(!dontwake) {
			var o = s.body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
		}
		this.bphase.insert(s);
		s.addedToSpace();
	}
	,removed_shape: function(s,deleting) {
		if(deleting == null) deleting = false;
		var _g = this;
		var body = s.body;
		if(!deleting) body.wake();
		var pre = null;
		var cx_ite = body.arbiters.head;
		while(cx_ite != null) {
			var xarb = [cx_ite.elt];
			var rem = xarb[0].ws1 == s || xarb[0].ws2 == s;
			if(rem) {
				if(xarb[0].present != 0) {
					this.MRCA_chains(xarb[0].ws1,xarb[0].ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							var cb1 = i1.cbSet;
							var cb2 = i2.cbSet;
							cb1.validate();
							cb2.validate();
							if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = [zpp_$nape_phys_ZPP_$Interactor.get(i1,i2)];
							callbackset[0].remove_arb(xarb[0]);
							xarb[0].present--;
							cb1.manager.pair(cb1,cb2).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_END,(function(callbackset,xarb) {
								return function(listener) {
									if((listener.itype & xarb[0].type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_END;
										zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset,xarb));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				if(xarb[0].b1 != body && xarb[0].b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					var o = xarb[0].b1;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep?0:1);
						if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
						if(o.component.sleeping) this.really_wake(o,false);
					}
				}
				if(xarb[0].b2 != body && xarb[0].b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					var o1 = xarb[0].b2;
					if(!o1.world) {
						o1.component.waket = this.stamp + (this.midstep?0:1);
						if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
						if(o1.component.sleeping) this.really_wake(o1,false);
					}
				}
				xarb[0].cleared = true;
				if(body == null || xarb[0].b2 == body) xarb[0].b1.arbiters.inlined_try_remove(xarb[0]);
				if(body == null || xarb[0].b1 == body) xarb[0].b2.arbiters.inlined_try_remove(xarb[0]);
				if(xarb[0].pair != null) {
					xarb[0].pair.arb = null;
					xarb[0].pair = null;
				}
				xarb[0].active = false;
				this.f_arbiters.modified = true;
				cx_ite = body.arbiters.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bphase.remove(s);
		s.removedFromSpace();
	}
	,addConstraint: function(con) {
		con.space = this;
		con.addedToSpace();
		if(con.active) {
			con.component.sleeping = true;
			this.wake_constraint(con,true);
		}
	}
	,remConstraint: function(con) {
		if(con.active) {
			this.wake_constraint(con,true);
			this.live_constraints.remove(con);
		}
		con.removedFromSpace();
		con.space = null;
	}
	,addCompound: function(x) {
		x.space = this;
		x.addedToSpace();
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.addConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.addCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
	}
	,remCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.remConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.remCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,addBody: function(body,flag) {
		if(flag == null) flag = -1;
		body.space = this;
		body.addedToSpace();
		body.component.sleeping = true;
		var o = body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,true);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.added_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		if(body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) {
			this.static_validation(body);
		} else if(body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
		} else {
			if(flag != zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) this.kinematics.add(body);
		}
	}
	,remBody: function(body,flag) {
		if(flag == null) flag = -1;
		if(body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,true);
			}
			this.staticsleep.remove(body);
		} else if(body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var o1 = body;
			if(!o1.world) {
				o1.component.waket = this.stamp + (this.midstep?0:1);
				if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
				if(o1.component.sleeping) this.really_wake(o1,true);
			}
			this.live.remove(body);
		} else {
			if(flag != zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) this.kinematics.remove(body);
			var o2 = body;
			if(!o2.world) {
				o2.component.waket = this.stamp + (this.midstep?0:1);
				if(o2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
				if(o2.component.sleeping) this.really_wake(o2,true);
			}
			this.staticsleep.remove(body);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.removed_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		body.removedFromSpace();
		body.space = null;
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return this.bphase.shapesUnderPoint(x,y,filter,output);
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return this.bphase.bodiesUnderPoint(x,y,filter,output);
	}
	,shapesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.shapesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,bodiesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.bodiesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,shapesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.shapesInCircle((function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,bodiesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.bodiesInCircle((function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,shapesInShape: function(shape,cont,filter,output) {
		return this.bphase.shapesInShape(shape,cont,filter,output);
	}
	,bodiesInShape: function(shape,cont,filter,output) {
		return this.bphase.bodiesInShape(shape,cont,filter,output);
	}
	,rayCast: function(ray,inner,filter) {
		return this.bphase.rayCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		return this.bphase.rayMultiCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner,output);
	}
	,convexCast: function(shape,deltaTime,filter,dynamics) {
		var toi;
		if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) toi = new zpp_$nape_geom_ZPP_$ToiEvent(); else {
			toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
			aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x1 = prex;
			var y1 = postx;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x2 = prey;
			var y2 = posty;
			$r = x2 < y2?x2:y2;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x3 = prey;
			var y3 = posty;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		var minAxisx = 0.0;
		var minAxisy = 0.0;
		minAxisx = 0;
		minAxisy = 0;
		var minPosx = 0.0;
		var minPosy = 0.0;
		minPosx = 0;
		minPosy = 0;
		var mins = null;
		var mint = deltaTime + 1;
		var _g;
		list.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(list);
		while(_g.hasNext()) {
			var s;
			_g.zpp_critical = false;
			s = _g.zpp_inner.at(_g.zpp_i++);
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0 && toi.toi < mint) {
					mint = toi.toi;
					minAxisx = toi.axis.x;
					minAxisy = toi.axis.y;
					minPosx = toi.c2.x;
					minPosy = toi.c2.y;
					mins = s;
				}
			}
		}
		list.clear();
		var o1 = toi;
		o1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o1;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		if(mint <= deltaTime) return zpp_$nape_geom_ZPP_$ConvexRayResult.getConvex(nape_geom_Vec2.get(-minAxisx,-minAxisy,null),nape_geom_Vec2.get(minPosx,minPosy,null),mint,mins); else return null;
	}
	,prepareCast: function(s) {
		if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle.validate_worldCOM(); else s.polygon.validate_gaxi();
	}
	,convexMultiCast: function(shape,deltaTime,filter,dynamics,output) {
		var toi;
		if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) toi = new zpp_$nape_geom_ZPP_$ToiEvent(); else {
			toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
			aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x1 = prex;
			var y1 = postx;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x2 = prey;
			var y2 = posty;
			$r = x2 < y2?x2:y2;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x3 = prey;
			var y3 = posty;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		var ret;
		if(output == null) ret = new nape_geom_ConvexResultList(); else ret = output;
		var _g;
		list.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(list);
		while(_g.hasNext()) {
			var s;
			_g.zpp_critical = false;
			s = _g.zpp_inner.at(_g.zpp_i++);
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0) {
					var res = zpp_$nape_geom_ZPP_$ConvexRayResult.getConvex(nape_geom_Vec2.get(-toi.axis.x,-toi.axis.y,null),nape_geom_Vec2.get(toi.c2.x,toi.c2.y,null),toi.toi,s);
					var pre = null;
					var cx_ite = ret.zpp_inner.inner.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if((function($this) {
							var $r;
							if(res.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
							$r = res.zpp_inner.toiDistance;
							return $r;
						}(this)) < (function($this) {
							var $r;
							if(j.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
							$r = j.zpp_inner.toiDistance;
							return $r;
						}(this))) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					ret.zpp_inner.inner.inlined_insert(pre,res);
				}
			}
		}
		list.clear();
		var o1 = toi;
		o1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o1;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		return ret;
	}
	,push_callback: function(i) {
		var cb;
		if(zpp_$nape_callbacks_ZPP_$Callback.zpp_pool == null) cb = new zpp_$nape_callbacks_ZPP_$Callback(); else {
			cb = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = cb.next;
			cb.next = null;
		}
		null;
		this.callbacks.push(cb);
		cb.listener = i;
		return cb;
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		var _g = this;
		if(this.midstep) throw new js__$Boot_HaxeError("Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!");
		this.time += deltaTime;
		this.pre_dt = deltaTime;
		this.midstep = true;
		this.stamp++;
		this.validation();
		this.bphase.broadphase(this,true);
		this.prestep(deltaTime);
		if(this.sortcontacts) {
			var xxlist = this.c_arbiters_false;
			if(!(xxlist.head == null) && xxlist.head.next != null) {
				var head = xxlist.head;
				var tail = null;
				var left = null;
				var right = null;
				var nxt = null;
				var listSize = 1;
				var numMerges;
				var leftSize;
				var rightSize;
				do {
					numMerges = 0;
					left = head;
					tail = head = null;
					while(left != null) {
						numMerges++;
						right = left;
						leftSize = 0;
						rightSize = listSize;
						while(right != null && leftSize < listSize) {
							leftSize++;
							right = right.next;
						}
						while(leftSize > 0 || rightSize > 0 && right != null) {
							if(leftSize == 0) {
								nxt = right;
								right = right.next;
								rightSize--;
							} else if(rightSize == 0 || right == null) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else if(left.elt.active && right.elt.active?left.elt.oc1.dist < right.elt.oc1.dist:true) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else {
								nxt = right;
								right = right.next;
								rightSize--;
							}
							if(tail != null) tail.next = nxt; else head = nxt;
							tail = nxt;
						}
						left = right;
					}
					tail.next = null;
					listSize <<= 1;
				} while(numMerges > 1);
				xxlist.head = head;
				xxlist.modified = true;
				xxlist.pushmod = true;
			}
		}
		this.updateVel(deltaTime);
		this.warmStart();
		this.iterateVel(velocityIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.live.head;
		while(cx_ite1 != null) {
			var cur1 = cx_ite1.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cx_ite1 = cx_ite1.next;
		}
		this.updatePos(deltaTime);
		this.continuous = true;
		this.continuousCollisions(deltaTime);
		this.continuous = false;
		this.iteratePos(positionIterations);
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur2 = cx_ite2.elt;
			var upos = !(cur2.posx == cur2.pre_posx && cur2.posy == cur2.pre_posy);
			var urot = cur2.pre_rot != cur2.rot;
			if(upos) cur2.invalidate_pos();
			if(urot) cur2.invalidate_rot();
			cx_ite2 = cx_ite2.next;
		}
		var cx_ite3 = this.live.head;
		while(cx_ite3 != null) {
			var cur3 = cx_ite3.elt;
			var upos1 = !(cur3.posx == cur3.pre_posx && cur3.posy == cur3.pre_posy);
			var urot1 = cur3.pre_rot != cur3.rot;
			if(upos1) cur3.invalidate_pos();
			if(urot1) cur3.invalidate_rot();
			cx_ite3 = cx_ite3.next;
		}
		var pre = null;
		var cx_ite4 = this.staticsleep.head;
		while(cx_ite4 != null) {
			var b = cx_ite4.elt;
			if(!(b.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
				if(b.kinematicDelaySleep) {
					b.kinematicDelaySleep = false;
					cx_ite4 = cx_ite4.next;
					continue;
				}
				b.component.sleeping = true;
				cx_ite4 = this.staticsleep.inlined_erase(pre);
				continue;
			}
			pre = cx_ite4;
			cx_ite4 = cx_ite4.next;
		}
		this.doForests(deltaTime);
		this.sleepArbiters();
		this.midstep = false;
		var pre1 = null;
		var cx_ite5 = this.callbackset_list.next;
		while(cx_ite5 != null) {
			var set = [cx_ite5];
			if(set[0].arbiters.head == null) {
				cx_ite5 = this.callbackset_list.inlined_erase(pre1);
				var o = set[0];
				o.int1 = o.int2 = null;
				o.id = o.di = -1;
				o.freed = true;
				null;
				o.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = o;
				continue;
			}
			var sleeping = [set[0].sleeping()];
			zpp_$nape_callbacks_ZPP_$CbSet.find_all(set[0].int1.cbSet,set[0].int2.cbSet,zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING,(function(sleeping,set) {
				return function(x) {
					if((!sleeping[0] || x.allowSleepingCallbacks) && !set[0].empty_arb(x.itype)) {
						var cb = _g.push_callback(x);
						cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING;
						zpp_$nape_phys_ZPP_$Interactor.int_callback(set[0],x,cb);
						cb.set = set[0];
					}
				};
			})(sleeping,set));
			pre1 = cx_ite5;
			cx_ite5 = cx_ite5.next;
		}
		while(!this.callbacks.empty()) {
			var cb1 = this.callbacks.pop();
			if(cb1.listener.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_BODY) {
				var o1 = cb1.listener.body;
				o1.handler(cb1.wrapper_body());
			} else if(cb1.listener.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_CONSTRAINT) {
				var o2 = cb1.listener.constraint;
				o2.handler(cb1.wrapper_con());
			} else if(cb1.listener.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_INTERACTION) {
				var o3 = cb1.listener.interaction;
				o3.handleri(cb1.wrapper_int());
			}
			var o4 = cb1;
			o4.int1 = o4.int2 = null;
			o4.body = null;
			o4.constraint = null;
			o4.listener = null;
			if(o4.wrap_arbiters != null) o4.wrap_arbiters.zpp_inner.inner = null;
			o4.set = null;
			o4.next = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = o4;
		}
	}
	,continuousCollisions: function(deltaTime) {
		var MAX_VEL = 2 * Math.PI / deltaTime;
		this.bphase.broadphase(this,false);
		var curTimeAlpha = 0.0;
		while(curTimeAlpha < 1 && !(this.toiEvents.head == null)) {
			var minTOI = null;
			var minTime = 2.0;
			var minKinematic = false;
			var preMin = null;
			var pre = null;
			var cx_ite = this.toiEvents.head;
			while(cx_ite != null) {
				var toi = cx_ite.elt;
				var b11 = toi.s1.body;
				var b21 = toi.s2.body;
				if(b11.sweepFrozen && b21.sweepFrozen) {
					if(toi.toi != 0 && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(toi.s1,toi.s2)) toi.toi = 0; else {
						cx_ite = this.toiEvents.erase(pre);
						var o = toi;
						o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
						continue;
					}
				}
				if(toi.frozen1 != b11.sweepFrozen || toi.frozen2 != b21.sweepFrozen) {
					if(!toi.kinematic) {
						toi.frozen1 = b11.sweepFrozen;
						toi.frozen2 = b21.sweepFrozen;
						if(toi.frozen1) {
							var tmp = toi.s1;
							toi.s1 = toi.s2;
							toi.s2 = tmp;
							toi.frozen1 = false;
							toi.frozen2 = true;
						}
						zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,nape_Config.collisionSlopCCD);
						if(toi.toi < 0) {
							cx_ite = this.toiEvents.erase(pre);
							var o1 = toi;
							o1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o1;
							continue;
						}
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o2 = toi;
						o2.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o2;
						continue;
					}
				}
				if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
					minTOI = toi;
					minTime = toi.toi;
					minKinematic = toi.kinematic;
					preMin = pre;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			if(minTOI == null) break;
			this.toiEvents.erase(preMin);
			curTimeAlpha = minTOI.toi;
			var b1 = minTOI.s1.body;
			var b2 = minTOI.s2.body;
			if(!b1.sweepFrozen) {
				b1.sweepIntegrate(curTimeAlpha * deltaTime);
				b1.sweepValidate(minTOI.s1);
			}
			if(!b2.sweepFrozen) {
				b2.sweepIntegrate(curTimeAlpha * deltaTime);
				b2.sweepValidate(minTOI.s2);
			}
			var wasnull = minTOI.arbiter == null;
			var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
			if(arb == null) {
				if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
					minTOI.arbiter.pair.arb = null;
					minTOI.arbiter.pair = null;
				}
			} else if(!this.presteparb(arb,deltaTime,true)) {
				if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL && (arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0)) {
					arb.colarb.warmStart();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					b1.sweep_angvel = b1.angvel % MAX_VEL;
					b2.sweep_angvel = b2.angvel % MAX_VEL;
				}
			}
			if(arb != null && (arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) && arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				if(!b1.sweepFrozen && !(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC)) {
					b1.sweepFrozen = true;
					if(minTOI.failed) b1.angvel = b1.sweep_angvel = 0; else if(minTOI.slipped) b1.angvel = b1.sweep_angvel *= nape_Config.angularCCDSlipScale; else b1.angvel = b1.sweep_angvel;
				}
				if(!b2.sweepFrozen && !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC)) {
					b2.sweepFrozen = true;
					if(minTOI.failed) b2.angvel = b2.sweep_angvel = 0; else if(minTOI.slipped) b2.angvel = b2.sweep_angvel *= nape_Config.angularCCDSlipScale; else b2.angvel = b2.sweep_angvel;
				}
			}
			var o3 = minTOI;
			o3.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o3;
		}
		while(!(this.toiEvents.head == null)) {
			var toi1 = this.toiEvents.pop_unsafe();
			var o4 = toi1;
			o4.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o4;
		}
		var cx_ite1 = this.kinematics.head;
		while(cx_ite1 != null) {
			var cur = cx_ite1.elt;
			cur.sweepIntegrate(deltaTime);
			cur.sweepTime = 0;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live.head;
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elt;
			if(!cur1.sweepFrozen) cur1.sweepIntegrate(deltaTime);
			cur1.sweepTime = 0;
			cx_ite2 = cx_ite2.next;
		}
	}
	,continuousEvent: function(s1,s2,stat,in_arb,_) {
		if(s1.body.sweepFrozen && s2.body.sweepFrozen) return in_arb;
		if(s1.body.disableCCD || s2.body.disableCCD) return in_arb;
		if(in_arb != null && in_arb.colarb == null || this.interactionType(s1,s2,s1.body,s2.body) <= 0) return in_arb;
		var b1 = s1.body;
		var b2 = s2.body;
		if(stat || b1.bullet || b2.bullet) {
			var toi;
			if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) toi = new zpp_$nape_geom_ZPP_$ToiEvent(); else {
				toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
				toi.next = null;
			}
			toi.failed = false;
			toi.s1 = toi.s2 = null;
			toi.arbiter = null;
			var kin = b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC || b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC;
			if(stat && !kin) {
				if(!(s1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) {
					toi.s2 = s1;
					toi.s1 = s2;
				} else {
					toi.s1 = s1;
					toi.s2 = s2;
				}
				toi.kinematic = false;
				zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
				toi.kinematic = kin;
				if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
					if(toi.s1.body.sweepFrozen) {
						var tmp = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				} else zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
			}
			if(stat && toi.toi < 0 || toi.failed) {
				var o = toi;
				o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
			} else {
				this.toiEvents.add(toi);
				toi.frozen1 = toi.s1.body.sweepFrozen;
				toi.frozen2 = toi.s2.body.sweepFrozen;
				if(in_arb != null) toi.arbiter = in_arb.colarb; else toi.arbiter = null;
			}
		}
		return in_arb;
	}
	,bodyCbWake: function(b) {
		if(b.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			if(this.midstep) {
				var cx_ite = b.cbSet.bodylisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE;
					cb.body = b;
					cx_ite = cx_ite.next;
				}
			} else b.component.woken = true;
		}
	}
	,bodyCbSleep: function(b) {
		if(b.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbWake: function(con) {
		if(con.cbSet != null) {
			if(this.midstep) {
				var cx_ite = con.cbSet.conlisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE;
					cb.constraint = con;
					cx_ite = cx_ite.next;
				}
			} else con.component.woken = true;
		}
	}
	,constraintCbSleep: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbBreak: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,nullListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody;
				if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
				var xshp;
				if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(xarb.present == 0) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
							if(callbackset != null) {
								while(!(callbackset.arbiters.head == null)) {
									var arb = callbackset.arbiters.pop_unsafe();
									arb.present--;
								}
								this.remove_callbackset(callbackset);
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,nullInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.nullInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.nullInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(xarb.present == 0) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
						if(callbackset != null) {
							xarb.present--;
							callbackset.remove_arb(xarb);
							if(callbackset.arbiters.head == null) this.remove_callbackset(callbackset);
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,freshListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody;
				if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
				var xshp;
				if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(!xarb.presentable) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i21);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,freshInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.freshInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.freshInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(!xarb.presentable) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						if(!cb1.manager.pair(cb1,cb2).empty_intersection()) {
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,wakeCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			var o = y;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i = cx_ite1.elt;
			this.wake_constraint(i);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i1 = cx_ite2.elt;
			this.wakeCompound(i1);
			cx_ite2 = cx_ite2.next;
		}
	}
	,wakeIsland: function(i) {
		while(!(i.comps.head == null)) {
			var c = i.comps.pop_unsafe();
			c.waket = this.stamp + (this.midstep?0:1);
			if(c.isBody) {
				var b = c.body;
				this.live.add(b);
				var cx_ite = b.arbiters.head;
				while(cx_ite != null) {
					var arb = cx_ite.elt;
					if(arb.sleeping) {
						arb.sleeping = false;
						arb.up_stamp += this.stamp - arb.sleep_stamp;
						if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
							var carb = arb.colarb;
							if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
						} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
					}
					cx_ite = cx_ite.next;
				}
				this.bodyCbWake(b);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
				if(!(b.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
					var cx_ite1 = b.shapes.head;
					while(cx_ite1 != null) {
						var shape = cx_ite1.elt;
						if(shape.node != null) this.bphase.sync(shape);
						cx_ite1 = cx_ite1.next;
					}
				}
			} else {
				var con = c.constraint;
				this.live_constraints.inlined_add(con);
				this.constraintCbWake(con);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
		}
		var o = i;
		o.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
		zpp_$nape_space_ZPP_$Island.zpp_pool = o;
	}
	,non_inlined_wake: function(o,fst) {
		if(fst == null) fst = false;
		var o1 = o;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,fst);
		}
	}
	,really_wake: function(o,fst) {
		if(fst == null) fst = false;
		if(o.component.island == null) {
			o.component.sleeping = false;
			if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC || o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) this.staticsleep.inlined_add(o); else this.live.inlined_add(o);
			var cx_ite = o.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.space == this) this.wake_constraint(con);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = o.arbiters.head;
			while(cx_ite1 != null) {
				var arb = cx_ite1.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp + (this.midstep?0:1) - arb.sleep_stamp;
					if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
					} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
				}
				if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
					if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
						var o1 = arb.b1;
						if(!o1.world) {
							o1.component.waket = this.stamp + (this.midstep?0:1);
							if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
							if(o1.component.sleeping) this.really_wake(o1,false);
						}
					}
					if(arb.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
						var o2 = arb.b2;
						if(!o2.world) {
							o2.component.waket = this.stamp + (this.midstep?0:1);
							if(o2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
							if(o2.component.sleeping) this.really_wake(o2,false);
						}
					}
				}
				cx_ite1 = cx_ite1.next;
			}
			if(!fst && o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.bodyCbWake(o);
			if(!fst && !this.bphase.is_sweep && !(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
				var cx_ite2 = o.shapes.head;
				while(cx_ite2 != null) {
					var shape = cx_ite2.elt;
					if(shape.node != null) this.bphase.sync(shape);
					cx_ite2 = cx_ite2.next;
				}
			}
		} else this.wakeIsland(o.component.island);
	}
	,wake_constraint: function(con,fst) {
		if(fst == null) fst = false;
		if(con.active) {
			con.component.waket = this.stamp + (this.midstep?0:1);
			if(con.component.sleeping) {
				if(con.component.island == null) {
					con.component.sleeping = false;
					this.live_constraints.inlined_add(con);
					con.wake_connected();
					if(!fst) this.constraintCbWake(con);
				} else this.wakeIsland(con.component.island);
				return true;
			} else return false;
		} else return false;
	}
	,doForests: function(dt) {
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
				if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					var xr;
					if(arb.b1.component == arb.b1.component.parent) xr = arb.b1.component; else {
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt1 = stack.parent;
							stack.parent = obj;
							stack = nxt1;
						}
						xr = obj;
					}
					var yr;
					if(arb.b2.component == arb.b2.component.parent) yr = arb.b2.component; else {
						var obj1 = arb.b2.component;
						var stack1 = null;
						while(obj1 != obj1.parent) {
							var nxt2 = obj1.parent;
							obj1.parent = stack1;
							stack1 = obj1;
							obj1 = nxt2;
						}
						while(stack1 != null) {
							var nxt3 = stack1.parent;
							stack1.parent = obj1;
							stack1 = nxt3;
						}
						yr = obj1;
					}
					if(xr != yr) {
						if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.f_arbiters.head;
		while(cx_ite1 != null) {
			var arb1 = cx_ite1.elt;
			if(!arb1.cleared && arb1.up_stamp == this.stamp && (arb1.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
				if(arb1.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb1.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					var xr1;
					if(arb1.b1.component == arb1.b1.component.parent) xr1 = arb1.b1.component; else {
						var obj2 = arb1.b1.component;
						var stack2 = null;
						while(obj2 != obj2.parent) {
							var nxt4 = obj2.parent;
							obj2.parent = stack2;
							stack2 = obj2;
							obj2 = nxt4;
						}
						while(stack2 != null) {
							var nxt5 = stack2.parent;
							stack2.parent = obj2;
							stack2 = nxt5;
						}
						xr1 = obj2;
					}
					var yr1;
					if(arb1.b2.component == arb1.b2.component.parent) yr1 = arb1.b2.component; else {
						var obj3 = arb1.b2.component;
						var stack3 = null;
						while(obj3 != obj3.parent) {
							var nxt6 = obj3.parent;
							obj3.parent = stack3;
							stack3 = obj3;
							obj3 = nxt6;
						}
						while(stack3 != null) {
							var nxt7 = stack3.parent;
							stack3.parent = obj3;
							stack3 = nxt7;
						}
						yr1 = obj3;
					}
					if(xr1 != yr1) {
						if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
							yr1.parent = xr1;
							xr1.rank++;
						}
					}
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live_constraints.head;
		while(cx_ite2 != null) {
			var con = cx_ite2.elt;
			con.forest();
			cx_ite2 = cx_ite2.next;
		}
		while(!(this.live.head == null)) {
			var o = this.live.inlined_pop_unsafe();
			var oc = o.component;
			var root;
			if(oc == oc.parent) root = oc; else {
				var obj4 = oc;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(root.island == null) {
				if(zpp_$nape_space_ZPP_$Island.zpp_pool == null) root.island = new zpp_$nape_space_ZPP_$Island(); else {
					root.island = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = root.island.next;
					root.island.next = null;
				}
				root.island.waket = 0;
				this.islands.inlined_add(root.island);
				root.island.sleep = true;
			}
			oc.island = root.island;
			oc.island.comps.inlined_add(oc);
			var rest = o.atRest(dt);
			oc.island.sleep = oc.island.sleep && rest;
			if(oc.waket > oc.island.waket) oc.island.waket = oc.waket;
		}
		while(!(this.live_constraints.head == null)) {
			var o1 = this.live_constraints.inlined_pop_unsafe();
			var oc1 = o1.component;
			var root1;
			if(oc1 == oc1.parent) root1 = oc1; else {
				var obj5 = oc1;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				root1 = obj5;
			}
			oc1.island = root1.island;
			oc1.island.comps.inlined_add(oc1);
			if(oc1.waket > oc1.island.waket) oc1.island.waket = oc1.waket;
		}
		while(!(this.islands.next == null)) {
			var i = this.islands.inlined_pop_unsafe();
			if(i.sleep) {
				var cx_ite3 = i.comps.head;
				while(cx_ite3 != null) {
					var c = cx_ite3.elt;
					if(c.isBody) {
						var b = c.body;
						b.velx = 0;
						b.vely = 0;
						b.angvel = 0;
						c.sleeping = true;
						var cx_ite4 = b.shapes.head;
						while(cx_ite4 != null) {
							var shape = cx_ite4.elt;
							this.bphase.sync(shape);
							cx_ite4 = cx_ite4.next;
						}
						this.bodyCbSleep(b);
					} else {
						var con1 = c.constraint;
						this.constraintCbSleep(con1);
						c.sleeping = true;
					}
					cx_ite3 = cx_ite3.next;
				}
			} else {
				while(!(i.comps.head == null)) {
					var c1 = i.comps.inlined_pop_unsafe();
					c1.waket = i.waket;
					if(c1.isBody) this.live.inlined_add(c1.body); else this.live_constraints.inlined_add(c1.constraint);
					c1.sleeping = false;
					c1.island = null;
					c1.parent = c1;
					c1.rank = 0;
				}
				var o2 = i;
				o2.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
				zpp_$nape_space_ZPP_$Island.zpp_pool = o2;
			}
		}
	}
	,sleepArbiters: function() {
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				arbite = arbs.inlined_erase(pre);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre1 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbs1 = null;
			pre1 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(arb1.b1.component.sleeping && arb1.b2.component.sleeping) {
				arb1.sleep_stamp = this.stamp;
				arb1.sleeping = true;
				arbite1 = arbs1.inlined_erase(pre1);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbs1 = null;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbs1 = null;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbs2 = null;
			pre2 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(arb2.b1.component.sleeping && arb2.b2.component.sleeping) {
				arb2.sleep_stamp = this.stamp;
				arb2.sleeping = true;
				arbite2 = arbs2.inlined_erase(pre2);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbs2 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbs2 = null;
				pre2 = null;
			}
		}
	}
	,static_validation: function(body) {
		if(!(body.shapes.head == null)) body.validate_aabb();
		body.validate_mass();
		body.validate_inertia();
		if(body.velx != 0 || body.vely != 0 || body.angvel != 0) throw new js__$Boot_HaxeError("Error: Static body cannot have any real velocity, only kinematic or surface velocities");
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
				s.polygon.splice_collinear();
				var res = s.polygon.valid();
				if(res != (function($this) {
					var $r;
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
					return $r;
				}(this))) throw new js__$Boot_HaxeError("Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString());
				s.polygon.validate_gaxi();
			}
			cx_ite = cx_ite.next;
		}
		body.sweepFrozen = true;
	}
	,validation: function() {
		this.cbsets.validate();
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
					s.polygon.splice_collinear();
					var res = s.polygon.valid();
					if(res != (function($this) {
						var $r;
						if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
						return $r;
					}(this))) throw new js__$Boot_HaxeError("Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString());
					s.polygon.validate_gaxi();
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) cur.sweepRadius = s.sweepRadius;
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(!(cur.shapes.head == null)) {
				cur.validate_aabb();
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
				null;
			}
			if(!cur.nomove && cur.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && cur.mass == 0) throw new js__$Boot_HaxeError("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false");
			if(!cur.norotate && cur.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && cur.inertia == 0) throw new js__$Boot_HaxeError("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false");
			if(cur.component.woken && cur.cbSet != null) {
				var cx_ite2 = cur.cbSet.bodylisteners.head;
				while(cx_ite2 != null) {
					var i = cx_ite2.elt;
					if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE) {
						cx_ite2 = cx_ite2.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE;
					cb.body = cur;
					cx_ite2 = cx_ite2.next;
				}
			}
			cur.component.woken = false;
			var cx_ite3 = cur.shapes.head;
			while(cx_ite3 != null) {
				var shape = cx_ite3.elt;
				this.bphase.sync(shape);
				cx_ite3 = cx_ite3.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite4 = this.kinematics.head;
		while(cx_ite4 != null) {
			var cur1 = cx_ite4.elt;
			cur1.sweepRadius = 0;
			var cx_ite5 = cur1.shapes.head;
			while(cx_ite5 != null) {
				var s1 = cx_ite5.elt;
				if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
					s1.polygon.splice_collinear();
					var res1 = s1.polygon.valid();
					if(res1 != (function($this) {
						var $r;
						if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
						return $r;
					}(this))) throw new js__$Boot_HaxeError("Error: Cannot simulate with an invalid Polygon : " + s1.polygon.outer.toString() + " is invalid : " + res1.toString());
					s1.polygon.validate_gaxi();
				}
				s1.validate_sweepRadius();
				if(s1.sweepRadius > cur1.sweepRadius) cur1.sweepRadius = s1.sweepRadius;
				cx_ite5 = cx_ite5.next;
			}
			cur1.validate_mass();
			cur1.validate_inertia();
			if(!(cur1.shapes.head == null)) {
				cur1.validate_aabb();
				cur1.validate_worldCOM();
			}
			cur1.validate_gravMass();
			if(cur1.zip_axis) {
				cur1.zip_axis = false;
				cur1.axisx = Math.sin(cur1.rot);
				cur1.axisy = Math.cos(cur1.rot);
				null;
			}
			if(!cur1.nomove && cur1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && cur1.mass == 0) throw new js__$Boot_HaxeError("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false");
			if(!cur1.norotate && cur1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && cur1.inertia == 0) throw new js__$Boot_HaxeError("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false");
			var cx_ite6 = cur1.shapes.head;
			while(cx_ite6 != null) {
				var shape1 = cx_ite6.elt;
				this.bphase.sync(shape1);
				cx_ite6 = cx_ite6.next;
			}
			cx_ite4 = cx_ite4.next;
		}
		var cx_ite7 = this.live_constraints.head;
		while(cx_ite7 != null) {
			var con = cx_ite7.elt;
			if(con.active) {
				con.validate();
				if(con.component.woken && con.cbSet != null) {
					var cx_ite8 = con.cbSet.conlisteners.head;
					while(cx_ite8 != null) {
						var i1 = cx_ite8.elt;
						if(i1.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE) {
							cx_ite8 = cx_ite8.next;
							continue;
						}
						var cb1 = this.push_callback(i1);
						cb1.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE;
						cb1.constraint = con;
						cx_ite8 = cx_ite8.next;
					}
				}
				con.component.woken = false;
			}
			cx_ite7 = cx_ite7.next;
		}
	}
	,updateVel: function(dt) {
		var pre = null;
		var linDrag = 1 - dt * this.global_lin_drag;
		var angDrag = 1 - dt * this.global_ang_drag;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(cur.smass != 0.0) {
				var time = dt * cur.imass;
				cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
				cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
			}
			if(cur.sinertia != 0.0) {
				var dpx = 0.0;
				var dpy = 0.0;
				dpx = cur.worldCOMx - cur.posx;
				dpy = cur.worldCOMy - cur.posy;
				var torque = cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
				cur.angvel = angDrag * cur.angvel + torque * dt * cur.iinertia;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	,updatePos: function(dt) {
		var MAX_VEL = 2 * Math.PI / dt;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			cur.sweepIntegrate(dt);
			if(!cur.disableCCD) {
				var linThreshold = nape_Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape_Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) angvel = -angvel;
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * 0.00833333333333333322 | 0;
						if(count > 8) count = 8;
						var anginc = angvel * dt / count;
						cur.sweepIntegrate(dt);
						if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
						if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
						if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
						if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
						if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						var _g = 1;
						while(_g < count) {
							var i = _g++;
							cur.sweepIntegrate(anginc * i * iangvel);
							if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
							if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
							if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
							if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
							if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && cur.bulletEnabled) {
						var linThreshold2 = nape_Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape_Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) cur.bullet = true;
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cur1.sweepTime = 0;
			cur1.sweep_angvel = cur1.angvel % MAX_VEL;
			cur1.sweepIntegrate(dt);
			if(!cur1.disableCCD) {
				var linThreshold1 = nape_Config.staticCCDLinearThreshold * cur1.sweepRadius;
				var angThreshold1 = nape_Config.staticCCDAngularThreshold;
				if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold1 * linThreshold1 || cur1.angvel * cur1.angvel * dt * dt > angThreshold1 * angThreshold1 || cur1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) {
					var angvel1 = cur1.sweep_angvel;
					if(angvel1 < 0) angvel1 = -angvel1;
					var iangvel1 = 1 / angvel1;
					var cx_ite3 = cur1.shapes.head;
					while(cx_ite3 != null) {
						var s1 = cx_ite3.elt;
						var aabb1 = s1.aabb;
						var minx1 = aabb1.minx;
						var miny1 = aabb1.miny;
						var maxx1 = aabb1.maxx;
						var maxy1 = aabb1.maxy;
						var count1 = angvel1 * dt * s1.sweepCoef * 0.00833333333333333322 | 0;
						if(count1 > 8) count1 = 8;
						var anginc1 = angvel1 * dt / count1;
						cur1.sweepIntegrate(dt);
						if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
						if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
						if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
						if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
						if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
						var _g1 = 1;
						while(_g1 < count1) {
							var i1 = _g1++;
							cur1.sweepIntegrate(anginc1 * i1 * iangvel1);
							if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
							if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
							if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
							if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
							if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
						}
						this.bphase.sync(s1);
						cx_ite3 = cx_ite3.next;
					}
					cur1.sweepFrozen = false;
					if(cur1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && cur1.bulletEnabled) {
						var linThreshold21 = nape_Config.bulletCCDLinearThreshold * cur1.sweepRadius;
						var angThreshold21 = nape_Config.bulletCCDAngularThreshold;
						if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold21 * linThreshold21 || cur1.angvel * cur1.angvel * dt * dt > angThreshold21 * angThreshold21) cur1.bullet = true;
					}
				} else {
					cur1.sweepFrozen = true;
					cur1.bullet = false;
				}
			} else {
				cur1.sweepFrozen = true;
				cur1.bullet = false;
			}
			cx_ite2 = cx_ite2.next;
		}
	}
	,presteparb: function(arb,dt,cont) {
		if(cont == null) cont = false;
		var _g = this;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			return true;
		}
		if(!arb.cleared || arb.present != 0 || arb.intchange) {
			var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
			var begcb = arb.fresh && !arb.cleared && !arb.intchange;
			if(endcb) arb.endGenerated = this.stamp;
			if(begcb || endcb || arb.cleared || arb.intchange) {
				this.inlined_MRCA_chains(arb.ws1,arb.ws2);
				var cx_ite = this.mrca1.head;
				while(cx_ite != null) {
					var i1 = cx_ite.elt;
					var cx_ite1 = this.mrca2.head;
					while(cx_ite1 != null) {
						var i2 = cx_ite1.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var callbackset = [zpp_$nape_phys_ZPP_$Interactor.get(i1,i2)];
						if(begcb || arb.intchange) {
							if(callbackset[0] == null) {
								callbackset[0] = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset[0]);
							}
							cb1.manager.pair(cb1,cb2).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN,(function(callbackset) {
								return function(listener) {
									if((listener.itype & arb.type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN;
										zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset));
							if(!callbackset[0].arbiters.inlined_has(arb)?(function($this) {
								var $r;
								callbackset[0].arbiters.inlined_add(arb);
								$r = true;
								return $r;
							}(this)):false) arb.present++;
						} else {
							arb.present--;
							callbackset[0].remove_arb(arb);
							cb1.manager.pair(cb1,cb2).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_END,(function(callbackset) {
								return function(listener1) {
									if((listener1.itype & arb.type) != 0 && callbackset[0].empty_arb(listener1.itype)) {
										var cb3 = _g.push_callback(listener1);
										cb3.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_END;
										zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset[0],listener1,cb3);
										cb3.set = callbackset[0];
									}
								};
							})(callbackset));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
			arb.fresh = false;
			arb.intchange = false;
		}
		if(arb.cleared || arb.up_stamp + (arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL?nape_Config.arbiterExpirationDelay:0) < this.stamp) {
			if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) arb.sensorarb.retire(); else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) arb.fluidarb.retire(); else arb.colarb.retire();
			return true;
		}
		var pact = arb.active;
		arb.active = arb.presentable = arb.up_stamp == this.stamp;
		if((arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
			if(arb.active && arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				if(arb.colarb != null) {
					if(arb.colarb.preStep(dt)) arb.active = false;
				} else arb.fluidarb.preStep(this,dt);
			}
		} else if(arb.colarb != null) {
			if(arb.colarb.cleanupContacts()) arb.active = false;
		}
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
			this.s_arbiters.modified = this.f_arbiters.modified = true;
		}
		return false;
	}
	,prestep: function(dt) {
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.preStep(dt)) {
				cx_ite = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
					this.midstep = true;
				} else con.active = false;
				con.clearcache();
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var pre1 = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				arbite = arbs.inlined_erase(pre1);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbs1 = null;
			pre2 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(this.presteparb(arb1,dt)) {
				arbite1 = arbs1.inlined_erase(pre2);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbs1 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbs1 = null;
				pre2 = null;
			}
		}
		var pre3 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbs2 = null;
			pre3 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(this.presteparb(arb2,dt)) {
				arbite2 = arbs2.inlined_erase(pre3);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbs2 = null;
					pre3 = null;
				}
				continue;
			}
			pre3 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbs2 = null;
				pre3 = null;
			}
		}
	}
	,warmStart: function() {
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb.warmStart();
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb1 = arbi.elt;
			if(arb1.active && (arb1.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb1.warmStart();
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
		var cx_ite1 = this.live_constraints.head;
		while(cx_ite1 != null) {
			var con = cx_ite1.elt;
			con.warmStart();
			cx_ite1 = cx_ite1.next;
		}
	}
	,iterateVel: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var cx_ite = this.f_arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulseVel();
				cx_ite = cx_ite.next;
			}
			var pre = null;
			var cx_ite1 = this.live_constraints.head;
			while(cx_ite1 != null) {
				var con = cx_ite1.elt;
				if(con.applyImpulseVel()) {
					cx_ite1 = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
						this.midstep = true;
					} else con.active = false;
					con.clearcache();
					continue;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb1 = arbi.elt;
				if(arb1.active && (arb1.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb1.applyImpulseVel();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,iteratePos: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var pre = null;
			var cx_ite = this.live_constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(!con.__velocity && con.stiff) {
					if(con.applyImpulsePos()) {
						cx_ite = this.live_constraints.erase(pre);
						con.broken();
						this.constraintCbBreak(con);
						if(con.removeOnBreak) {
							con.component.sleeping = true;
							this.midstep = false;
							if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
							this.midstep = true;
						} else con.active = false;
						con.clearcache();
						continue;
					}
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elt;
				if(arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulsePos();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,group_ignore: function(s1,s2) {
		var g1 = s1.lookup_group();
		if(g1 == null) return false; else {
			var g2 = s2.lookup_group();
			if(g2 == null) return false; else {
				var ret = false;
				while(g1 != null && g2 != null) {
					if(g1 == g2) {
						ret = g1.ignore;
						break;
					}
					if(g1.depth < g2.depth) g2 = g2.group; else g1 = g1.group;
				}
				return ret;
			}
		}
	}
	,interactionType: function(s1,s2,b1,b2) {
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(!con_ignore && !this.group_ignore(s1,s2)) {
			if((s1.sensorEnabled || s2.sensorEnabled) && s1.filter.shouldSense(s2.filter)) return 2; else if((s1.fluidEnabled || s2.fluidEnabled) && s1.filter.shouldFlow(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 0; else if(s1.filter.shouldCollide(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 1; else return -1;
		} else return -1;
	}
	,narrowPhase: function(s1,s2,stat,in_arb,continuous) {
		var _g = this;
		var ret = null;
		var b1 = s1.body;
		var b2 = s2.body;
		var itype = this.interactionType(s1,s2,b1,b2);
		if(itype != -1) {
			var sa;
			var sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(itype == 0) {
				var xarb;
				if(in_arb == null) {
					var ret1 = null;
					var b;
					if(b1.arbiters.length < b2.arbiters.length) b = b1; else b = b2;
					var cx_ite = b.arbiters.head;
					while(cx_ite != null) {
						var arb1 = cx_ite.elt;
						if(arb1.id == sa.id && arb1.di == sb.id) {
							ret1 = arb1;
							break;
						}
						cx_ite = cx_ite.next;
					}
					xarb = ret1;
				} else xarb = in_arb;
				var first = xarb == null;
				var arb;
				var swapped = false;
				if(first) {
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) arb = new zpp_$nape_dynamics_ZPP_$FluidArbiter(); else {
						arb = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
				} else if(xarb.fluidarb == null) {
					xarb.cleared = true;
					xarb.b1.arbiters.inlined_try_remove(xarb);
					xarb.b2.arbiters.inlined_try_remove(xarb);
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) arb = new zpp_$nape_dynamics_ZPP_$FluidArbiter(); else {
						arb = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
					arb.intchange = true;
					first = true;
					swapped = true;
				} else arb = xarb.fluidarb;
				var inttype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID;
				if(first || arb.stamp != this.stamp || continuous) {
					arb.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.flowCollide(sa,sb,arb)) {
						if(first) {
							arb.b1 = s1.body;
							arb.ws1 = s1;
							arb.b2 = s2.body;
							arb.ws2 = s2;
							arb.id = sa.id;
							arb.di = sb.id;
							arb.b1.arbiters.inlined_add(arb);
							arb.b2.arbiters.inlined_add(arb);
							arb.active = true;
							arb.present = 0;
							arb.cleared = false;
							arb.sleeping = false;
							arb.fresh = false;
							arb.presentable = false;
							arb.nx = 0;
							arb.ny = 1;
							arb.dampx = 0;
							arb.dampy = 0;
							arb.adamp = 0.0;
							this.f_arbiters.inlined_add(arb);
							arb.fresh = !swapped;
						} else arb.fresh = arb.up_stamp < this.stamp - 1 || arb.endGenerated == this.stamp && continuous;
						arb.up_stamp = arb.stamp;
						if(arb.fresh || (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
							arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
							var anyimpure = false;
							var arbs1;
							if(arb.ws1.id > arb.ws2.id) arbs1 = arb.ws2; else arbs1 = arb.ws1;
							var arbs2;
							if(arb.ws1.id > arb.ws2.id) arbs2 = arb.ws1; else arbs2 = arb.ws2;
							this.inlined_MRCA_chains(arbs1,arbs2);
							var cx_ite1 = this.mrca1.head;
							while(cx_ite1 != null) {
								var i1 = cx_ite1.elt;
								var cx_ite2 = this.mrca2.head;
								while(cx_ite2 != null) {
									var i2 = cx_ite2.elt;
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									this.prelisteners.inlined_clear();
									var lite = [null];
									cb1.manager.pair(cb1,cb2).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE,(function(lite) {
										return function(listener) {
											if((listener.itype & inttype) != 0) {
												lite[0] = _g.prelisteners.inlined_insert(lite[0],listener);
												anyimpure = anyimpure || !listener.pure;
											}
										};
									})(lite));
									if(this.prelisteners.head == null) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset != null) callbackset = ncallbackset;
										if(callbackset != null) {
											var cx_ite3 = this.prelisteners.head;
											while(cx_ite3 != null) {
												var listener1 = cx_ite3.elt;
												if(listener1.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else callbackset.FLUIDstamp = this.stamp;
												cx_ite3 = cx_ite3.next;
											}
										}
										arb.mutable = true;
										if(arb.wrap_position != null) arb.wrap_position.zpp_inner._immutable = false;
										var pact = arb.active;
										arb.active = true;
										var emptycontacts = false;
										this.precb.zpp_inner.pre_arbiter = arb;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite4 = this.prelisteners.head;
										while(cx_ite4 != null) {
											var listener2 = cx_ite4.elt;
											this.precb.zpp_inner.listener = listener2;
											zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset,listener2,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret2 = listener2.handlerp(this.precb);
											if(ret2 != null) if(ret2 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else if(ret2 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT; else if(ret2 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE;
											cx_ite4 = cx_ite4.next;
										}
										arb.mutable = false;
										if(arb.wrap_position != null) arb.wrap_position.zpp_inner._immutable = true;
										arb.active = pact;
										if(callbackset != null) {
											var cx_ite5 = this.prelisteners.head;
											while(cx_ite5 != null) {
												var listener3 = cx_ite5.elt;
												if(listener3.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset.COLLISIONstate = arb.immState;
													callbackset.SENSORstate = arb.immState;
													callbackset.FLUIDstate = arb.immState;
												} else callbackset.FLUIDstate = arb.immState;
												cx_ite5 = cx_ite5.next;
											}
										}
									} else if(callbackset == null) {
										if((arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
									} else arb.immState = callbackset.FLUIDstate;
									cx_ite2 = cx_ite2.next;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(anyimpure && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
								if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
									var o = arb.b1;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep?0:1);
										if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
										if(o.component.sleeping) this.really_wake(o,false);
									}
								}
								if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
									var o1 = arb.b2;
									if(!o1.world) {
										o1.component.waket = this.stamp + (this.midstep?0:1);
										if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
										if(o1.component.sleeping) this.really_wake(o1,false);
									}
								}
							}
						}
						if((arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
							if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
								var o2 = arb.b1;
								if(!o2.world) {
									o2.component.waket = this.stamp + (this.midstep?0:1);
									if(o2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
									if(o2.component.sleeping) this.really_wake(o2,false);
								}
							}
							if(arb.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
								var o3 = arb.b2;
								if(!o3.world) {
									o3.component.waket = this.stamp + (this.midstep?0:1);
									if(o3.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o3.kinematicDelaySleep = true;
									if(o3.component.sleeping) this.really_wake(o3,false);
								}
							}
						}
						if(arb.sleeping) {
							arb.sleeping = false;
							this.f_arbiters.inlined_add(arb);
						}
						ret = arb;
					} else if(first) {
						var o4 = arb;
						o4.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o4;
						ret = null;
					} else ret = arb;
				} else ret = arb;
			} else if(itype == 1) {
				var carbs;
				if(stat) carbs = this.c_arbiters_true; else carbs = this.c_arbiters_false;
				var xarb1;
				if(in_arb == null) {
					var ret3 = null;
					var b3;
					if(b1.arbiters.length < b2.arbiters.length) b3 = b1; else b3 = b2;
					var cx_ite6 = b3.arbiters.head;
					while(cx_ite6 != null) {
						var arb3 = cx_ite6.elt;
						if(arb3.id == sa.id && arb3.di == sb.id) {
							ret3 = arb3;
							break;
						}
						cx_ite6 = cx_ite6.next;
					}
					xarb1 = ret3;
				} else xarb1 = in_arb;
				var first1 = xarb1 == null;
				var arb2;
				var swapped1 = false;
				if(first1) {
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) arb2 = new zpp_$nape_dynamics_ZPP_$ColArbiter(); else {
						arb2 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb2.next;
						arb2.next = null;
					}
					null;
					arb2.stat = stat;
				} else if(xarb1.colarb == null) {
					xarb1.cleared = true;
					xarb1.b1.arbiters.inlined_try_remove(xarb1);
					xarb1.b2.arbiters.inlined_try_remove(xarb1);
					if(xarb1.pair != null) {
						xarb1.pair.arb = null;
						xarb1.pair = null;
					}
					xarb1.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) arb2 = new zpp_$nape_dynamics_ZPP_$ColArbiter(); else {
						arb2 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb2.next;
						arb2.next = null;
					}
					null;
					arb2.intchange = true;
					arb2.stat = stat;
					first1 = true;
					swapped1 = true;
				} else {
					arb2 = xarb1.colarb;
					reverse = sa != arb2.s1;
					if(arb2.stat != stat) {
						arb2.stat = stat;
						if(!arb2.sleeping) {
							(stat?this.c_arbiters_false:this.c_arbiters_true).remove(arb2);
							carbs.add(arb2);
						}
					}
				}
				var inttype1 = zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION;
				if(first1 || arb2.stamp != this.stamp || continuous) {
					arb2.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.contactCollide(sa,sb,arb2,reverse)) {
						if(first1) {
							arb2.b1 = s1.body;
							arb2.ws1 = s1;
							arb2.b2 = s2.body;
							arb2.ws2 = s2;
							arb2.id = sa.id;
							arb2.di = sb.id;
							arb2.b1.arbiters.inlined_add(arb2);
							arb2.b2.arbiters.inlined_add(arb2);
							arb2.active = true;
							arb2.present = 0;
							arb2.cleared = false;
							arb2.sleeping = false;
							arb2.fresh = false;
							arb2.presentable = false;
							arb2.s1 = s1;
							arb2.s2 = s2;
							if(!arb2.userdef_restitution) {
								if(arb2.s1.material.elasticity <= -Infinity || arb2.s2.material.elasticity <= -Infinity) arb2.restitution = 0; else if(arb2.s1.material.elasticity >= Infinity || arb2.s2.material.elasticity >= Infinity) arb2.restitution = 1; else arb2.restitution = (arb2.s1.material.elasticity + arb2.s2.material.elasticity) / 2;
								if(arb2.restitution < 0) arb2.restitution = 0;
								if(arb2.restitution > 1) arb2.restitution = 1;
							}
							if(!arb2.userdef_dyn_fric) arb2.dyn_fric = Math.sqrt(arb2.s1.material.dynamicFriction * arb2.s2.material.dynamicFriction);
							if(!arb2.userdef_stat_fric) arb2.stat_fric = Math.sqrt(arb2.s1.material.staticFriction * arb2.s2.material.staticFriction);
							if(!arb2.userdef_rfric) arb2.rfric = Math.sqrt(arb2.s1.material.rollingFriction * arb2.s2.material.rollingFriction);
							carbs.inlined_add(arb2);
							arb2.fresh = !swapped1;
						} else arb2.fresh = arb2.up_stamp < this.stamp - 1 || arb2.endGenerated == this.stamp && continuous;
						arb2.up_stamp = arb2.stamp;
						if(arb2.fresh || (arb2.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
							arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
							var anyimpure1 = false;
							var arbs11;
							if(arb2.ws1.id > arb2.ws2.id) arbs11 = arb2.ws2; else arbs11 = arb2.ws1;
							var arbs21;
							if(arb2.ws1.id > arb2.ws2.id) arbs21 = arb2.ws1; else arbs21 = arb2.ws2;
							this.inlined_MRCA_chains(arbs11,arbs21);
							var cx_ite7 = this.mrca1.head;
							while(cx_ite7 != null) {
								var i11 = cx_ite7.elt;
								var cx_ite8 = this.mrca2.head;
								while(cx_ite8 != null) {
									var i21 = cx_ite8.elt;
									var cb11 = i11.cbSet;
									var cb21 = i21.cbSet;
									if(cb11.manager.pair(cb11,cb21).empty_intersection()) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									var callbackset1 = null;
									var ncallbackset1 = null;
									this.prelisteners.inlined_clear();
									var lite1 = [null];
									cb11.manager.pair(cb11,cb21).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE,(function(lite1) {
										return function(listener4) {
											if((listener4.itype & inttype1) != 0) {
												lite1[0] = _g.prelisteners.inlined_insert(lite1[0],listener4);
												anyimpure1 = anyimpure1 || !listener4.pure;
											}
										};
									})(lite1));
									if(this.prelisteners.head == null) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									callbackset1 = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
									if(callbackset1 == null) {
										ncallbackset1 = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i21);
										this.add_callbackset(ncallbackset1);
									}
									if(callbackset1 == null || (callbackset1.COLLISIONstamp != this.stamp || continuous) && (callbackset1.COLLISIONstate & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset1 != null) callbackset1 = ncallbackset1;
										if(callbackset1 != null) {
											var cx_ite9 = this.prelisteners.head;
											while(cx_ite9 != null) {
												var listener5 = cx_ite9.elt;
												if(listener5.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset1.COLLISIONstamp = this.stamp;
													callbackset1.SENSORstamp = this.stamp;
													callbackset1.FLUIDstamp = this.stamp;
												} else callbackset1.COLLISIONstamp = this.stamp;
												cx_ite9 = cx_ite9.next;
											}
										}
										arb2.mutable = true;
										if(arb2.wrap_normal != null) arb2.wrap_normal.zpp_inner._immutable = false;
										if(arb2.wrap_contacts != null) arb2.wrap_contacts.zpp_inner.immutable = false;
										var pact1 = arb2.active;
										arb2.active = true;
										var emptycontacts1 = false;
										arb2.cleanupContacts();
										this.precb.zpp_inner.pre_arbiter = arb2;
										this.precb.zpp_inner.set = callbackset1;
										var cx_ite10 = this.prelisteners.head;
										while(cx_ite10 != null) {
											var listener6 = cx_ite10.elt;
											this.precb.zpp_inner.listener = listener6;
											zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset1,listener6,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i11 != this.precb.zpp_inner.int1;
											var ret4 = listener6.handlerp(this.precb);
											if(ret4 != null) if(ret4 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else if(ret4 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT; else if(ret4 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE;
											cx_ite10 = cx_ite10.next;
										}
										arb2.mutable = false;
										if(arb2.wrap_normal != null) arb2.wrap_normal.zpp_inner._immutable = true;
										if(arb2.wrap_contacts != null) arb2.wrap_contacts.zpp_inner.immutable = true;
										arb2.active = pact1;
										if(callbackset1 != null) {
											var cx_ite11 = this.prelisteners.head;
											while(cx_ite11 != null) {
												var listener7 = cx_ite11.elt;
												if(listener7.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset1.COLLISIONstate = arb2.immState;
													callbackset1.SENSORstate = arb2.immState;
													callbackset1.FLUIDstate = arb2.immState;
												} else callbackset1.COLLISIONstate = arb2.immState;
												cx_ite11 = cx_ite11.next;
											}
										}
									} else if(callbackset1 == null) {
										if((arb2.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
									} else arb2.immState = callbackset1.COLLISIONstate;
									cx_ite8 = cx_ite8.next;
								}
								cx_ite7 = cx_ite7.next;
							}
							if(anyimpure1 && (arb2.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
								if(arb2.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
									var o5 = arb2.b1;
									if(!o5.world) {
										o5.component.waket = this.stamp + (this.midstep?0:1);
										if(o5.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o5.kinematicDelaySleep = true;
										if(o5.component.sleeping) this.really_wake(o5,false);
									}
								}
								if(arb2.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
									var o6 = arb2.b2;
									if(!o6.world) {
										o6.component.waket = this.stamp + (this.midstep?0:1);
										if(o6.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o6.kinematicDelaySleep = true;
										if(o6.component.sleeping) this.really_wake(o6,false);
									}
								}
							}
						}
						if((arb2.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
							if(arb2.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb2.b1.component.sleeping) {
								var o7 = arb2.b1;
								if(!o7.world) {
									o7.component.waket = this.stamp + (this.midstep?0:1);
									if(o7.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o7.kinematicDelaySleep = true;
									if(o7.component.sleeping) this.really_wake(o7,false);
								}
							}
							if(arb2.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb2.b2.component.sleeping) {
								var o8 = arb2.b2;
								if(!o8.world) {
									o8.component.waket = this.stamp + (this.midstep?0:1);
									if(o8.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o8.kinematicDelaySleep = true;
									if(o8.component.sleeping) this.really_wake(o8,false);
								}
							}
						}
						if(arb2.sleeping) {
							arb2.sleeping = false;
							carbs.inlined_add(arb2);
						}
						ret = arb2;
					} else if(first1) {
						var o9 = arb2;
						o9.userdef_dyn_fric = false;
						o9.userdef_stat_fric = false;
						o9.userdef_restitution = false;
						o9.userdef_rfric = false;
						o9.__ref_edge1 = o9.__ref_edge2 = null;
						o9.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o9;
						ret = null;
					} else ret = arb2;
				} else ret = arb2;
			} else {
				var xarb2;
				if(in_arb == null) {
					var ret5 = null;
					var b4;
					if(b1.arbiters.length < b2.arbiters.length) b4 = b1; else b4 = b2;
					var cx_ite12 = b4.arbiters.head;
					while(cx_ite12 != null) {
						var arb5 = cx_ite12.elt;
						if(arb5.id == sa.id && arb5.di == sb.id) {
							ret5 = arb5;
							break;
						}
						cx_ite12 = cx_ite12.next;
					}
					xarb2 = ret5;
				} else xarb2 = in_arb;
				var first2 = xarb2 == null;
				var arb4;
				var swapped2 = false;
				if(first2) {
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) arb4 = new zpp_$nape_dynamics_ZPP_$SensorArbiter(); else {
						arb4 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb4.next;
						arb4.next = null;
					}
					null;
				} else if(xarb2.sensorarb == null) {
					xarb2.cleared = true;
					xarb2.b1.arbiters.inlined_try_remove(xarb2);
					xarb2.b2.arbiters.inlined_try_remove(xarb2);
					if(xarb2.pair != null) {
						xarb2.pair.arb = null;
						xarb2.pair = null;
					}
					xarb2.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) arb4 = new zpp_$nape_dynamics_ZPP_$SensorArbiter(); else {
						arb4 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb4.next;
						arb4.next = null;
					}
					null;
					arb4.intchange = true;
					first2 = true;
					swapped2 = true;
				} else arb4 = xarb2.sensorarb;
				var inttype2 = zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR;
				if(first2 || arb4.stamp != this.stamp || continuous) {
					arb4.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.testCollide(sa,sb)) {
						if(first2) {
							arb4.b1 = s1.body;
							arb4.ws1 = s1;
							arb4.b2 = s2.body;
							arb4.ws2 = s2;
							arb4.id = sa.id;
							arb4.di = sb.id;
							arb4.b1.arbiters.inlined_add(arb4);
							arb4.b2.arbiters.inlined_add(arb4);
							arb4.active = true;
							arb4.present = 0;
							arb4.cleared = false;
							arb4.sleeping = false;
							arb4.fresh = false;
							arb4.presentable = false;
							this.s_arbiters.inlined_add(arb4);
							arb4.fresh = !swapped2;
						} else arb4.fresh = arb4.up_stamp < this.stamp - 1 || arb4.endGenerated == this.stamp && continuous;
						arb4.up_stamp = arb4.stamp;
						if(arb4.fresh || (arb4.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
							arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
							var anyimpure2 = false;
							var arbs12;
							if(arb4.ws1.id > arb4.ws2.id) arbs12 = arb4.ws2; else arbs12 = arb4.ws1;
							var arbs22;
							if(arb4.ws1.id > arb4.ws2.id) arbs22 = arb4.ws1; else arbs22 = arb4.ws2;
							this.inlined_MRCA_chains(arbs12,arbs22);
							var cx_ite13 = this.mrca1.head;
							while(cx_ite13 != null) {
								var i12 = cx_ite13.elt;
								var cx_ite14 = this.mrca2.head;
								while(cx_ite14 != null) {
									var i22 = cx_ite14.elt;
									var cb12 = i12.cbSet;
									var cb22 = i22.cbSet;
									if(cb12.manager.pair(cb12,cb22).empty_intersection()) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									var callbackset2 = null;
									var ncallbackset2 = null;
									this.prelisteners.inlined_clear();
									var lite2 = [null];
									cb12.manager.pair(cb12,cb22).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE,(function(lite2) {
										return function(listener8) {
											if((listener8.itype & inttype2) != 0) {
												lite2[0] = _g.prelisteners.inlined_insert(lite2[0],listener8);
												anyimpure2 = anyimpure2 || !listener8.pure;
											}
										};
									})(lite2));
									if(this.prelisteners.head == null) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									callbackset2 = zpp_$nape_phys_ZPP_$Interactor.get(i12,i22);
									if(callbackset2 == null) {
										ncallbackset2 = zpp_$nape_space_ZPP_$CallbackSet.get(i12,i22);
										this.add_callbackset(ncallbackset2);
									}
									if(callbackset2 == null || (callbackset2.SENSORstamp != this.stamp || continuous) && (callbackset2.SENSORstate & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset2 != null) callbackset2 = ncallbackset2;
										if(callbackset2 != null) {
											var cx_ite15 = this.prelisteners.head;
											while(cx_ite15 != null) {
												var listener9 = cx_ite15.elt;
												if(listener9.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset2.COLLISIONstamp = this.stamp;
													callbackset2.SENSORstamp = this.stamp;
													callbackset2.FLUIDstamp = this.stamp;
												} else callbackset2.SENSORstamp = this.stamp;
												cx_ite15 = cx_ite15.next;
											}
										}
										var pact2 = arb4.active;
										arb4.active = true;
										var emptycontacts2 = false;
										this.precb.zpp_inner.pre_arbiter = arb4;
										this.precb.zpp_inner.set = callbackset2;
										var cx_ite16 = this.prelisteners.head;
										while(cx_ite16 != null) {
											var listener10 = cx_ite16.elt;
											this.precb.zpp_inner.listener = listener10;
											zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset2,listener10,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i12 != this.precb.zpp_inner.int1;
											var ret6 = listener10.handlerp(this.precb);
											if(ret6 != null) if(ret6 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else if(ret6 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT; else if(ret6 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE;
											cx_ite16 = cx_ite16.next;
										}
										arb4.active = pact2;
										if(callbackset2 != null) {
											var cx_ite17 = this.prelisteners.head;
											while(cx_ite17 != null) {
												var listener11 = cx_ite17.elt;
												if(listener11.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset2.COLLISIONstate = arb4.immState;
													callbackset2.SENSORstate = arb4.immState;
													callbackset2.FLUIDstate = arb4.immState;
												} else callbackset2.SENSORstate = arb4.immState;
												cx_ite17 = cx_ite17.next;
											}
										}
									} else if(callbackset2 == null) {
										if((arb4.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
									} else arb4.immState = callbackset2.SENSORstate;
									cx_ite14 = cx_ite14.next;
								}
								cx_ite13 = cx_ite13.next;
							}
							if(anyimpure2 && (arb4.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
								if(!(arb4.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
									var o10 = arb4.b1;
									if(!o10.world) {
										o10.component.waket = this.stamp + (this.midstep?0:1);
										if(o10.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o10.kinematicDelaySleep = true;
										if(o10.component.sleeping) this.really_wake(o10,false);
									}
								}
								if(!(arb4.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
									var o11 = arb4.b2;
									if(!o11.world) {
										o11.component.waket = this.stamp + (this.midstep?0:1);
										if(o11.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o11.kinematicDelaySleep = true;
										if(o11.component.sleeping) this.really_wake(o11,false);
									}
								}
							}
						}
						if(arb4.sleeping) {
							arb4.sleeping = false;
							this.s_arbiters.inlined_add(arb4);
						}
						ret = arb4;
					} else if(first2) {
						var o12 = arb4;
						o12.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o12;
						ret = null;
					} else ret = arb4;
				} else ret = arb4;
			}
		}
		return ret;
	}
	,MRCA_chains: function(s1,s2) {
		this.inlined_MRCA_chains(s1,s2);
	}
	,inlined_MRCA_chains: function(s1,s2) {
		this.mrca1.inlined_clear();
		this.mrca2.inlined_clear();
		if(s1.cbSet != null) this.mrca1.inlined_add(s1);
		if(s1.body.cbSet != null) this.mrca1.inlined_add(s1.body);
		if(s2.cbSet != null) this.mrca2.inlined_add(s2);
		if(s2.body.cbSet != null) this.mrca2.inlined_add(s2.body);
		var c1 = s1.body.compound;
		var c2 = s2.body.compound;
		while(c1 != c2) {
			var d1;
			if(c1 == null) d1 = 0; else d1 = c1.depth;
			var d2;
			if(c2 == null) d2 = 0; else d2 = c2.depth;
			if(d1 < d2) {
				if(c2.cbSet != null) this.mrca2.inlined_add(c2);
				c2 = c2.compound;
			} else {
				if(c1.cbSet != null) this.mrca1.inlined_add(c1);
				c1 = c1.compound;
			}
		}
	}
	,__class__: zpp_$nape_space_ZPP_$Space
};
var zpp_$nape_space_ZPP_$SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
$hxClasses["zpp_nape.space.ZPP_SweepData"] = zpp_$nape_space_ZPP_$SweepData;
zpp_$nape_space_ZPP_$SweepData.__name__ = true;
zpp_$nape_space_ZPP_$SweepData.prototype = {
	free: function() {
		this.prev = null;
		this.shape = null;
		this.aabb = null;
	}
	,alloc: function() {
	}
	,gt: function(x) {
		return this.aabb.minx > x.aabb.minx;
	}
	,__class__: zpp_$nape_space_ZPP_$SweepData
};
var zpp_$nape_space_ZPP_$SweepPhase = function(space) {
	this.failed = null;
	this.list = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
$hxClasses["zpp_nape.space.ZPP_SweepPhase"] = zpp_$nape_space_ZPP_$SweepPhase;
zpp_$nape_space_ZPP_$SweepPhase.__name__ = true;
zpp_$nape_space_ZPP_$SweepPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$SweepPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	__insert: function(shape) {
		var dat;
		if(zpp_$nape_space_ZPP_$SweepData.zpp_pool == null) dat = new zpp_$nape_space_ZPP_$SweepData(); else {
			dat = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
			zpp_$nape_space_ZPP_$SweepData.zpp_pool = dat.next;
			dat.next = null;
		}
		null;
		shape.sweep = dat;
		dat.shape = shape;
		dat.aabb = shape.aabb;
		dat.next = this.list;
		if(this.list != null) this.list.prev = dat;
		this.list = dat;
	}
	,__remove: function(shape) {
		var dat = shape.sweep;
		if(dat.prev == null) this.list = dat.next; else dat.prev.next = dat.next;
		if(dat.next != null) dat.next.prev = dat.prev;
		shape.sweep = null;
		var o = dat;
		o.prev = null;
		o.shape = null;
		o.aabb = null;
		o.next = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool = o;
	}
	,__sync: function(shape) {
		if(!this.space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.list != null) this.sync_broadphase_fast();
	}
	,sync_broadphase_fast: function() {
		var a = this.list.next;
		while(a != null) {
			var n = a.next;
			var b = a.prev;
			if(a.aabb.minx > b.aabb.minx) {
				a = n;
				continue;
			}
			while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
			var prev = a.prev;
			prev.next = a.next;
			if(a.next != null) a.next.prev = prev;
			if(b.prev == null) {
				a.prev = null;
				this.list = a;
				a.next = b;
				b.prev = a;
			} else {
				a.prev = b.prev;
				b.prev = a;
				a.prev.next = a;
				a.next = b;
			}
			a = n;
		}
	}
	,broadphase: function(space,discrete) {
		if(this.list != null) {
			this.sync_broadphase_fast();
			var d1 = this.list;
			while(d1 != null) {
				var d2 = d1.next;
				var s1 = d1.shape;
				var b1 = s1.body;
				var bottom = d1.aabb.maxx;
				while(d2 != null) {
					if(d2.aabb.minx > bottom) break;
					var s2 = d2.shape;
					var b2 = s2.body;
					if(b2 == b1) {
						d2 = d2.next;
						continue;
					}
					if(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) {
						d2 = d2.next;
						continue;
					}
					if(b1.component.sleeping && b2.component.sleeping) {
						d2 = d2.next;
						continue;
					}
					if(s1.aabb.intersectY(s2.aabb)) {
						if(discrete) space.narrowPhase(s1,s2,!(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC),null,false); else space.continuousEvent(s1,s2,!(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC),null,false);
					}
					d2 = d2.next;
				}
				d1 = d1.next;
			}
		}
	}
	,clear: function() {
		while(this.list != null) {
			this.list.shape.removedFromSpace();
			this.__remove(this.list.shape);
		}
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
						if(zpp_$nape_geom_ZPP_$Collide.circleContains(shape.circle,v)) ret.push(shape.outer);
					} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(shape.polygon,v)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(!ret.has(body)) {
					if(filter == null || shape.filter.shouldCollide(filter)) {
						if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
							if(zpp_$nape_geom_ZPP_$Collide.circleContains(shape.circle,v)) ret.push(body);
						} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(shape.polygon,v)) ret.push(body);
					}
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(strict) {
					if(containment) {
						if(zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(ab.contains(a.aabb)) ret.push(shape.outer); else if(a.aabb.intersect(ab)) {
						if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(shape.outer);
					}
				} else if(containment?ab.contains(a.aabb):a.aabb.intersect(ab)) ret.push(shape.outer);
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(a.aabb.intersect(ab)) {
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(strict) {
						if(containment) {
							if(!this.failed.has(body)) {
								var col = zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,shape);
								if(!ret.has(body) && col) ret.push(body); else if(!col) {
									ret.remove(body);
									this.failed.push(body);
								}
							}
						} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(body);
					} else if(containment) {
						if(!this.failed.has(body)) {
							var col1 = ab.contains(shape.aabb);
							if(!ret.has(body) && col1) ret.push(body); else if(!col1) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && ab.contains(shape.aabb)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,shape);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_$nape_geom_ZPP_$Collide.containTest(shape,shape2)) ret.push(shape2.outer);
					} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape2,shape)) ret.push(shape2.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				var body = shape2.body.outer;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_$nape_geom_ZPP_$Collide.containTest(shape,shape2);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,shape2)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,rayCast: function(ray,inner,filter) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var mint = ray.maxdist;
		var minres = null;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0 && t < mint) {
						var result;
						if(a.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) result = ray.circlesect(a.shape.circle,inner,mint); else result = ray.polysect(a.shape.polygon,inner,mint);
						if(result != null) {
							if(result.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
							mint = result.zpp_inner.toiDistance;
							if(minres != null) {
								if(minres.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
								minres.zpp_inner.free();
							}
							minres = result;
						}
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a1 = this.list;
			var b = null;
			while(a1 != null && a1.aabb.minx <= rayab.maxx) {
				b = a1;
				a1 = a1.next;
			}
			a1 = b;
			while(a1 != null) {
				if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
					var t1 = ray.aabbsect(a1.aabb);
					if(t1 >= 0 && t1 < mint) {
						var result1;
						if(a1.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) result1 = ray.circlesect(a1.shape.circle,inner,mint); else result1 = ray.polysect(a1.shape.polygon,inner,mint);
						if(result1 != null) {
							if(result1.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
							mint = result1.zpp_inner.toiDistance;
							if(minres != null) {
								if(minres.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
								minres.zpp_inner.free();
							}
							minres = result1;
						}
					}
				}
				a1 = a1.prev;
			}
		} else {
			var a2 = this.list;
			while(a2 != null && a2.aabb.minx <= rayab.maxx && a2.aabb.minx < ray.originx + ray.dirx * mint) {
				if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
					var t2 = ray.aabbsect(a2.aabb);
					if(t2 >= 0 && t2 < mint) {
						var result2;
						if(a2.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) result2 = ray.circlesect(a2.shape.circle,inner,mint); else result2 = ray.polysect(a2.shape.polygon,inner,mint);
						if(result2 != null) {
							if(result2.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
							mint = result2.zpp_inner.toiDistance;
							if(minres != null) {
								if(minres.zpp_inner.next != null) throw new js__$Boot_HaxeError("Error: This object has been disposed of and cannot be used");
								minres.zpp_inner.free();
							}
							minres = result2;
						}
					}
				}
				a2 = a2.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		return minres;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var ret;
		if(output == null) ret = new nape_geom_RayResultList(); else ret = output;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0) {
						if(a.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a1 = this.list;
			var b = null;
			while(a1 != null && a1.aabb.minx <= rayab.maxx) {
				b = a1;
				a1 = a1.next;
			}
			a1 = b;
			while(a1 != null) {
				if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
					var t1 = ray.aabbsect(a1.aabb);
					if(t1 >= 0) {
						if(a1.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ray.circlesect2(a1.shape.circle,inner,ret); else ray.polysect2(a1.shape.polygon,inner,ret);
					}
				}
				a1 = a1.prev;
			}
		} else {
			var a2 = this.list;
			while(a2 != null && a2.aabb.minx <= rayab.maxx) {
				if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
					var t2 = ray.aabbsect(a2.aabb);
					if(t2 >= 0) {
						if(a2.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ray.circlesect2(a2.shape.circle,inner,ret); else ray.polysect2(a2.shape.polygon,inner,ret);
					}
				}
				a2 = a2.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		return ret;
	}
	,__class__: zpp_$nape_space_ZPP_$SweepPhase
});
var zpp_$nape_util_ZNPArray2_$Float = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = [];
};
$hxClasses["zpp_nape.util.ZNPArray2_Float"] = zpp_$nape_util_ZNPArray2_$Float;
zpp_$nape_util_ZNPArray2_$Float.__name__ = true;
zpp_$nape_util_ZNPArray2_$Float.prototype = {
	resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_$nape_util_ZNPArray2_$Float
};
var zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = [];
};
$hxClasses["zpp_nape.util.ZNPArray2_ZPP_GeomVert"] = zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert;
zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert.__name__ = true;
zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert.prototype = {
	resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert
};
var zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = [];
};
$hxClasses["zpp_nape.util.ZNPArray2_ZPP_MarchPair"] = zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair;
zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair.__name__ = true;
zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair.prototype = {
	resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair
};
var zpp_$nape_util_Hashable2_$Boolfalse = function() {
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.next = null;
	this.value = false;
};
$hxClasses["zpp_nape.util.Hashable2_Boolfalse"] = zpp_$nape_util_Hashable2_$Boolfalse;
zpp_$nape_util_Hashable2_$Boolfalse.__name__ = true;
zpp_$nape_util_Hashable2_$Boolfalse.get = function(id,di,val) {
	var ret = zpp_$nape_util_Hashable2_$Boolfalse.getpersist(id,di);
	ret.value = val;
	return ret;
};
zpp_$nape_util_Hashable2_$Boolfalse.getpersist = function(id,di) {
	var ret;
	if(zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool == null) ret = new zpp_$nape_util_Hashable2_$Boolfalse(); else {
		ret = zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool;
		zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.id = id;
	ret.di = di;
	return ret;
};
zpp_$nape_util_Hashable2_$Boolfalse.ordered_get = function(id,di,val) {
	if(id <= di) return zpp_$nape_util_Hashable2_$Boolfalse.get(id,di,val); else return zpp_$nape_util_Hashable2_$Boolfalse.get(di,id,val);
};
zpp_$nape_util_Hashable2_$Boolfalse.ordered_get_persist = function(id,di) {
	if(id <= di) return zpp_$nape_util_Hashable2_$Boolfalse.getpersist(id,di); else return zpp_$nape_util_Hashable2_$Boolfalse.getpersist(di,id);
};
zpp_$nape_util_Hashable2_$Boolfalse.prototype = {
	free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_util_Hashable2_$Boolfalse
};
var zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse = function() {
	this.cnt = 0;
	this.table = null;
	this.cnt = 0;
	this.table = [];
	var _g1 = 0;
	var _g = 1048576;
	while(_g1 < _g) {
		var i = _g1++;
		this.table.push(null);
	}
};
$hxClasses["zpp_nape.util.FastHash2_Hashable2_Boolfalse"] = zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse;
zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse.__name__ = true;
zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse.prototype = {
	empty: function() {
		return this.cnt == 0;
	}
	,clear: function() {
		var _g1 = 0;
		var _g = this.table.length;
		while(_g1 < _g) {
			var i = _g1++;
			var n = this.table[i];
			if(n == null) continue;
			while(n != null) {
				var t = n.hnext;
				n.hnext = null;
				n;
				n = t;
			}
			this.table[i] = null;
		}
	}
	,get: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return null; else if(n.id == id && n.di == di) return n; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n;
		}
	}
	,ordered_get: function(id,di) {
		if(id > di) {
			var t = id;
			id = di;
			di = t;
		}
		return this.get(id,di);
	}
	,has: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return false; else if(n.id == id && n.di == di) return true; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n != null;
		}
	}
	,maybeAdd: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		var cont = true;
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else if(cont) {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		if(cont) this.cnt++;
	}
	,add: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		this.cnt++;
	}
	,remove: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == arb) this.table[h] = n.hnext; else if(n != null) {
			var pre;
			do {
				pre = n;
				n = n.hnext;
			} while(n != null && n != arb);
			pre.hnext = n.hnext;
		}
		arb.hnext = null;
		this.cnt--;
	}
	,hash: function(id,di) {
		return id * 106039 + di & 1048575;
	}
	,__class__: zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse
};
var zpp_$nape_util_ZNPList_$ZPP_$CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CallbackSet"] = zpp_$nape_util_ZNPList_$ZPP_$CallbackSet;
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPList_$ZPP_$Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Shape"] = zpp_$nape_util_ZNPList_$ZPP_$Shape;
zpp_$nape_util_ZNPList_$ZPP_$Shape.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Shape.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Shape
};
var zpp_$nape_util_ZNPList_$ZPP_$Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Body"] = zpp_$nape_util_ZNPList_$ZPP_$Body;
zpp_$nape_util_ZNPList_$ZPP_$Body.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Body.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Body
};
var zpp_$nape_util_ZNPList_$ZPP_$Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Compound"] = zpp_$nape_util_ZNPList_$ZPP_$Compound;
zpp_$nape_util_ZNPList_$ZPP_$Compound.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Compound.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Compound(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Compound(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Compound
};
var zpp_$nape_util_ZNPList_$ZPP_$Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Arbiter"] = zpp_$nape_util_ZNPList_$ZPP_$Arbiter;
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSetPair"] = zpp_$nape_util_ZNPList_$ZPP_$CbSetPair;
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPList_$ZPP_$CutInt = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CutInt"] = zpp_$nape_util_ZNPList_$ZPP_$CutInt;
zpp_$nape_util_ZNPList_$ZPP_$CutInt.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CutInt.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CutInt(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CutInt(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CutInt
};
var zpp_$nape_util_ZNPList_$ZPP_$CutVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CutVert"] = zpp_$nape_util_ZNPList_$ZPP_$CutVert;
zpp_$nape_util_ZNPList_$ZPP_$CutVert.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CutVert.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CutVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CutVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CutVert
};
var zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_PartitionVertex"] = zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex;
zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex
};
var zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_PartitionedPoly"] = zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly;
zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly
};
var zpp_$nape_util_ZNPList_$ZPP_$GeomVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_GeomVert"] = zpp_$nape_util_ZNPList_$ZPP_$GeomVert;
zpp_$nape_util_ZNPList_$ZPP_$GeomVert.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$GeomVert.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$GeomVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$GeomVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$GeomVert
};
var zpp_$nape_util_ZNPList_$ZPP_$SimplifyP = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SimplifyP"] = zpp_$nape_util_ZNPList_$ZPP_$SimplifyP;
zpp_$nape_util_ZNPList_$ZPP_$SimplifyP.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$SimplifyP.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SimplifyP
};
var zpp_$nape_util_ZNPList_$ZPP_$SimpleVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SimpleVert"] = zpp_$nape_util_ZNPList_$ZPP_$SimpleVert;
zpp_$nape_util_ZNPList_$ZPP_$SimpleVert.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$SimpleVert.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SimpleVert
};
var zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SimpleEvent"] = zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent;
zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent
};
var zpp_$nape_util_ZNPList_$ZPP_$AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_AABBPair"] = zpp_$nape_util_ZNPList_$ZPP_$AABBPair;
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPList_$ZPP_$Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Edge"] = zpp_$nape_util_ZNPList_$ZPP_$Edge;
zpp_$nape_util_ZNPList_$ZPP_$Edge.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Edge.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Edge
};
var zpp_$nape_util_ZNPList_$ZPP_$Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Component"] = zpp_$nape_util_ZNPList_$ZPP_$Component;
zpp_$nape_util_ZNPList_$ZPP_$Component.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Component.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Component(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Component(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Component
};
var zpp_$nape_util_ZNPList_$ZPP_$AABBNode = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_AABBNode"] = zpp_$nape_util_ZNPList_$ZPP_$AABBNode;
zpp_$nape_util_ZNPList_$ZPP_$AABBNode.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$AABBNode.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBNode(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBNode(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$AABBNode
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionGroup"] = zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup;
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_FluidArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter;
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SensorArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter;
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ColArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$ColArbiter;
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Listener"] = zpp_$nape_util_ZNPList_$ZPP_$Listener;
zpp_$nape_util_ZNPList_$ZPP_$Listener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Listener.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Listener
};
var zpp_$nape_util_ZNPList_$ZPP_$ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ToiEvent"] = zpp_$nape_util_ZNPList_$ZPP_$ToiEvent;
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPList_$ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ConvexResult"] = zpp_$nape_util_ZNPList_$ConvexResult;
zpp_$nape_util_ZNPList_$ConvexResult.__name__ = true;
zpp_$nape_util_ZNPList_$ConvexResult.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ConvexResult(); else {
			ret = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool;
			zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ConvexResult(); else {
			ret = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool;
			zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool;
		zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool;
		zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ConvexResult
};
var zpp_$nape_util_ZNPList_$ZPP_$GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_GeomPoly"] = zpp_$nape_util_ZNPList_$ZPP_$GeomPoly;
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPList_$RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_RayResult"] = zpp_$nape_util_ZNPList_$RayResult;
zpp_$nape_util_ZNPList_$RayResult.__name__ = true;
zpp_$nape_util_ZNPList_$RayResult.prototype = {
	begin: function() {
		return this.head;
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$RayResult.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$RayResult(); else {
			ret = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool;
			zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$RayResult.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$RayResult(); else {
			ret = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool;
			zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool;
		zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool;
		zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$RayResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbType = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbType"] = zpp_$nape_util_ZNPNode_$ZPP_$CbType;
zpp_$nape_util_ZNPNode_$ZPP_$CbType.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CbType.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbType
};
var zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CallbackSet"] = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet;
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$Shape = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Shape"] = zpp_$nape_util_ZNPNode_$ZPP_$Shape;
zpp_$nape_util_ZNPNode_$ZPP_$Shape.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Shape.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Shape
};
var zpp_$nape_util_ZNPNode_$ZPP_$Body = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Body"] = zpp_$nape_util_ZNPNode_$ZPP_$Body;
zpp_$nape_util_ZNPNode_$ZPP_$Body.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Body.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Body
};
var zpp_$nape_util_ZNPNode_$ZPP_$Constraint = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Constraint"] = zpp_$nape_util_ZNPNode_$ZPP_$Constraint;
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPNode_$ZPP_$Compound = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Compound"] = zpp_$nape_util_ZNPNode_$ZPP_$Compound;
zpp_$nape_util_ZNPNode_$ZPP_$Compound.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Compound.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Compound
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionListener"] = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSet"] = zpp_$nape_util_ZNPNode_$ZPP_$CbSet;
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$Interactor = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Interactor"] = zpp_$nape_util_ZNPNode_$ZPP_$Interactor;
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPNode_$ZPP_$BodyListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_BodyListener"] = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener;
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$Arbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Arbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter;
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ConstraintListener"] = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener;
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSetPair"] = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair;
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPNode_$ZPP_$CutInt = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CutInt"] = zpp_$nape_util_ZNPNode_$ZPP_$CutInt;
zpp_$nape_util_ZNPNode_$ZPP_$CutInt.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CutInt.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CutInt
};
var zpp_$nape_util_ZNPNode_$ZPP_$CutVert = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CutVert"] = zpp_$nape_util_ZNPNode_$ZPP_$CutVert;
zpp_$nape_util_ZNPNode_$ZPP_$CutVert.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$CutVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CutVert
};
var zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_PartitionVertex"] = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex;
zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex
};
var zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_PartitionedPoly"] = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly;
zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly
};
var zpp_$nape_util_ZNPNode_$ZPP_$GeomVert = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_GeomVert"] = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert;
zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$GeomVert
};
var zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SimplifyP"] = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP;
zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP
};
var zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SimpleVert"] = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert;
zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert
};
var zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SimpleEvent"] = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent;
zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent
};
var zpp_$nape_util_ZNPNode_$ZPP_$AABBPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_AABBPair"] = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair;
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPNode_$ZPP_$Edge = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Edge"] = zpp_$nape_util_ZNPNode_$ZPP_$Edge;
zpp_$nape_util_ZNPNode_$ZPP_$Edge.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Edge.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Edge
};
var zpp_$nape_util_ZNPNode_$ZPP_$Vec2 = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Vec2"] = zpp_$nape_util_ZNPNode_$ZPP_$Vec2;
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Vec2
};
var zpp_$nape_util_ZNPNode_$ZPP_$Component = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Component"] = zpp_$nape_util_ZNPNode_$ZPP_$Component;
zpp_$nape_util_ZNPNode_$ZPP_$Component.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Component.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Component
};
var zpp_$nape_util_ZNPNode_$ZPP_$AABBNode = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_AABBNode"] = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode;
zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$AABBNode
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionGroup"] = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_FluidArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SensorArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ColArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$Listener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Listener"] = zpp_$nape_util_ZNPNode_$ZPP_$Listener;
zpp_$nape_util_ZNPNode_$ZPP_$Listener.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$Listener.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Listener
};
var zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ToiEvent"] = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent;
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPNode_$ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ConvexResult"] = zpp_$nape_util_ZNPNode_$ConvexResult;
zpp_$nape_util_ZNPNode_$ConvexResult.__name__ = true;
zpp_$nape_util_ZNPNode_$ConvexResult.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ConvexResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_GeomPoly"] = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly;
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.__name__ = true;
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPNode_$RayResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_RayResult"] = zpp_$nape_util_ZNPNode_$RayResult;
zpp_$nape_util_ZNPNode_$RayResult.__name__ = true;
zpp_$nape_util_ZNPNode_$RayResult.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$RayResult
};
var zpp_$nape_util_ZPP_$MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape_geom_Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
$hxClasses["zpp_nape.util.ZPP_MixVec2List"] = zpp_$nape_util_ZPP_$MixVec2List;
zpp_$nape_util_ZPP_$MixVec2List.__name__ = true;
zpp_$nape_util_ZPP_$MixVec2List.get = function(list,immutable) {
	if(immutable == null) immutable = false;
	var ret = new zpp_$nape_util_ZPP_$MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
zpp_$nape_util_ZPP_$MixVec2List.__super__ = nape_geom_Vec2List;
zpp_$nape_util_ZPP_$MixVec2List.prototype = $extend(nape_geom_Vec2List.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var cx_ite = this.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				this._length++;
				cx_ite = cx_ite.next;
			}
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		this.zpp_inner.validate();
		if(this.inner.modified) {
			this.zip_length = true;
			this._length = 0;
			this.at_ite = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw new js__$Boot_HaxeError("Error: Index out of bounds");
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.at_index || this.at_ite == null) {
			this.at_index = 0;
			this.at_ite = this.inner.next;
			while(true) {
				var x = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		while(this.at_index != index) {
			this.at_index++;
			this.at_ite = this.at_ite.next;
			while(true) {
				var x1 = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		return this.at_ite.wrapper();
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_vm();
		if(obj.zpp_inner._inuse) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " is already in use");
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.inner.add(obj.zpp_inner); else {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_vm();
		if(obj.zpp_inner._inuse) throw new js__$Boot_HaxeError("Error: " + "Vec2" + " is already in use");
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			} else this.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.empty()) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.inner.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		} else {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.inner.next; else ret = ite.next;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		if(this.empty()) throw new js__$Boot_HaxeError("Error: Cannot remove from empty list");
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.inner.next; else ret = ite.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		} else {
			ret = this.inner.next;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(obj.zpp_inner == x) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw new js__$Boot_HaxeError("Error: " + "Vec2" + "List is immutable");
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,__class__: zpp_$nape_util_ZPP_$MixVec2List
});
var zpp_$nape_util_ZPP_$ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ConstraintList"] = zpp_$nape_util_ZPP_$ConstraintList;
zpp_$nape_util_ZPP_$ConstraintList.__name__ = true;
zpp_$nape_util_ZPP_$ConstraintList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_constraint_ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ConstraintList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$ConstraintList
};
var zpp_$nape_util_ZPP_$BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_BodyList"] = zpp_$nape_util_ZPP_$BodyList;
zpp_$nape_util_ZPP_$BodyList.__name__ = true;
zpp_$nape_util_ZPP_$BodyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_phys_BodyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$BodyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$BodyList
};
var zpp_$nape_util_ZPP_$InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_InteractorList"] = zpp_$nape_util_ZPP_$InteractorList;
zpp_$nape_util_ZPP_$InteractorList.__name__ = true;
zpp_$nape_util_ZPP_$InteractorList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_phys_InteractorList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$InteractorList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$InteractorList
};
var zpp_$nape_util_ZPP_$CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CompoundList"] = zpp_$nape_util_ZPP_$CompoundList;
zpp_$nape_util_ZPP_$CompoundList.__name__ = true;
zpp_$nape_util_ZPP_$CompoundList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_phys_CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CompoundList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$CompoundList
};
var zpp_$nape_util_ZPP_$ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ListenerList"] = zpp_$nape_util_ZPP_$ListenerList;
zpp_$nape_util_ZPP_$ListenerList.__name__ = true;
zpp_$nape_util_ZPP_$ListenerList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_callbacks_ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ListenerList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$ListenerList
};
var zpp_$nape_util_ZPP_$CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CbTypeList"] = zpp_$nape_util_ZPP_$CbTypeList;
zpp_$nape_util_ZPP_$CbTypeList.__name__ = true;
zpp_$nape_util_ZPP_$CbTypeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_callbacks_CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CbTypeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$CbTypeList
};
var zpp_$nape_util_ZPP_$Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_Vec2List"] = zpp_$nape_util_ZPP_$Vec2List;
zpp_$nape_util_ZPP_$Vec2List.__name__ = true;
zpp_$nape_util_ZPP_$Vec2List.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_geom_Vec2List();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$Vec2List.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$Vec2List
};
var zpp_$nape_util_ZPP_$GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$GeomPoly();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_GeomPolyList"] = zpp_$nape_util_ZPP_$GeomPolyList;
zpp_$nape_util_ZPP_$GeomPolyList.__name__ = true;
zpp_$nape_util_ZPP_$GeomPolyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_geom_GeomPolyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$GeomPolyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$GeomPolyList
};
var zpp_$nape_util_ZPP_$RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$RayResult();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_RayResultList"] = zpp_$nape_util_ZPP_$RayResultList;
zpp_$nape_util_ZPP_$RayResultList.__name__ = true;
zpp_$nape_util_ZPP_$RayResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_geom_RayResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$RayResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$RayResultList
};
var zpp_$nape_util_ZPP_$ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ConvexResult();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ConvexResultList"] = zpp_$nape_util_ZPP_$ConvexResultList;
zpp_$nape_util_ZPP_$ConvexResultList.__name__ = true;
zpp_$nape_util_ZPP_$ConvexResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_geom_ConvexResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ConvexResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$ConvexResultList
};
var zpp_$nape_util_ZPP_$EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_EdgeList"] = zpp_$nape_util_ZPP_$EdgeList;
zpp_$nape_util_ZPP_$EdgeList.__name__ = true;
zpp_$nape_util_ZPP_$EdgeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_shape_EdgeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$EdgeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$EdgeList
};
var zpp_$nape_util_ZPP_$ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ShapeList"] = zpp_$nape_util_ZPP_$ShapeList;
zpp_$nape_util_ZPP_$ShapeList.__name__ = true;
zpp_$nape_util_ZPP_$ShapeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_shape_ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ShapeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$ShapeList
};
var zpp_$nape_util_ZPP_$InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_InteractionGroupList"] = zpp_$nape_util_ZPP_$InteractionGroupList;
zpp_$nape_util_ZPP_$InteractionGroupList.__name__ = true;
zpp_$nape_util_ZPP_$InteractionGroupList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_dynamics_InteractionGroupList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$InteractionGroupList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$InteractionGroupList
};
var zpp_$nape_util_ZPP_$ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ArbiterList"] = zpp_$nape_util_ZPP_$ArbiterList;
zpp_$nape_util_ZPP_$ArbiterList.__name__ = true;
zpp_$nape_util_ZPP_$ArbiterList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_dynamics_ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ArbiterList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$ArbiterList
};
var zpp_$nape_util_ZPP_$ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$Contact();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ContactList"] = zpp_$nape_util_ZPP_$ContactList;
zpp_$nape_util_ZPP_$ContactList.__name__ = true;
zpp_$nape_util_ZPP_$ContactList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_dynamics_ContactList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ContactList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,__class__: zpp_$nape_util_ZPP_$ContactList
};
var zpp_$nape_util_ZPP_$Math = function() { };
$hxClasses["zpp_nape.util.ZPP_Math"] = zpp_$nape_util_ZPP_$Math;
zpp_$nape_util_ZPP_$Math.__name__ = true;
zpp_$nape_util_ZPP_$Math.sqrt = function(x) {
	return Math.sqrt(x);
};
zpp_$nape_util_ZPP_$Math.invsqrt = function(x) {
	return 1.0 / Math.sqrt(x);
};
zpp_$nape_util_ZPP_$Math.sqr = function(x) {
	return x * x;
};
zpp_$nape_util_ZPP_$Math.clamp2 = function(x,a) {
	return zpp_$nape_util_ZPP_$Math.clamp(x,-a,a);
};
zpp_$nape_util_ZPP_$Math.clamp = function(x,a,b) {
	if(x < a) return a; else if(x > b) return b; else return x;
};
var zpp_$nape_util_ZPP_$PubPool = function() { };
$hxClasses["zpp_nape.util.ZPP_PubPool"] = zpp_$nape_util_ZPP_$PubPool;
zpp_$nape_util_ZPP_$PubPool.__name__ = true;
var zpp_$nape_util_ZPP_$Set_$ZPP_$Body = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_Body"] = zpp_$nape_util_ZPP_$Set_$ZPP_$Body;
zpp_$nape_util_ZPP_$Set_$ZPP_$Body.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$Body.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$Body
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSetPair"] = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_PartitionVertex"] = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex;
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_PartitionPair"] = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair;
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_SimpleVert"] = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_SimpleSeg"] = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_SimpleEvent"] = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSet"] = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = true;
$hxClasses.Array = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.003921568627447);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
Main.randomColor = false;
Main.drawColorR = 1;
Main.drawColorG = 1;
Main.drawColorB = 1;
Main.drawColorA = 1;
fluidity2_backends_LimeGraphicsObject.initialized = false;
gtoolbox_Input.ONKEYDOWN = 0;
gtoolbox_Input.ONKEYUP = 1;
gtoolbox_KeyboardKeys.NUMBER_0 = new gtoolbox_Key(48,"0","0",")");
gtoolbox_KeyboardKeys.NUMBER_1 = new gtoolbox_Key(49,"1","1","!");
gtoolbox_KeyboardKeys.NUMBER_2 = new gtoolbox_Key(50,"2","2","@");
gtoolbox_KeyboardKeys.NUMBER_3 = new gtoolbox_Key(51,"3","3","#");
gtoolbox_KeyboardKeys.NUMBER_4 = new gtoolbox_Key(52,"4","4","$");
gtoolbox_KeyboardKeys.NUMBER_5 = new gtoolbox_Key(53,"5","5","%");
gtoolbox_KeyboardKeys.NUMBER_6 = new gtoolbox_Key(54,"6","6","^");
gtoolbox_KeyboardKeys.NUMBER_7 = new gtoolbox_Key(55,"7","7","&");
gtoolbox_KeyboardKeys.NUMBER_8 = new gtoolbox_Key(56,"8","8","*");
gtoolbox_KeyboardKeys.NUMBER_9 = new gtoolbox_Key(57,"9","9","(");
gtoolbox_KeyboardKeys.A = new gtoolbox_Key(65,"a","a","A");
gtoolbox_KeyboardKeys.B = new gtoolbox_Key(66,"b","b","B");
gtoolbox_KeyboardKeys.C = new gtoolbox_Key(67,"c","c","C");
gtoolbox_KeyboardKeys.D = new gtoolbox_Key(68,"d","d","D");
gtoolbox_KeyboardKeys.E = new gtoolbox_Key(69,"e","e","E");
gtoolbox_KeyboardKeys.F = new gtoolbox_Key(70,"f","f","F");
gtoolbox_KeyboardKeys.G = new gtoolbox_Key(71,"g","g","G");
gtoolbox_KeyboardKeys.H = new gtoolbox_Key(72,"h","h","H");
gtoolbox_KeyboardKeys.I = new gtoolbox_Key(73,"i","i","I");
gtoolbox_KeyboardKeys.J = new gtoolbox_Key(74,"j","j","J");
gtoolbox_KeyboardKeys.K = new gtoolbox_Key(75,"k","k","K");
gtoolbox_KeyboardKeys.L = new gtoolbox_Key(76,"l","l","L");
gtoolbox_KeyboardKeys.M = new gtoolbox_Key(77,"m","m","M");
gtoolbox_KeyboardKeys.N = new gtoolbox_Key(78,"n","n","N");
gtoolbox_KeyboardKeys.O = new gtoolbox_Key(79,"o","o","O");
gtoolbox_KeyboardKeys.P = new gtoolbox_Key(80,"p","p","P");
gtoolbox_KeyboardKeys.Q = new gtoolbox_Key(81,"q","q","Q");
gtoolbox_KeyboardKeys.R = new gtoolbox_Key(82,"r","r","R");
gtoolbox_KeyboardKeys.S = new gtoolbox_Key(83,"s","s","S");
gtoolbox_KeyboardKeys.T = new gtoolbox_Key(84,"t","t","T");
gtoolbox_KeyboardKeys.U = new gtoolbox_Key(85,"u","u","U");
gtoolbox_KeyboardKeys.V = new gtoolbox_Key(86,"v","v","V");
gtoolbox_KeyboardKeys.W = new gtoolbox_Key(87,"w","w","W");
gtoolbox_KeyboardKeys.X = new gtoolbox_Key(88,"x","x","X");
gtoolbox_KeyboardKeys.Y = new gtoolbox_Key(89,"y","y","Y");
gtoolbox_KeyboardKeys.Z = new gtoolbox_Key(90,"z","z","Z");
gtoolbox_KeyboardKeys.NUMPAD_0 = new gtoolbox_Key(96,"n1","1","1");
gtoolbox_KeyboardKeys.NUMPAD_1 = new gtoolbox_Key(97,"n2","2","2");
gtoolbox_KeyboardKeys.NUMPAD_2 = new gtoolbox_Key(98,"n3","3","3");
gtoolbox_KeyboardKeys.NUMPAD_3 = new gtoolbox_Key(99,"n4","4","4");
gtoolbox_KeyboardKeys.NUMPAD_4 = new gtoolbox_Key(100,"n5","5","5");
gtoolbox_KeyboardKeys.NUMPAD_5 = new gtoolbox_Key(101,"n6","6","6");
gtoolbox_KeyboardKeys.NUMPAD_6 = new gtoolbox_Key(102,"n7","7","7");
gtoolbox_KeyboardKeys.NUMPAD_7 = new gtoolbox_Key(103,"n8","8","8");
gtoolbox_KeyboardKeys.NUMPAD_8 = new gtoolbox_Key(104,"n9","9","9");
gtoolbox_KeyboardKeys.NUMPAD_9 = new gtoolbox_Key(105,"n10","10","10");
gtoolbox_KeyboardKeys.NUMPAD_MULTIPLY = new gtoolbox_Key(106,"n*","*","*");
gtoolbox_KeyboardKeys.NUMPAD_ADD = new gtoolbox_Key(107,"n+","+","+");
gtoolbox_KeyboardKeys.NUMPAD_ENTER = new gtoolbox_Key(108,"nenter","\n","\n");
gtoolbox_KeyboardKeys.NUMPAD_SUBTRACT = new gtoolbox_Key(109,"n-","-","-");
gtoolbox_KeyboardKeys.NUMPAD_DECIMAL = new gtoolbox_Key(110,"n.",".",".");
gtoolbox_KeyboardKeys.NUMPAD_DIVIDE = new gtoolbox_Key(111,"n/","/","/");
gtoolbox_KeyboardKeys.F1 = new gtoolbox_Key(112,"f1","","");
gtoolbox_KeyboardKeys.F2 = new gtoolbox_Key(113,"f2","","");
gtoolbox_KeyboardKeys.F3 = new gtoolbox_Key(114,"f3","","");
gtoolbox_KeyboardKeys.F4 = new gtoolbox_Key(115,"f4","","");
gtoolbox_KeyboardKeys.F5 = new gtoolbox_Key(116,"f5","","");
gtoolbox_KeyboardKeys.F6 = new gtoolbox_Key(117,"f6","","");
gtoolbox_KeyboardKeys.F7 = new gtoolbox_Key(118,"f7","","");
gtoolbox_KeyboardKeys.F8 = new gtoolbox_Key(119,"f8","","");
gtoolbox_KeyboardKeys.F9 = new gtoolbox_Key(120,"f9","","");
gtoolbox_KeyboardKeys.F10 = new gtoolbox_Key(121,"f10","","");
gtoolbox_KeyboardKeys.F11 = new gtoolbox_Key(122,"f11","","");
gtoolbox_KeyboardKeys.F12 = new gtoolbox_Key(123,"f12","","");
gtoolbox_KeyboardKeys.F13 = new gtoolbox_Key(124,"f13","","");
gtoolbox_KeyboardKeys.F14 = new gtoolbox_Key(125,"f14","","");
gtoolbox_KeyboardKeys.F15 = new gtoolbox_Key(126,"f15","","");
gtoolbox_KeyboardKeys.BACKSPACE = new gtoolbox_Key(8,"backspace","","");
gtoolbox_KeyboardKeys.TAB = new gtoolbox_Key(9,"tab","\t","\t");
gtoolbox_KeyboardKeys.ALTERNATE = new gtoolbox_Key(18,"alt","","");
gtoolbox_KeyboardKeys.ENTER = new gtoolbox_Key(13,"enter","\n","\n");
gtoolbox_KeyboardKeys.COMMAND = new gtoolbox_Key(15,"command","","");
gtoolbox_KeyboardKeys.SHIFT = new gtoolbox_Key(16,"shift","","");
gtoolbox_KeyboardKeys.CONTROL = new gtoolbox_Key(17,"control","","");
gtoolbox_KeyboardKeys.CAPS_LOCK = new gtoolbox_Key(20,"capslock","","");
gtoolbox_KeyboardKeys.NUMPAD = new gtoolbox_Key(21,"numlock","","");
gtoolbox_KeyboardKeys.ESCAPE = new gtoolbox_Key(27,"escape","","");
gtoolbox_KeyboardKeys.SPACE = new gtoolbox_Key(32,"space"," "," ");
gtoolbox_KeyboardKeys.PAGE_UP = new gtoolbox_Key(33,"pageup","","");
gtoolbox_KeyboardKeys.PAGE_DOWN = new gtoolbox_Key(34,"pagedown","","");
gtoolbox_KeyboardKeys.END = new gtoolbox_Key(35,"end","","");
gtoolbox_KeyboardKeys.HOME = new gtoolbox_Key(36,"home","","");
gtoolbox_KeyboardKeys.LEFT = new gtoolbox_Key(37,"left","","");
gtoolbox_KeyboardKeys.RIGHT = new gtoolbox_Key(39,"right","","");
gtoolbox_KeyboardKeys.UP = new gtoolbox_Key(38,"up","","");
gtoolbox_KeyboardKeys.DOWN = new gtoolbox_Key(40,"down","","");
gtoolbox_KeyboardKeys.INSERT = new gtoolbox_Key(45,"insert","","");
gtoolbox_KeyboardKeys.DELETE = new gtoolbox_Key(46,"delete","","");
gtoolbox_KeyboardKeys.NUMLOCK = new gtoolbox_Key(144,"numlock","","");
gtoolbox_KeyboardKeys.BREAK = new gtoolbox_Key(19,"break","","");
gtoolbox_KeyboardKeys.SEMICOLON = new gtoolbox_Key(186,";",";",":");
gtoolbox_KeyboardKeys.EQUAL = new gtoolbox_Key(187,"=","=","+");
gtoolbox_KeyboardKeys.COMMA = new gtoolbox_Key(188,",",",","<");
gtoolbox_KeyboardKeys.MINUS = new gtoolbox_Key(189,"-","-","_");
gtoolbox_KeyboardKeys.PERIOD = new gtoolbox_Key(190,".",".",">");
gtoolbox_KeyboardKeys.SLASH = new gtoolbox_Key(191,"/","/","?");
gtoolbox_KeyboardKeys.BACKQUOTE = new gtoolbox_Key(192,"`","`","~");
gtoolbox_KeyboardKeys.LEFTBRACKET = new gtoolbox_Key(219,"[","[","{");
gtoolbox_KeyboardKeys.BACKSLASH = new gtoolbox_Key(220,"\\","\\","|");
gtoolbox_KeyboardKeys.RIGHTBRACKET = new gtoolbox_Key(221,"]","]","}");
gtoolbox_KeyboardKeys.QUOTE = new gtoolbox_Key(222,"'","'","\"");
gtoolbox_KeyboardKeys.keys = [gtoolbox_KeyboardKeys.NUMBER_0,gtoolbox_KeyboardKeys.NUMBER_1,gtoolbox_KeyboardKeys.NUMBER_2,gtoolbox_KeyboardKeys.NUMBER_3,gtoolbox_KeyboardKeys.NUMBER_4,gtoolbox_KeyboardKeys.NUMBER_5,gtoolbox_KeyboardKeys.NUMBER_6,gtoolbox_KeyboardKeys.NUMBER_7,gtoolbox_KeyboardKeys.NUMBER_8,gtoolbox_KeyboardKeys.NUMBER_9,gtoolbox_KeyboardKeys.A,gtoolbox_KeyboardKeys.B,gtoolbox_KeyboardKeys.C,gtoolbox_KeyboardKeys.D,gtoolbox_KeyboardKeys.E,gtoolbox_KeyboardKeys.F,gtoolbox_KeyboardKeys.G,gtoolbox_KeyboardKeys.H,gtoolbox_KeyboardKeys.I,gtoolbox_KeyboardKeys.J,gtoolbox_KeyboardKeys.K,gtoolbox_KeyboardKeys.L,gtoolbox_KeyboardKeys.M,gtoolbox_KeyboardKeys.N,gtoolbox_KeyboardKeys.O,gtoolbox_KeyboardKeys.P,gtoolbox_KeyboardKeys.Q,gtoolbox_KeyboardKeys.R,gtoolbox_KeyboardKeys.S,gtoolbox_KeyboardKeys.T,gtoolbox_KeyboardKeys.U,gtoolbox_KeyboardKeys.V,gtoolbox_KeyboardKeys.W,gtoolbox_KeyboardKeys.X,gtoolbox_KeyboardKeys.Y,gtoolbox_KeyboardKeys.Z,gtoolbox_KeyboardKeys.NUMPAD_0,gtoolbox_KeyboardKeys.NUMPAD_1,gtoolbox_KeyboardKeys.NUMPAD_2,gtoolbox_KeyboardKeys.NUMPAD_3,gtoolbox_KeyboardKeys.NUMPAD_4,gtoolbox_KeyboardKeys.NUMPAD_5,gtoolbox_KeyboardKeys.NUMPAD_6,gtoolbox_KeyboardKeys.NUMPAD_7,gtoolbox_KeyboardKeys.NUMPAD_8,gtoolbox_KeyboardKeys.NUMPAD_9,gtoolbox_KeyboardKeys.NUMPAD_MULTIPLY,gtoolbox_KeyboardKeys.NUMPAD_ADD,gtoolbox_KeyboardKeys.NUMPAD_ENTER,gtoolbox_KeyboardKeys.NUMPAD_SUBTRACT,gtoolbox_KeyboardKeys.NUMPAD_DECIMAL,gtoolbox_KeyboardKeys.NUMPAD_DIVIDE,gtoolbox_KeyboardKeys.F1,gtoolbox_KeyboardKeys.F2,gtoolbox_KeyboardKeys.F3,gtoolbox_KeyboardKeys.F4,gtoolbox_KeyboardKeys.F5,gtoolbox_KeyboardKeys.F6,gtoolbox_KeyboardKeys.F7,gtoolbox_KeyboardKeys.F8,gtoolbox_KeyboardKeys.F9,gtoolbox_KeyboardKeys.F10,gtoolbox_KeyboardKeys.F11,gtoolbox_KeyboardKeys.F12,gtoolbox_KeyboardKeys.F13,gtoolbox_KeyboardKeys.F14,gtoolbox_KeyboardKeys.F15,gtoolbox_KeyboardKeys.BACKSPACE,gtoolbox_KeyboardKeys.TAB,gtoolbox_KeyboardKeys.ALTERNATE,gtoolbox_KeyboardKeys.ENTER,gtoolbox_KeyboardKeys.COMMAND,gtoolbox_KeyboardKeys.SHIFT,gtoolbox_KeyboardKeys.CONTROL,gtoolbox_KeyboardKeys.CAPS_LOCK,gtoolbox_KeyboardKeys.NUMPAD,gtoolbox_KeyboardKeys.ESCAPE,gtoolbox_KeyboardKeys.SPACE,gtoolbox_KeyboardKeys.PAGE_UP,gtoolbox_KeyboardKeys.PAGE_DOWN,gtoolbox_KeyboardKeys.END,gtoolbox_KeyboardKeys.HOME,gtoolbox_KeyboardKeys.LEFT,gtoolbox_KeyboardKeys.RIGHT,gtoolbox_KeyboardKeys.UP,gtoolbox_KeyboardKeys.DOWN,gtoolbox_KeyboardKeys.INSERT,gtoolbox_KeyboardKeys.DELETE,gtoolbox_KeyboardKeys.NUMLOCK,gtoolbox_KeyboardKeys.BREAK,gtoolbox_KeyboardKeys.SEMICOLON,gtoolbox_KeyboardKeys.EQUAL,gtoolbox_KeyboardKeys.COMMA,gtoolbox_KeyboardKeys.MINUS,gtoolbox_KeyboardKeys.PERIOD,gtoolbox_KeyboardKeys.SLASH,gtoolbox_KeyboardKeys.BACKQUOTE,gtoolbox_KeyboardKeys.LEFTBRACKET,gtoolbox_KeyboardKeys.BACKSLASH,gtoolbox_KeyboardKeys.RIGHTBRACKET,gtoolbox_KeyboardKeys.QUOTE];
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.initialized = false;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo_CairoFont.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_utils_ByteArray.lime_bytes_from_data_pointer = lime_system_System.load("lime","lime_bytes_from_data_pointer",2);
lime_utils_ByteArray.lime_bytes_get_data_pointer = lime_system_System.load("lime","lime_bytes_get_data_pointer",1);
lime_utils_ByteArray.lime_bytes_read_file = lime_system_System.load("lime","lime_bytes_read_file",1);
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
nape_Config.epsilon = 1e-8;
nape_Config.fluidAngularDragFriction = 2.5;
nape_Config.fluidAngularDrag = 100;
nape_Config.fluidVacuumDrag = 0.5;
nape_Config.fluidLinearDrag = 0.5;
nape_Config.collisionSlop = 0.2;
nape_Config.collisionSlopCCD = 0.5;
nape_Config.distanceThresholdCCD = 0.05;
nape_Config.staticCCDLinearThreshold = 0.05;
nape_Config.staticCCDAngularThreshold = 0.005;
nape_Config.bulletCCDLinearThreshold = 0.125;
nape_Config.bulletCCDAngularThreshold = 0.0125;
nape_Config.dynamicSweepLinearThreshold = 17;
nape_Config.dynamicSweepAngularThreshold = 0.6;
nape_Config.angularCCDSlipScale = 0.75;
nape_Config.arbiterExpirationDelay = 6;
nape_Config.staticFrictionThreshold = 2;
nape_Config.elasticThreshold = 20;
nape_Config.sleepDelay = 60;
nape_Config.linearSleepThreshold = 0.2;
nape_Config.angularSleepThreshold = 0.4;
nape_Config.contactBiasCoef = 0.3;
nape_Config.contactStaticBiasCoef = 0.6;
nape_Config.contactContinuousBiasCoef = 0.4;
nape_Config.contactContinuousStaticBiasCoef = 0.5;
nape_Config.constraintLinearSlop = 0.1;
nape_Config.constraintAngularSlop = 1e-3;
nape_Config.illConditionedThreshold = 2e+8;
nape_constraint_Constraint.zpp_internalAlloc = false;
nape_phys_Interactor.zpp_internalAlloc = false;
nape_shape_Shape.zpp_internalAlloc = false;
zpp_$nape_ZPP_$Const.FMAX = 1e100;
zpp_$nape_ZPP_$ID._Constraint = 0;
zpp_$nape_ZPP_$ID._Interactor = 0;
zpp_$nape_ZPP_$ID._CbType = 0;
zpp_$nape_ZPP_$ID._CbSet = 0;
zpp_$nape_ZPP_$ID._Listener = 0;
zpp_$nape_ZPP_$ID._ZPP_SimpleVert = 0;
zpp_$nape_ZPP_$ID._ZPP_SimpleSeg = 0;
zpp_$nape_ZPP_$ID._Space = 0;
zpp_$nape_ZPP_$ID._InteractionGroup = 0;
zpp_$nape_callbacks_ZPP_$Callback.internal = false;
zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT = new nape_callbacks_CbType();
zpp_$nape_util_ZPP_$Flags.internal = false;
zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT = 1;
zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE = 2;
zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS = 4;
zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT = 0;
zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED = 1;
zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED = 2;
zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT = 0;
zpp_$nape_util_ZPP_$Flags.id_InertiaMode_FIXED = 1;
zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT = 0;
zpp_$nape_util_ZPP_$Flags.id_MassMode_FIXED = 1;
zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC = 1;
zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC = 2;
zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC = 3;
zpp_$nape_util_ZPP_$Flags.id_ListenerType_BODY = 0;
zpp_$nape_util_ZPP_$Flags.id_ListenerType_CONSTRAINT = 1;
zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT = 1;
zpp_$nape_util_ZPP_$Flags.id_ListenerType_INTERACTION = 2;
zpp_$nape_util_ZPP_$Flags.id_PreFlag_IGNORE = 2;
zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE = 3;
zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT_ONCE = 3;
zpp_$nape_util_ZPP_$Flags.id_PreFlag_IGNORE_ONCE = 4;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN = 0;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING = 6;
zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION = 1;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_END = 1;
zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR = 2;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE = 2;
zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID = 4;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP = 3;
zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY = 7;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK = 4;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE = 5;
zpp_$nape_util_ZPP_$Flags.id_Winding_UNDEFINED = 0;
zpp_$nape_util_ZPP_$Flags.id_Winding_CLOCKWISE = 1;
zpp_$nape_util_ZPP_$Flags.id_Winding_ANTICLOCKWISE = 2;
zpp_$nape_util_ZPP_$Flags.id_ValidationResult_VALID = 0;
zpp_$nape_util_ZPP_$Flags.id_ValidationResult_DEGENERATE = 1;
zpp_$nape_util_ZPP_$Flags.id_ValidationResult_CONCAVE = 2;
zpp_$nape_util_ZPP_$Flags.id_ValidationResult_SELF_INTERSECTING = 3;
zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE = 0;
zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON = 1;
zpp_$nape_util_ZPP_$Flags.id_Broadphase_DYNAMIC_AABB_TREE = 0;
zpp_$nape_util_ZPP_$Flags.id_Broadphase_SWEEP_AND_PRUNE = 1;
zpp_$nape_util_ZPP_$Flags.id_ArbiterType_COLLISION = 1;
zpp_$nape_util_ZPP_$Flags.id_ArbiterType_SENSOR = 2;
zpp_$nape_util_ZPP_$Flags.id_ArbiterType_FLUID = 4;
zpp_$nape_callbacks_ZPP_$Listener.internal = false;
zpp_$nape_callbacks_ZPP_$Listener.types = [(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ListenerType_BODY;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ListenerType_PRE;
	return $r;
}(this))];
zpp_$nape_callbacks_ZPP_$Listener.events = [(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_END;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_PRE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
	return $r;
}(this))];
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
zpp_$nape_dynamics_ZPP_$Arbiter.COL = 1;
zpp_$nape_dynamics_ZPP_$Arbiter.FLUID = 4;
zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR = 2;
zpp_$nape_dynamics_ZPP_$Arbiter.types = [null,(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR;
	return $r;
}(this)),null,(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID;
	return $r;
}(this))];
zpp_$nape_dynamics_ZPP_$ColArbiter.FACE1 = 0;
zpp_$nape_dynamics_ZPP_$ColArbiter.FACE2 = 1;
zpp_$nape_dynamics_ZPP_$ColArbiter.CIRCLE = 2;
zpp_$nape_dynamics_ZPP_$Contact.internal = false;
zpp_$nape_dynamics_ZPP_$InteractionGroup.SHAPE = 1;
zpp_$nape_dynamics_ZPP_$InteractionGroup.BODY = 2;
zpp_$nape_geom_ZPP_$Collide.flowpoly = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$Collide.flowsegs = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$ConvexRayResult.internal = false;
zpp_$nape_geom_ZPP_$GeomVertexIterator.internal = false;
zpp_$nape_geom_ZPP_$MarchingSquares.me = new zpp_$nape_geom_ZPP_$MarchingSquares();
zpp_$nape_geom_ZPP_$MarchingSquares.look_march = [-1,224,56,216,14,-1,54,214,131,99,-1,91,141,109,181,85];
zpp_$nape_geom_ZPP_$PartitionVertex.nextId = 0;
zpp_$nape_geom_ZPP_$Ray.internal = false;
zpp_$nape_phys_ZPP_$Body.types = [null,(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC;
	return $r;
}(this))];
zpp_$nape_phys_ZPP_$Body.cur_graph_depth = 0;
zpp_$nape_phys_ZPP_$Material.WAKE = 1;
zpp_$nape_phys_ZPP_$Material.PROPS = 2;
zpp_$nape_phys_ZPP_$Material.ANGDRAG = 4;
zpp_$nape_phys_ZPP_$Material.ARBITERS = 8;
zpp_$nape_shape_ZPP_$Shape.types = [(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON;
	return $r;
}(this))];
zpp_$nape_shape_ZPP_$Edge.internal = false;
zpp_$nape_space_ZPP_$AABBTree.tmpaabb = new zpp_$nape_geom_ZPP_$AABB();
zpp_$nape_space_ZPP_$DynAABBPhase.FATTEN = 3.0;
zpp_$nape_space_ZPP_$DynAABBPhase.VEL_STEPS = 2.0;
zpp_$nape_util_ZPP_$ConstraintList.internal = false;
zpp_$nape_util_ZPP_$BodyList.internal = false;
zpp_$nape_util_ZPP_$InteractorList.internal = false;
zpp_$nape_util_ZPP_$CompoundList.internal = false;
zpp_$nape_util_ZPP_$ListenerList.internal = false;
zpp_$nape_util_ZPP_$CbTypeList.internal = false;
zpp_$nape_util_ZPP_$Vec2List.internal = false;
zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
zpp_$nape_util_ZPP_$RayResultList.internal = false;
zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
zpp_$nape_util_ZPP_$EdgeList.internal = false;
zpp_$nape_util_ZPP_$ShapeList.internal = false;
zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
zpp_$nape_util_ZPP_$ArbiterList.internal = false;
zpp_$nape_util_ZPP_$ContactList.internal = false;
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports);
